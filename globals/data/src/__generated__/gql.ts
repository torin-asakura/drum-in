/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "\nmutation MyMutation (\n  $formId:Int,\n  $nameId:Int, $nameValue: String,\n  $phoneId:Int, $phoneValue: String,\n  $telegramId:Int, $telegramValue: String,\n  ){\n  submitForm(\n  input: {\n    formId: $formId, \n    data: [\n      {id: $nameId, value: $nameValue}, \n      {id: $phoneId, value: $phoneValue}, \n      {id: $telegramId, value: $telegramValue}\n    ] \n  }\n  ) {\n    errors {\n      fieldId\n      message\n      slug\n    }\n    message\n    success\n  }\n}\n": types.MyMutationDocument,
    "\nquery ConsultationForm($id:ID!) {\n  form(id: $id) {\n    title\n    formId\n    addSubmit\n    allowPublicLink\n    classes {\n      elementClass\n      wrapperClass\n    }\n    clearComplete\n    currency\n    customMessages {\n      changeDateErrorMsg\n      changeEmailErrorMsg\n      confirmFieldErrorMsg\n      fieldNumberIncrementBy\n      fieldNumberNumMaxError\n      fieldNumberNumMinError\n      fieldsMarkedRequired\n      formErrorsCorrectErrors\n      honeypotHoneypotError\n      validateRequiredField\n    }\n    databaseId\n    defaultLabelPos\n    embedForm\n    fields {\n      nodes {\n        updatedAt\n        type\n        required\n        personallyIdentifiable\n        parentId\n        order\n        labelPos\n        label\n        key\n        id\n        fieldLabel\n        fieldKey\n        fieldId\n        databaseId\n        createdAt\n      }\n    }\n    formTitleHeadingLevel\n    hideComplete\n    id\n    key\n    limitSubmissionsSet {\n      subLimitMsg\n      subLimitNumber\n    }\n    loggedInSet {\n      loggedIn\n      notLoggedInMsg\n    }\n    publicLink\n    seqNum\n    showTitle\n    uniqueFieldSet {\n      uniqueField\n      uniqueFieldError\n    }\n  }\n}\n": types.ConsultationFormDocument,
    "\nquery Consultation($id:ID!){\n  generalFragment(id: $id) {\n    consultation {\n      cta {\n        title\n        button\n        text {\n          beforeAccent\n          accent\n          afterAccent\n        }\n      }\n      modal {\n        title\n        subtitle\n        textForCheckbox\n      }\n    }\n  }\n}\n": types.ConsultationDocument,
    "\nquery Contacts($id: ID!){\n    generalFragment(id:$id ) {\n        contacts {\n          title\n          socials {\n              title\n            link\n            content\n          }\n           background{\n           noise{node{sourceUrl}}\n            mobile{node{sourceUrl}}\n            desktop{node{sourceUrl}}\n          }\n        }\n    }\n  }\n": types.ContactsDocument,
    "\nquery ContractOffer($id: ID!){\n  generalFragment(id:$id) {\n        contractOffer {\n          title\n          subtitle\n          creationYear\n          points {\n            title\n            subtitle\n            description\n          }\n          background{\n          desktopFooter{node{sourceUrl}}\n          mobileFooter{node{sourceUrl}}\n          }\n        }\n      }\n    }\n": types.ContractOfferDocument,
    "\nquery Faq($id: ID!){\n    generalFragment(id:$id ) {\n      faq{\n        content {\n          answer\n          question\n      }\n    }\n  }\n}\n": types.FaqDocument,
    "\nquery Footer($id: ID!){\n  generalFragment(id:$id ) {\n    footer {\n      logo {\n        node {\n          sourceUrl\n        }\n      }\n      privacyPolicy {\n        title\n        path\n      }\n      email\n      courses {\n        nodes {\n          ... on Course {\n            title\n            content {\n              path\n            }\n          }\n          ... on IndividualCourse {\n            title\n            individualCourseData {\n              path\n            }\n          }\n        }\n      }\n      socials {\n        title\n        link\n      }\n    }\n  }\n}\n": types.FooterDocument,
    "\nquery Header($id: ID!){\n  generalFragment(id:$id ) {\n        header {\n          logo {\n            node {\n              sourceUrl\n            }\n          }\n          dropdownList {\n            title\n            items {\n              nodes {\n                ... on Course {\n                  title\n                  content {\n                    path\n                    price {\n                      details {\n                        levelsNumber\n                        monthsNumber\n                        videoTrainingsNumber\n                      }\n                    }\n                  }\n                  id\n                }\n                ... on IndividualCourse {\n                  title\n                  individualCourseData {\n                    path\n                    price {\n                      level\n                      bonuses\n                      liveTrainingsNumber\n                      videoTrainingsNumber\n                      courseLengthInMonths\n                    }\n                  }\n                }\n                id\n              }\n            }\n          }\n          navigationElements {\n            title\n            path\n          }\n          ctaButton\n        }\n      }\n}\n": types.HeaderDocument,
    "\nquery MainPage($id:ID!){\ngeneralFragment(id:$id) {\n        main {\n          hero {\n            title\n            subtitle\n            scrollButton\n            about\n            benefits {\n              benefit\n            }\n          }\n          runningLine {\n            content{text}\n            icon{node{sourceUrl}}\n          }\n          chooseCourse {\n            title\n            courses {\n              description\n              course {\n                nodes {\n                  ... on Course {\n                    id\n                    title\n                    content {\n                      price {\n                        priceMonthly\n                        details {\n                          videoTrainingsNumber\n                          monthsNumber\n                          levelsNumber\n                        }\n                      }\n                      path\n                    }\n                  }\n                  ... on IndividualCourse {\n                    id\n                    title\n                    individualCourseData {\n                      price {\n                        monthlyPrice\n                        level\n                        videoTrainingsNumber\n                        liveTrainingsNumber\n                        bonuses\n                        courseLengthInMonths\n                      }\n                      path\n                    }\n                  }\n                }\n              }\n            }\n          }\n          individualLesson {\n            cta {\n              button\n              description\n              price\n              title\n            }\n            title\n            details {\n              description\n              title\n            }\n          }\n          slider {\n            title\n            upperslider {\n              text\n              image {\n                node {\n                  sourceUrl\n                }\n              }\n            }\n            lowerslider {\n              text\n              image {\n                node {\n                  sourceUrl\n                }\n              }\n            }\n          }\n          students {\n            title\n            description\n            cta\n            cards {\n            leftIcon{node{sourceUrl}},rightIcon{node{sourceUrl}}\n              firstBadge\n              secondBadge\n              title\n              description\n            }\n          }\n            background {\n            noise{node{sourceUrl}}\n            desktop {\n              footer {\n                node {\n                  sourceUrl\n                }\n              }\n              hero {\n                node {\n                  sourceUrl\n                }\n              }\n              teacher {\n                node {\n                  sourceUrl\n                }\n              }\n            }\n            mobile {\n              footer {\n                node {\n                  sourceUrl\n                }\n              }\n              hero {\n                node {\n                  sourceUrl\n                }\n              }\n              teacher {\n                node {\n                  sourceUrl\n                }\n              }\n            }\n          }        \n        \n      \n    }\n  }\n}\n": types.MainPageDocument,
    "\nquery PrivacyPolicy($id: ID!){\n generalFragment(id:$id ) {\n        privacyPolicy {\n          title\n          content {\n            title\n            description\n      }\n    }\n  }\n}\n": types.PrivacyPolicyDocument,
    "\nquery ProcessEducation($id: ID!){\n  generalFragment(id:$id) {\n        learningProcess {\n          title\n          content{\n            title\n            text\n            picture {\n              alt\n              image {\n                node {\n                  sourceUrl\n              }\n            }\n         }\n      }\n    }\n  }\n}\n": types.ProcessEducationDocument,
    "\nquery Song ($id: ID!){\n  generalFragment(id: $id) {\n    audio {\n      song {\n        node {\n          mediaItemUrl\n        }\n      }\n    }\n  }\n}\n\n": types.SongDocument,
    "\nquery Students($id:ID!){\n  generalFragment(id: $id) {\n    students {\n      title\n      description\n      list {\n        title\n        firstBadge\n        secondBadge\n      }\n    }\n  }\n}\n": types.StudentsDocument,
    "\nquery Teacher($id: ID!){\n    generalFragment(id:$id ) {\n    teacher {\n      title\n      description\n      subtitle\n      gallery {\n        alt\n        image {\n          node {\n            sourceUrl\n          }\n        }\n      }\n      statistics {\n        text\n        number\n      }\n      education {\n        title\n        list {\n          element\n        }\n      }\n      \n    }\n  }\n}\n": types.TeacherDocument,
    "\nquery IndividualCourse($id: ID!) {\nindividualCourse(id: $id) {\ncontent\ntitle\nindividualCourseData {\naboutCourse\nprocess {\nstep {\ndescription\ntitle\n}\n}\n\nbackground {\nnoise{node{sourceUrl}}\ncourseProgram{node{sourceUrl}}\ndesktop {\nfooter {\nnode {\nsourceUrl\n}\n}\nhero {\nnode {\nsourceUrl\n}\n}\nteacher {\nnode {\nsourceUrl\n}\n}\n}\nmobile {\nfooter {\nnode {\nsourceUrl\n}\n}\nhero {\nnode {\nsourceUrl\n}\n}\nteacher {\nnode {\nsourceUrl\n}\n}\n}\n}\n\nprice {\nbonuses\ncta\ncourseLengthInMonths\ndiscount\nfullPrice\nliveTrainingsNumber\nmonthlyPrice\noldPrice\ntitle\nvideoTrainingsNumber\n}\nhero {\nbenefits {\ncontent\n}\nrunningLine\ncourseConditions {\ndescription\nnumber\n}\ncta\n}\n}\n}\n}\n": types.IndividualCourseDocument,
    "\n  query GetOpeningTheRhythm($id: ID!) {\n  course(id: $id) {\n      content {\n            payment {\n        title\n        benefit\n        courses {\n          nodes {\n            ... on IndividualCourse {\n              title\n              id\n              individualCourseData {\n                aboutCourse\n                price {\n                  fullPrice\n                  courseLengthInMonths\n                }\n              }\n            }\n          }\n        }\n      }\n        hero {\n          title\n          description\n          runningLine\n          cta {\n            title\n            tagsCloud {\n              tag\n            }\n          }\n        }\n        cta {\n          title\n          subtitle\n          skillsImage{wideComposition{node{sourceUrl}} compactComposition{node{sourceUrl}}}\n        }\n        details {\n          title\n          description\n          levels {\n            target\n            tooltip\n            level\n            content\n            lengthOfCourseInMonths\n            liveTrainingsNumber\n            videoTrainingsNumber\n          }\n        }\n        price {\n          title\n          priceMonthly\n          priceFull\n          discount\n          details {\n            videoTrainingsNumber\n            levelsNumber\n            monthsNumber\n          }\n        }\n        background {\n        noise{node{sourceUrl}}\n          desktop {\n            hero {\n              node {\n                sourceUrl\n              }\n            }\n            teacher {\n              node {\n                sourceUrl\n              }\n            }\n            footer {\n              node {\n                sourceUrl\n              }\n            }\n          }\n          mobile {\n            hero {\n              node {\n                sourceUrl\n              }\n            }\n            teacher {\n              node {\n                sourceUrl\n              }\n            }\n            footer {\n              node {\n                sourceUrl\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": types.GetOpeningTheRhythmDocument,
    "\n  query GetPreview($uri: String!) {\n    mediaItemBy(uri: $uri) {\n      sourceUrl\n    }\n  }\n": types.GetPreviewDocument,
    "\n  query GetSeo($id: ID!) {\n    page(id: $id) {\n      seo {\n        metaDesc\n        focuskw\n        opengraphType\n        opengraphTitle\n        opengraphDescription\n        opengraphUrl\n        opengraphSiteName\n        opengraphModifiedTime\n        opengraphSiteName\n        opengraphImage {\n          mediaDetails {\n            sizes {\n              height\n              width\n              name\n              sourceUrl\n            }\n          }\n        }\n        twitterDescription\n        twitterTitle\n        twitterImage {\n          sourceUrl\n        }\n        title\n        breadcrumbs {\n          text\n          url\n        }\n      }\n    }\n  }\n": types.GetSeoDocument,
};

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function gql(source: string): unknown;

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nmutation MyMutation (\n  $formId:Int,\n  $nameId:Int, $nameValue: String,\n  $phoneId:Int, $phoneValue: String,\n  $telegramId:Int, $telegramValue: String,\n  ){\n  submitForm(\n  input: {\n    formId: $formId, \n    data: [\n      {id: $nameId, value: $nameValue}, \n      {id: $phoneId, value: $phoneValue}, \n      {id: $telegramId, value: $telegramValue}\n    ] \n  }\n  ) {\n    errors {\n      fieldId\n      message\n      slug\n    }\n    message\n    success\n  }\n}\n"): (typeof documents)["\nmutation MyMutation (\n  $formId:Int,\n  $nameId:Int, $nameValue: String,\n  $phoneId:Int, $phoneValue: String,\n  $telegramId:Int, $telegramValue: String,\n  ){\n  submitForm(\n  input: {\n    formId: $formId, \n    data: [\n      {id: $nameId, value: $nameValue}, \n      {id: $phoneId, value: $phoneValue}, \n      {id: $telegramId, value: $telegramValue}\n    ] \n  }\n  ) {\n    errors {\n      fieldId\n      message\n      slug\n    }\n    message\n    success\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery ConsultationForm($id:ID!) {\n  form(id: $id) {\n    title\n    formId\n    addSubmit\n    allowPublicLink\n    classes {\n      elementClass\n      wrapperClass\n    }\n    clearComplete\n    currency\n    customMessages {\n      changeDateErrorMsg\n      changeEmailErrorMsg\n      confirmFieldErrorMsg\n      fieldNumberIncrementBy\n      fieldNumberNumMaxError\n      fieldNumberNumMinError\n      fieldsMarkedRequired\n      formErrorsCorrectErrors\n      honeypotHoneypotError\n      validateRequiredField\n    }\n    databaseId\n    defaultLabelPos\n    embedForm\n    fields {\n      nodes {\n        updatedAt\n        type\n        required\n        personallyIdentifiable\n        parentId\n        order\n        labelPos\n        label\n        key\n        id\n        fieldLabel\n        fieldKey\n        fieldId\n        databaseId\n        createdAt\n      }\n    }\n    formTitleHeadingLevel\n    hideComplete\n    id\n    key\n    limitSubmissionsSet {\n      subLimitMsg\n      subLimitNumber\n    }\n    loggedInSet {\n      loggedIn\n      notLoggedInMsg\n    }\n    publicLink\n    seqNum\n    showTitle\n    uniqueFieldSet {\n      uniqueField\n      uniqueFieldError\n    }\n  }\n}\n"): (typeof documents)["\nquery ConsultationForm($id:ID!) {\n  form(id: $id) {\n    title\n    formId\n    addSubmit\n    allowPublicLink\n    classes {\n      elementClass\n      wrapperClass\n    }\n    clearComplete\n    currency\n    customMessages {\n      changeDateErrorMsg\n      changeEmailErrorMsg\n      confirmFieldErrorMsg\n      fieldNumberIncrementBy\n      fieldNumberNumMaxError\n      fieldNumberNumMinError\n      fieldsMarkedRequired\n      formErrorsCorrectErrors\n      honeypotHoneypotError\n      validateRequiredField\n    }\n    databaseId\n    defaultLabelPos\n    embedForm\n    fields {\n      nodes {\n        updatedAt\n        type\n        required\n        personallyIdentifiable\n        parentId\n        order\n        labelPos\n        label\n        key\n        id\n        fieldLabel\n        fieldKey\n        fieldId\n        databaseId\n        createdAt\n      }\n    }\n    formTitleHeadingLevel\n    hideComplete\n    id\n    key\n    limitSubmissionsSet {\n      subLimitMsg\n      subLimitNumber\n    }\n    loggedInSet {\n      loggedIn\n      notLoggedInMsg\n    }\n    publicLink\n    seqNum\n    showTitle\n    uniqueFieldSet {\n      uniqueField\n      uniqueFieldError\n    }\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery Consultation($id:ID!){\n  generalFragment(id: $id) {\n    consultation {\n      cta {\n        title\n        button\n        text {\n          beforeAccent\n          accent\n          afterAccent\n        }\n      }\n      modal {\n        title\n        subtitle\n        textForCheckbox\n      }\n    }\n  }\n}\n"): (typeof documents)["\nquery Consultation($id:ID!){\n  generalFragment(id: $id) {\n    consultation {\n      cta {\n        title\n        button\n        text {\n          beforeAccent\n          accent\n          afterAccent\n        }\n      }\n      modal {\n        title\n        subtitle\n        textForCheckbox\n      }\n    }\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery Contacts($id: ID!){\n    generalFragment(id:$id ) {\n        contacts {\n          title\n          socials {\n              title\n            link\n            content\n          }\n           background{\n           noise{node{sourceUrl}}\n            mobile{node{sourceUrl}}\n            desktop{node{sourceUrl}}\n          }\n        }\n    }\n  }\n"): (typeof documents)["\nquery Contacts($id: ID!){\n    generalFragment(id:$id ) {\n        contacts {\n          title\n          socials {\n              title\n            link\n            content\n          }\n           background{\n           noise{node{sourceUrl}}\n            mobile{node{sourceUrl}}\n            desktop{node{sourceUrl}}\n          }\n        }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery ContractOffer($id: ID!){\n  generalFragment(id:$id) {\n        contractOffer {\n          title\n          subtitle\n          creationYear\n          points {\n            title\n            subtitle\n            description\n          }\n          background{\n          desktopFooter{node{sourceUrl}}\n          mobileFooter{node{sourceUrl}}\n          }\n        }\n      }\n    }\n"): (typeof documents)["\nquery ContractOffer($id: ID!){\n  generalFragment(id:$id) {\n        contractOffer {\n          title\n          subtitle\n          creationYear\n          points {\n            title\n            subtitle\n            description\n          }\n          background{\n          desktopFooter{node{sourceUrl}}\n          mobileFooter{node{sourceUrl}}\n          }\n        }\n      }\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery Faq($id: ID!){\n    generalFragment(id:$id ) {\n      faq{\n        content {\n          answer\n          question\n      }\n    }\n  }\n}\n"): (typeof documents)["\nquery Faq($id: ID!){\n    generalFragment(id:$id ) {\n      faq{\n        content {\n          answer\n          question\n      }\n    }\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery Footer($id: ID!){\n  generalFragment(id:$id ) {\n    footer {\n      logo {\n        node {\n          sourceUrl\n        }\n      }\n      privacyPolicy {\n        title\n        path\n      }\n      email\n      courses {\n        nodes {\n          ... on Course {\n            title\n            content {\n              path\n            }\n          }\n          ... on IndividualCourse {\n            title\n            individualCourseData {\n              path\n            }\n          }\n        }\n      }\n      socials {\n        title\n        link\n      }\n    }\n  }\n}\n"): (typeof documents)["\nquery Footer($id: ID!){\n  generalFragment(id:$id ) {\n    footer {\n      logo {\n        node {\n          sourceUrl\n        }\n      }\n      privacyPolicy {\n        title\n        path\n      }\n      email\n      courses {\n        nodes {\n          ... on Course {\n            title\n            content {\n              path\n            }\n          }\n          ... on IndividualCourse {\n            title\n            individualCourseData {\n              path\n            }\n          }\n        }\n      }\n      socials {\n        title\n        link\n      }\n    }\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery Header($id: ID!){\n  generalFragment(id:$id ) {\n        header {\n          logo {\n            node {\n              sourceUrl\n            }\n          }\n          dropdownList {\n            title\n            items {\n              nodes {\n                ... on Course {\n                  title\n                  content {\n                    path\n                    price {\n                      details {\n                        levelsNumber\n                        monthsNumber\n                        videoTrainingsNumber\n                      }\n                    }\n                  }\n                  id\n                }\n                ... on IndividualCourse {\n                  title\n                  individualCourseData {\n                    path\n                    price {\n                      level\n                      bonuses\n                      liveTrainingsNumber\n                      videoTrainingsNumber\n                      courseLengthInMonths\n                    }\n                  }\n                }\n                id\n              }\n            }\n          }\n          navigationElements {\n            title\n            path\n          }\n          ctaButton\n        }\n      }\n}\n"): (typeof documents)["\nquery Header($id: ID!){\n  generalFragment(id:$id ) {\n        header {\n          logo {\n            node {\n              sourceUrl\n            }\n          }\n          dropdownList {\n            title\n            items {\n              nodes {\n                ... on Course {\n                  title\n                  content {\n                    path\n                    price {\n                      details {\n                        levelsNumber\n                        monthsNumber\n                        videoTrainingsNumber\n                      }\n                    }\n                  }\n                  id\n                }\n                ... on IndividualCourse {\n                  title\n                  individualCourseData {\n                    path\n                    price {\n                      level\n                      bonuses\n                      liveTrainingsNumber\n                      videoTrainingsNumber\n                      courseLengthInMonths\n                    }\n                  }\n                }\n                id\n              }\n            }\n          }\n          navigationElements {\n            title\n            path\n          }\n          ctaButton\n        }\n      }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery MainPage($id:ID!){\ngeneralFragment(id:$id) {\n        main {\n          hero {\n            title\n            subtitle\n            scrollButton\n            about\n            benefits {\n              benefit\n            }\n          }\n          runningLine {\n            content{text}\n            icon{node{sourceUrl}}\n          }\n          chooseCourse {\n            title\n            courses {\n              description\n              course {\n                nodes {\n                  ... on Course {\n                    id\n                    title\n                    content {\n                      price {\n                        priceMonthly\n                        details {\n                          videoTrainingsNumber\n                          monthsNumber\n                          levelsNumber\n                        }\n                      }\n                      path\n                    }\n                  }\n                  ... on IndividualCourse {\n                    id\n                    title\n                    individualCourseData {\n                      price {\n                        monthlyPrice\n                        level\n                        videoTrainingsNumber\n                        liveTrainingsNumber\n                        bonuses\n                        courseLengthInMonths\n                      }\n                      path\n                    }\n                  }\n                }\n              }\n            }\n          }\n          individualLesson {\n            cta {\n              button\n              description\n              price\n              title\n            }\n            title\n            details {\n              description\n              title\n            }\n          }\n          slider {\n            title\n            upperslider {\n              text\n              image {\n                node {\n                  sourceUrl\n                }\n              }\n            }\n            lowerslider {\n              text\n              image {\n                node {\n                  sourceUrl\n                }\n              }\n            }\n          }\n          students {\n            title\n            description\n            cta\n            cards {\n            leftIcon{node{sourceUrl}},rightIcon{node{sourceUrl}}\n              firstBadge\n              secondBadge\n              title\n              description\n            }\n          }\n            background {\n            noise{node{sourceUrl}}\n            desktop {\n              footer {\n                node {\n                  sourceUrl\n                }\n              }\n              hero {\n                node {\n                  sourceUrl\n                }\n              }\n              teacher {\n                node {\n                  sourceUrl\n                }\n              }\n            }\n            mobile {\n              footer {\n                node {\n                  sourceUrl\n                }\n              }\n              hero {\n                node {\n                  sourceUrl\n                }\n              }\n              teacher {\n                node {\n                  sourceUrl\n                }\n              }\n            }\n          }        \n        \n      \n    }\n  }\n}\n"): (typeof documents)["\nquery MainPage($id:ID!){\ngeneralFragment(id:$id) {\n        main {\n          hero {\n            title\n            subtitle\n            scrollButton\n            about\n            benefits {\n              benefit\n            }\n          }\n          runningLine {\n            content{text}\n            icon{node{sourceUrl}}\n          }\n          chooseCourse {\n            title\n            courses {\n              description\n              course {\n                nodes {\n                  ... on Course {\n                    id\n                    title\n                    content {\n                      price {\n                        priceMonthly\n                        details {\n                          videoTrainingsNumber\n                          monthsNumber\n                          levelsNumber\n                        }\n                      }\n                      path\n                    }\n                  }\n                  ... on IndividualCourse {\n                    id\n                    title\n                    individualCourseData {\n                      price {\n                        monthlyPrice\n                        level\n                        videoTrainingsNumber\n                        liveTrainingsNumber\n                        bonuses\n                        courseLengthInMonths\n                      }\n                      path\n                    }\n                  }\n                }\n              }\n            }\n          }\n          individualLesson {\n            cta {\n              button\n              description\n              price\n              title\n            }\n            title\n            details {\n              description\n              title\n            }\n          }\n          slider {\n            title\n            upperslider {\n              text\n              image {\n                node {\n                  sourceUrl\n                }\n              }\n            }\n            lowerslider {\n              text\n              image {\n                node {\n                  sourceUrl\n                }\n              }\n            }\n          }\n          students {\n            title\n            description\n            cta\n            cards {\n            leftIcon{node{sourceUrl}},rightIcon{node{sourceUrl}}\n              firstBadge\n              secondBadge\n              title\n              description\n            }\n          }\n            background {\n            noise{node{sourceUrl}}\n            desktop {\n              footer {\n                node {\n                  sourceUrl\n                }\n              }\n              hero {\n                node {\n                  sourceUrl\n                }\n              }\n              teacher {\n                node {\n                  sourceUrl\n                }\n              }\n            }\n            mobile {\n              footer {\n                node {\n                  sourceUrl\n                }\n              }\n              hero {\n                node {\n                  sourceUrl\n                }\n              }\n              teacher {\n                node {\n                  sourceUrl\n                }\n              }\n            }\n          }        \n        \n      \n    }\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery PrivacyPolicy($id: ID!){\n generalFragment(id:$id ) {\n        privacyPolicy {\n          title\n          content {\n            title\n            description\n      }\n    }\n  }\n}\n"): (typeof documents)["\nquery PrivacyPolicy($id: ID!){\n generalFragment(id:$id ) {\n        privacyPolicy {\n          title\n          content {\n            title\n            description\n      }\n    }\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery ProcessEducation($id: ID!){\n  generalFragment(id:$id) {\n        learningProcess {\n          title\n          content{\n            title\n            text\n            picture {\n              alt\n              image {\n                node {\n                  sourceUrl\n              }\n            }\n         }\n      }\n    }\n  }\n}\n"): (typeof documents)["\nquery ProcessEducation($id: ID!){\n  generalFragment(id:$id) {\n        learningProcess {\n          title\n          content{\n            title\n            text\n            picture {\n              alt\n              image {\n                node {\n                  sourceUrl\n              }\n            }\n         }\n      }\n    }\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery Song ($id: ID!){\n  generalFragment(id: $id) {\n    audio {\n      song {\n        node {\n          mediaItemUrl\n        }\n      }\n    }\n  }\n}\n\n"): (typeof documents)["\nquery Song ($id: ID!){\n  generalFragment(id: $id) {\n    audio {\n      song {\n        node {\n          mediaItemUrl\n        }\n      }\n    }\n  }\n}\n\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery Students($id:ID!){\n  generalFragment(id: $id) {\n    students {\n      title\n      description\n      list {\n        title\n        firstBadge\n        secondBadge\n      }\n    }\n  }\n}\n"): (typeof documents)["\nquery Students($id:ID!){\n  generalFragment(id: $id) {\n    students {\n      title\n      description\n      list {\n        title\n        firstBadge\n        secondBadge\n      }\n    }\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery Teacher($id: ID!){\n    generalFragment(id:$id ) {\n    teacher {\n      title\n      description\n      subtitle\n      gallery {\n        alt\n        image {\n          node {\n            sourceUrl\n          }\n        }\n      }\n      statistics {\n        text\n        number\n      }\n      education {\n        title\n        list {\n          element\n        }\n      }\n      \n    }\n  }\n}\n"): (typeof documents)["\nquery Teacher($id: ID!){\n    generalFragment(id:$id ) {\n    teacher {\n      title\n      description\n      subtitle\n      gallery {\n        alt\n        image {\n          node {\n            sourceUrl\n          }\n        }\n      }\n      statistics {\n        text\n        number\n      }\n      education {\n        title\n        list {\n          element\n        }\n      }\n      \n    }\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery IndividualCourse($id: ID!) {\nindividualCourse(id: $id) {\ncontent\ntitle\nindividualCourseData {\naboutCourse\nprocess {\nstep {\ndescription\ntitle\n}\n}\n\nbackground {\nnoise{node{sourceUrl}}\ncourseProgram{node{sourceUrl}}\ndesktop {\nfooter {\nnode {\nsourceUrl\n}\n}\nhero {\nnode {\nsourceUrl\n}\n}\nteacher {\nnode {\nsourceUrl\n}\n}\n}\nmobile {\nfooter {\nnode {\nsourceUrl\n}\n}\nhero {\nnode {\nsourceUrl\n}\n}\nteacher {\nnode {\nsourceUrl\n}\n}\n}\n}\n\nprice {\nbonuses\ncta\ncourseLengthInMonths\ndiscount\nfullPrice\nliveTrainingsNumber\nmonthlyPrice\noldPrice\ntitle\nvideoTrainingsNumber\n}\nhero {\nbenefits {\ncontent\n}\nrunningLine\ncourseConditions {\ndescription\nnumber\n}\ncta\n}\n}\n}\n}\n"): (typeof documents)["\nquery IndividualCourse($id: ID!) {\nindividualCourse(id: $id) {\ncontent\ntitle\nindividualCourseData {\naboutCourse\nprocess {\nstep {\ndescription\ntitle\n}\n}\n\nbackground {\nnoise{node{sourceUrl}}\ncourseProgram{node{sourceUrl}}\ndesktop {\nfooter {\nnode {\nsourceUrl\n}\n}\nhero {\nnode {\nsourceUrl\n}\n}\nteacher {\nnode {\nsourceUrl\n}\n}\n}\nmobile {\nfooter {\nnode {\nsourceUrl\n}\n}\nhero {\nnode {\nsourceUrl\n}\n}\nteacher {\nnode {\nsourceUrl\n}\n}\n}\n}\n\nprice {\nbonuses\ncta\ncourseLengthInMonths\ndiscount\nfullPrice\nliveTrainingsNumber\nmonthlyPrice\noldPrice\ntitle\nvideoTrainingsNumber\n}\nhero {\nbenefits {\ncontent\n}\nrunningLine\ncourseConditions {\ndescription\nnumber\n}\ncta\n}\n}\n}\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetOpeningTheRhythm($id: ID!) {\n  course(id: $id) {\n      content {\n            payment {\n        title\n        benefit\n        courses {\n          nodes {\n            ... on IndividualCourse {\n              title\n              id\n              individualCourseData {\n                aboutCourse\n                price {\n                  fullPrice\n                  courseLengthInMonths\n                }\n              }\n            }\n          }\n        }\n      }\n        hero {\n          title\n          description\n          runningLine\n          cta {\n            title\n            tagsCloud {\n              tag\n            }\n          }\n        }\n        cta {\n          title\n          subtitle\n          skillsImage{wideComposition{node{sourceUrl}} compactComposition{node{sourceUrl}}}\n        }\n        details {\n          title\n          description\n          levels {\n            target\n            tooltip\n            level\n            content\n            lengthOfCourseInMonths\n            liveTrainingsNumber\n            videoTrainingsNumber\n          }\n        }\n        price {\n          title\n          priceMonthly\n          priceFull\n          discount\n          details {\n            videoTrainingsNumber\n            levelsNumber\n            monthsNumber\n          }\n        }\n        background {\n        noise{node{sourceUrl}}\n          desktop {\n            hero {\n              node {\n                sourceUrl\n              }\n            }\n            teacher {\n              node {\n                sourceUrl\n              }\n            }\n            footer {\n              node {\n                sourceUrl\n              }\n            }\n          }\n          mobile {\n            hero {\n              node {\n                sourceUrl\n              }\n            }\n            teacher {\n              node {\n                sourceUrl\n              }\n            }\n            footer {\n              node {\n                sourceUrl\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetOpeningTheRhythm($id: ID!) {\n  course(id: $id) {\n      content {\n            payment {\n        title\n        benefit\n        courses {\n          nodes {\n            ... on IndividualCourse {\n              title\n              id\n              individualCourseData {\n                aboutCourse\n                price {\n                  fullPrice\n                  courseLengthInMonths\n                }\n              }\n            }\n          }\n        }\n      }\n        hero {\n          title\n          description\n          runningLine\n          cta {\n            title\n            tagsCloud {\n              tag\n            }\n          }\n        }\n        cta {\n          title\n          subtitle\n          skillsImage{wideComposition{node{sourceUrl}} compactComposition{node{sourceUrl}}}\n        }\n        details {\n          title\n          description\n          levels {\n            target\n            tooltip\n            level\n            content\n            lengthOfCourseInMonths\n            liveTrainingsNumber\n            videoTrainingsNumber\n          }\n        }\n        price {\n          title\n          priceMonthly\n          priceFull\n          discount\n          details {\n            videoTrainingsNumber\n            levelsNumber\n            monthsNumber\n          }\n        }\n        background {\n        noise{node{sourceUrl}}\n          desktop {\n            hero {\n              node {\n                sourceUrl\n              }\n            }\n            teacher {\n              node {\n                sourceUrl\n              }\n            }\n            footer {\n              node {\n                sourceUrl\n              }\n            }\n          }\n          mobile {\n            hero {\n              node {\n                sourceUrl\n              }\n            }\n            teacher {\n              node {\n                sourceUrl\n              }\n            }\n            footer {\n              node {\n                sourceUrl\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetPreview($uri: String!) {\n    mediaItemBy(uri: $uri) {\n      sourceUrl\n    }\n  }\n"): (typeof documents)["\n  query GetPreview($uri: String!) {\n    mediaItemBy(uri: $uri) {\n      sourceUrl\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetSeo($id: ID!) {\n    page(id: $id) {\n      seo {\n        metaDesc\n        focuskw\n        opengraphType\n        opengraphTitle\n        opengraphDescription\n        opengraphUrl\n        opengraphSiteName\n        opengraphModifiedTime\n        opengraphSiteName\n        opengraphImage {\n          mediaDetails {\n            sizes {\n              height\n              width\n              name\n              sourceUrl\n            }\n          }\n        }\n        twitterDescription\n        twitterTitle\n        twitterImage {\n          sourceUrl\n        }\n        title\n        breadcrumbs {\n          text\n          url\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetSeo($id: ID!) {\n    page(id: $id) {\n      seo {\n        metaDesc\n        focuskw\n        opengraphType\n        opengraphTitle\n        opengraphDescription\n        opengraphUrl\n        opengraphSiteName\n        opengraphModifiedTime\n        opengraphSiteName\n        opengraphImage {\n          mediaDetails {\n            sizes {\n              height\n              width\n              name\n              sourceUrl\n            }\n          }\n        }\n        twitterDescription\n        twitterTitle\n        twitterImage {\n          sourceUrl\n        }\n        title\n        breadcrumbs {\n          text\n          url\n        }\n      }\n    }\n  }\n"];

export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;