# This file was generated. Do not edit manually.

schema {
  query: RootQuery
  mutation: RootMutation
}

"A Field Group managed by ACF"
interface AcfFieldGroup {
  "The name of the field group"
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
}

"Fields associated with an ACF Field Group"
interface AcfFieldGroupFields {
  "The name of the field group"
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
}

"Connection to category Nodes"
interface CategoryConnection {
  "A list of edges (relational context) between RootQuery and connected category Nodes"
  edges: [CategoryConnectionEdge!]!
  "A list of connected category Nodes"
  nodes: [Category!]!
  "Information about pagination in a connection."
  pageInfo: CategoryConnectionPageInfo!
}

"Edge between a Node and a connected category"
interface CategoryConnectionEdge {
  "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
  cursor: String
  "The connected category Node"
  node: Category!
}

"Page Info on the connected CategoryConnectionEdge"
interface CategoryConnectionPageInfo {
  "When paginating forwards, the cursor to continue."
  endCursor: String
  "When paginating forwards, are there more items?"
  hasNextPage: Boolean!
  "When paginating backwards, are there more items?"
  hasPreviousPage: Boolean!
  "Raw schema for page"
  seo: SEOPostTypePageInfo
  "When paginating backwards, the cursor to continue."
  startCursor: String
}

"Connection to Comment Nodes"
interface CommentConnection {
  "A list of edges (relational context) between RootQuery and connected Comment Nodes"
  edges: [CommentConnectionEdge!]!
  "A list of connected Comment Nodes"
  nodes: [Comment!]!
  "Information about pagination in a connection."
  pageInfo: CommentConnectionPageInfo!
}

"Edge between a Node and a connected Comment"
interface CommentConnectionEdge {
  "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
  cursor: String
  "The connected Comment Node"
  node: Comment!
}

"Page Info on the connected CommentConnectionEdge"
interface CommentConnectionPageInfo {
  "When paginating forwards, the cursor to continue."
  endCursor: String
  "When paginating forwards, are there more items?"
  hasNextPage: Boolean!
  "When paginating backwards, are there more items?"
  hasPreviousPage: Boolean!
  "Raw schema for page"
  seo: SEOPostTypePageInfo
  "When paginating backwards, the cursor to continue."
  startCursor: String
}

"The author of a comment"
interface Commenter {
  "Avatar object for user. The avatar object can be retrieved in different sizes by specifying the size argument."
  avatar: Avatar
  "Identifies the primary key from the database."
  databaseId: Int!
  "The email address of the author of a comment."
  email: String
  "The globally unique identifier for the comment author."
  id: ID!
  "Whether the author information is considered restricted. (not fully public)"
  isRestricted: Boolean
  "The name of the author of a comment."
  name: String
  "The url of the author of a comment."
  url: String
}

"Edge between a Node and a connected Commenter"
interface CommenterConnectionEdge {
  "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
  cursor: String
  "The connected Commenter Node"
  node: Commenter!
}

"Interface representing fields of the ACF &quot;CommonFragmentsContactsBackground&quot; Field Group"
interface CommonFragmentsContactsBackground_Fields {
  "Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;CommonFragmentsContactsBackground&quot; Field Group"
  desktop: AcfMediaItemConnectionEdge
  "The name of the field group"
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
  "Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;CommonFragmentsContactsBackground&quot; Field Group"
  mobile: AcfMediaItemConnectionEdge
}

"Interface representing fields of the ACF &quot;CommonFragmentsContactsSocials&quot; Field Group"
interface CommonFragmentsContactsSocials_Fields {
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;CommonFragmentsContactsSocials&quot; Field Group"
  content: String
  "The name of the field group"
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;CommonFragmentsContactsSocials&quot; Field Group"
  link: String
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;CommonFragmentsContactsSocials&quot; Field Group"
  title: String
}

"Interface representing fields of the ACF &quot;CommonFragmentsContacts&quot; Field Group"
interface CommonFragmentsContacts_Fields {
  "Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;CommonFragmentsContacts&quot; Field Group"
  background: CommonFragmentsContactsBackground
  "The name of the field group"
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
  "Field of the &quot;repeater&quot; Field Type added to the schema as part of the &quot;CommonFragmentsContacts&quot; Field Group"
  socials: [CommonFragmentsContactsSocials]
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;CommonFragmentsContacts&quot; Field Group"
  title: String
}

"Interface representing fields of the ACF &quot;CommonFragmentsCtaText&quot; Field Group"
interface CommonFragmentsCtaText_Fields {
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;CommonFragmentsCtaText&quot; Field Group"
  accent: String
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;CommonFragmentsCtaText&quot; Field Group"
  afterAccent: String
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;CommonFragmentsCtaText&quot; Field Group"
  beforeAccent: String
  "The name of the field group"
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
}

"Interface representing fields of the ACF &quot;CommonFragmentsCta&quot; Field Group"
interface CommonFragmentsCta_Fields {
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;CommonFragmentsCta&quot; Field Group"
  button: String
  "The name of the field group"
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
  "Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;CommonFragmentsCta&quot; Field Group"
  text: CommonFragmentsCtaText
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;CommonFragmentsCta&quot; Field Group"
  title: String
}

"Interface representing fields of the ACF &quot;CommonFragmentsFaq&quot; Field Group"
interface CommonFragmentsFaq_Fields {
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;CommonFragmentsFaq&quot; Field Group"
  answer: String
  "The name of the field group"
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;CommonFragmentsFaq&quot; Field Group"
  question: String
}

"Interface representing fields of the ACF &quot;CommonFragmentsFooterCourses&quot; Field Group"
interface CommonFragmentsFooterCourses_Fields {
  "The name of the field group"
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;CommonFragmentsFooterCourses&quot; Field Group"
  path: String
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;CommonFragmentsFooterCourses&quot; Field Group"
  title: String
}

"Interface representing fields of the ACF &quot;CommonFragmentsFooterPrivacyPolicy&quot; Field Group"
interface CommonFragmentsFooterPrivacyPolicy_Fields {
  "The name of the field group"
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;CommonFragmentsFooterPrivacyPolicy&quot; Field Group"
  path: String
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;CommonFragmentsFooterPrivacyPolicy&quot; Field Group"
  title: String
}

"Interface representing fields of the ACF &quot;CommonFragmentsFooterSocials&quot; Field Group"
interface CommonFragmentsFooterSocials_Fields {
  "The name of the field group"
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;CommonFragmentsFooterSocials&quot; Field Group"
  link: String
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;CommonFragmentsFooterSocials&quot; Field Group"
  title: String
}

"Interface representing fields of the ACF &quot;CommonFragmentsFooter&quot; Field Group"
interface CommonFragmentsFooter_Fields {
  "Field of the &quot;repeater&quot; Field Type added to the schema as part of the &quot;CommonFragmentsFooter&quot; Field Group"
  courses: [CommonFragmentsFooterCourses]
  "Field of the &quot;email&quot; Field Type added to the schema as part of the &quot;CommonFragmentsFooter&quot; Field Group"
  email: String
  "The name of the field group"
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
  "Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;CommonFragmentsFooter&quot; Field Group"
  logo: AcfMediaItemConnectionEdge
  "Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;CommonFragmentsFooter&quot; Field Group"
  privacyPolicy: CommonFragmentsFooterPrivacyPolicy
  "Field of the &quot;repeater&quot; Field Type added to the schema as part of the &quot;CommonFragmentsFooter&quot; Field Group"
  socials: [CommonFragmentsFooterSocials]
}

"Interface representing fields of the ACF &quot;CommonFragmentsHeaderDropdownListItems&quot; Field Group"
interface CommonFragmentsHeaderDropdownListItems_Fields {
  "The name of the field group"
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;CommonFragmentsHeaderDropdownListItems&quot; Field Group"
  level: String
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;CommonFragmentsHeaderDropdownListItems&quot; Field Group"
  path: String
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;CommonFragmentsHeaderDropdownListItems&quot; Field Group"
  title: String
}

"Interface representing fields of the ACF &quot;CommonFragmentsHeaderDropdownList&quot; Field Group"
interface CommonFragmentsHeaderDropdownList_Fields {
  "The name of the field group"
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
  "Field of the &quot;repeater&quot; Field Type added to the schema as part of the &quot;CommonFragmentsHeaderDropdownList&quot; Field Group"
  items: [CommonFragmentsHeaderDropdownListItems]
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;CommonFragmentsHeaderDropdownList&quot; Field Group"
  title: String
}

"Interface representing fields of the ACF &quot;CommonFragmentsHeaderLinks&quot; Field Group"
interface CommonFragmentsHeaderLinks_Fields {
  "The name of the field group"
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;CommonFragmentsHeaderLinks&quot; Field Group"
  path: String
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;CommonFragmentsHeaderLinks&quot; Field Group"
  title: String
}

"Interface representing fields of the ACF &quot;CommonFragmentsHeader&quot; Field Group"
interface CommonFragmentsHeader_Fields {
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;CommonFragmentsHeader&quot; Field Group"
  ctaButton: String
  "Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;CommonFragmentsHeader&quot; Field Group"
  dropdownList: CommonFragmentsHeaderDropdownList
  "The name of the field group"
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
  "Field of the &quot;repeater&quot; Field Type added to the schema as part of the &quot;CommonFragmentsHeader&quot; Field Group"
  links: [CommonFragmentsHeaderLinks]
  "Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;CommonFragmentsHeader&quot; Field Group"
  logo: AcfMediaItemConnectionEdge
}

"Interface representing fields of the ACF &quot;CommonFragmentsPaymentForm&quot; Field Group"
interface CommonFragmentsPaymentForm_Fields {
  "The name of the field group"
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;CommonFragmentsPaymentForm&quot; Field Group"
  placeholder: String
}

"Interface representing fields of the ACF &quot;CommonFragmentsPrivacyPolicyContent&quot; Field Group"
interface CommonFragmentsPrivacyPolicyContent_Fields {
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;CommonFragmentsPrivacyPolicyContent&quot; Field Group"
  description: String
  "The name of the field group"
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;CommonFragmentsPrivacyPolicyContent&quot; Field Group"
  title: String
}

"Interface representing fields of the ACF &quot;CommonFragmentsPrivacyPolicy&quot; Field Group"
interface CommonFragmentsPrivacyPolicy_Fields {
  "Field of the &quot;repeater&quot; Field Type added to the schema as part of the &quot;CommonFragmentsPrivacyPolicy&quot; Field Group"
  content: [CommonFragmentsPrivacyPolicyContent]
  "The name of the field group"
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;CommonFragmentsPrivacyPolicy&quot; Field Group"
  title: String
}

"Interface representing fields of the ACF &quot;CommonFragmentsProcessPicture&quot; Field Group"
interface CommonFragmentsProcessPicture_Fields {
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;CommonFragmentsProcessPicture&quot; Field Group"
  alt: String
  "The name of the field group"
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
  "Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;CommonFragmentsProcessPicture&quot; Field Group"
  image: AcfMediaItemConnectionEdge
}

"Interface representing fields of the ACF &quot;CommonFragmentsProcess&quot; Field Group"
interface CommonFragmentsProcess_Fields {
  "The name of the field group"
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
  "Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;CommonFragmentsProcess&quot; Field Group"
  picture: CommonFragmentsProcessPicture
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;CommonFragmentsProcess&quot; Field Group"
  text: String
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;CommonFragmentsProcess&quot; Field Group"
  title: String
}

"Interface representing fields of the ACF &quot;CommonFragmentsTeacherEducationList&quot; Field Group"
interface CommonFragmentsTeacherEducationList_Fields {
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;CommonFragmentsTeacherEducationList&quot; Field Group"
  element: String
  "The name of the field group"
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
}

"Interface representing fields of the ACF &quot;CommonFragmentsTeacherEducation&quot; Field Group"
interface CommonFragmentsTeacherEducation_Fields {
  "The name of the field group"
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
  "Field of the &quot;repeater&quot; Field Type added to the schema as part of the &quot;CommonFragmentsTeacherEducation&quot; Field Group"
  list: [CommonFragmentsTeacherEducationList]
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;CommonFragmentsTeacherEducation&quot; Field Group"
  title: String
}

"Interface representing fields of the ACF &quot;CommonFragmentsTeacherExperience&quot; Field Group"
interface CommonFragmentsTeacherExperience_Fields {
  "The name of the field group"
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
  "Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;CommonFragmentsTeacherExperience&quot; Field Group"
  number: Float
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;CommonFragmentsTeacherExperience&quot; Field Group"
  text: String
}

"Interface representing fields of the ACF &quot;CommonFragmentsTeacherGallery&quot; Field Group"
interface CommonFragmentsTeacherGallery_Fields {
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;CommonFragmentsTeacherGallery&quot; Field Group"
  alt: String
  "The name of the field group"
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
  "Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;CommonFragmentsTeacherGallery&quot; Field Group"
  image: AcfMediaItemConnectionEdge
}

"Interface representing fields of the ACF &quot;CommonFragmentsTeacher&quot; Field Group"
interface CommonFragmentsTeacher_Fields {
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;CommonFragmentsTeacher&quot; Field Group"
  description: String
  "Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;CommonFragmentsTeacher&quot; Field Group"
  education: CommonFragmentsTeacherEducation
  "Field of the &quot;repeater&quot; Field Type added to the schema as part of the &quot;CommonFragmentsTeacher&quot; Field Group"
  experience: [CommonFragmentsTeacherExperience]
  "The name of the field group"
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
  "Field of the &quot;repeater&quot; Field Type added to the schema as part of the &quot;CommonFragmentsTeacher&quot; Field Group"
  gallery: [CommonFragmentsTeacherGallery]
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;CommonFragmentsTeacher&quot; Field Group"
  subtitle: String
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;CommonFragmentsTeacher&quot; Field Group"
  title: String
}

"Interface representing fields of the ACF &quot;CommonFragments&quot; Field Group"
interface CommonFragments_Fields {
  "Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;CommonFragments&quot; Field Group"
  contacts: CommonFragmentsContacts
  "Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;CommonFragments&quot; Field Group"
  cta: CommonFragmentsCta
  "Field of the &quot;repeater&quot; Field Type added to the schema as part of the &quot;CommonFragments&quot; Field Group"
  faq: [CommonFragmentsFaq]
  "The name of the field group"
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
  "Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;CommonFragments&quot; Field Group"
  footer: CommonFragmentsFooter
  "Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;CommonFragments&quot; Field Group"
  header: CommonFragmentsHeader
  "Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;CommonFragments&quot; Field Group"
  paymentForm: CommonFragmentsPaymentForm
  "Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;CommonFragments&quot; Field Group"
  privacyPolicy: CommonFragmentsPrivacyPolicy
  "Field of the &quot;repeater&quot; Field Type added to the schema as part of the &quot;CommonFragments&quot; Field Group"
  process: [CommonFragmentsProcess]
  "Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;CommonFragments&quot; Field Group"
  teacher: CommonFragmentsTeacher
}

"A plural connection from one Node Type in the Graph to another Node Type, with support for relational data via &quot;edges&quot;."
interface Connection {
  "A list of edges (relational context) between connected nodes"
  edges: [Edge!]!
  "A list of connected nodes"
  nodes: [Node!]!
  "Information about pagination in a connection."
  pageInfo: PageInfo!
}

"Interface representing fields of the ACF &quot;ContentBackgroundDesktop&quot; Field Group"
interface ContentBackgroundDesktop_Fields {
  "The name of the field group"
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
  "Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;ContentBackgroundDesktop&quot; Field Group"
  footer: AcfMediaItemConnectionEdge
  "Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;ContentBackgroundDesktop&quot; Field Group"
  hero: AcfMediaItemConnectionEdge
  "Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;ContentBackgroundDesktop&quot; Field Group"
  teacher: AcfMediaItemConnectionEdge
}

"Interface representing fields of the ACF &quot;ContentBackgroundMobile&quot; Field Group"
interface ContentBackgroundMobile_Fields {
  "The name of the field group"
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
  "Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;ContentBackgroundMobile&quot; Field Group"
  footer: AcfMediaItemConnectionEdge
  "Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;ContentBackgroundMobile&quot; Field Group"
  hero: AcfMediaItemConnectionEdge
  "Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;ContentBackgroundMobile&quot; Field Group"
  teacher: AcfMediaItemConnectionEdge
}

"Interface representing fields of the ACF &quot;ContentBackground&quot; Field Group"
interface ContentBackground_Fields {
  "Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;ContentBackground&quot; Field Group"
  desktop: ContentBackgroundDesktop
  "The name of the field group"
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
  "Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;ContentBackground&quot; Field Group"
  mobile: ContentBackgroundMobile
}

"Interface representing fields of the ACF &quot;ContentCta&quot; Field Group"
interface ContentCta_Fields {
  "The name of the field group"
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;ContentCta&quot; Field Group"
  subtitle: String
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;ContentCta&quot; Field Group"
  title: String
}

"Interface representing fields of the ACF &quot;ContentDetailsLevels&quot; Field Group"
interface ContentDetailsLevels_Fields {
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;ContentDetailsLevels&quot; Field Group"
  content: String
  "The name of the field group"
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
  "Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;ContentDetailsLevels&quot; Field Group"
  lengthOfCourseInMonths: Float
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;ContentDetailsLevels&quot; Field Group"
  level: String
  "Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;ContentDetailsLevels&quot; Field Group"
  liveTrainingsNumber: Float
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;ContentDetailsLevels&quot; Field Group"
  target: String
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;ContentDetailsLevels&quot; Field Group"
  tooltip: String
  "Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;ContentDetailsLevels&quot; Field Group"
  videoTrainingsNumber: Float
}

"Interface representing fields of the ACF &quot;ContentDetails&quot; Field Group"
interface ContentDetails_Fields {
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;ContentDetails&quot; Field Group"
  description: String
  "The name of the field group"
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
  "Field of the &quot;repeater&quot; Field Type added to the schema as part of the &quot;ContentDetails&quot; Field Group"
  levels: [ContentDetailsLevels]
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;ContentDetails&quot; Field Group"
  title: String
}

"Interface representing fields of the ACF &quot;ContentHeroCtaTagsCloud&quot; Field Group"
interface ContentHeroCtaTagsCloud_Fields {
  "The name of the field group"
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;ContentHeroCtaTagsCloud&quot; Field Group"
  tag: String
}

"Interface representing fields of the ACF &quot;ContentHeroCta&quot; Field Group"
interface ContentHeroCta_Fields {
  "The name of the field group"
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
  "Field of the &quot;repeater&quot; Field Type added to the schema as part of the &quot;ContentHeroCta&quot; Field Group"
  tagsCloud: [ContentHeroCtaTagsCloud]
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;ContentHeroCta&quot; Field Group"
  title: String
}

"Interface representing fields of the ACF &quot;ContentHero&quot; Field Group"
interface ContentHero_Fields {
  "Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;ContentHero&quot; Field Group"
  cta: ContentHeroCta
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;ContentHero&quot; Field Group"
  description: String
  "The name of the field group"
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
  "Running line"
  runningLine: String
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;ContentHero&quot; Field Group"
  title: String
}

"Nodes used to manage content"
interface ContentNode {
  "Connection between the ContentNode type and the ContentType type"
  contentType: ContentNodeToContentTypeConnectionEdge
  "The name of the Content Type the node belongs to"
  contentTypeName: String!
  "The ID of the node in the database."
  databaseId: Int!
  "Post publishing date."
  date: String
  "The publishing date set in GMT."
  dateGmt: String
  "The desired slug of the post"
  desiredSlug: String
  "If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds"
  editingLockedBy: ContentNodeToEditLockConnectionEdge
  "The RSS enclosure for the object"
  enclosure: String
  "Connection between the ContentNode type and the EnqueuedScript type"
  enqueuedScripts(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String,
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String,
    "The number of items to return after the referenced \"after\" cursor"
    first: Int,
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
  ): ContentNodeToEnqueuedScriptConnection
  "Connection between the ContentNode type and the EnqueuedStylesheet type"
  enqueuedStylesheets(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String,
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String,
    "The number of items to return after the referenced \"after\" cursor"
    first: Int,
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
  ): ContentNodeToEnqueuedStylesheetConnection
  "The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table."
  guid: String
  "The globally unique ID for the object"
  id: ID!
  "Whether the node is a Content Node"
  isContentNode: Boolean!
  "Whether the object is a node in the preview state"
  isPreview: Boolean
  "Whether the object is restricted from the current viewer"
  isRestricted: Boolean
  "Whether the node is a Term"
  isTermNode: Boolean!
  "The user that most recently edited the node"
  lastEditedBy: ContentNodeToEditLastConnectionEdge
  "The permalink of the post"
  link: String
  "The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time."
  modified: String
  "The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT."
  modifiedGmt: String
  "The database id of the preview node"
  previewRevisionDatabaseId: Int
  "Whether the object is a node in the preview state"
  previewRevisionId: ID
  "The Yoast SEO data of the ContentNode"
  seo: PostTypeSEO
  "The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table."
  slug: String
  "The current status of the object"
  status: String
  "The template assigned to a node of content"
  template: ContentTemplate
  "The unique resource identifier path"
  uri: String
}

"Connection to ContentNode Nodes"
interface ContentNodeConnection {
  "A list of edges (relational context) between ContentType and connected ContentNode Nodes"
  edges: [ContentNodeConnectionEdge!]!
  "A list of connected ContentNode Nodes"
  nodes: [ContentNode!]!
  "Information about pagination in a connection."
  pageInfo: ContentNodeConnectionPageInfo!
}

"Edge between a Node and a connected ContentNode"
interface ContentNodeConnectionEdge {
  "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
  cursor: String
  "The connected ContentNode Node"
  node: ContentNode!
}

"Page Info on the connected ContentNodeConnectionEdge"
interface ContentNodeConnectionPageInfo {
  "When paginating forwards, the cursor to continue."
  endCursor: String
  "When paginating forwards, are there more items?"
  hasNextPage: Boolean!
  "When paginating backwards, are there more items?"
  hasPreviousPage: Boolean!
  "Raw schema for page"
  seo: SEOPostTypePageInfo
  "When paginating backwards, the cursor to continue."
  startCursor: String
}

"Interface representing fields of the ACF &quot;ContentPaymentFormCourses&quot; Field Group"
interface ContentPaymentFormCourses_Fields {
  "Field of the &quot;post_object&quot; Field Type added to the schema as part of the &quot;ContentPaymentFormCourses&quot; Field Group"
  course(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String,
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String,
    "The number of items to return after the referenced \"after\" cursor"
    first: Int,
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
  ): AcfContentNodeConnection
  "The name of the field group"
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
}

"Interface representing fields of the ACF &quot;ContentPaymentFormPaymentType&quot; Field Group"
interface ContentPaymentFormPaymentType_Fields {
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;ContentPaymentFormPaymentType&quot; Field Group"
  benefit: String
  "The name of the field group"
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;ContentPaymentFormPaymentType&quot; Field Group"
  installment: String
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;ContentPaymentFormPaymentType&quot; Field Group"
  oneTime: String
}

"Interface representing fields of the ACF &quot;ContentPaymentForm&quot; Field Group"
interface ContentPaymentForm_Fields {
  "Field of the &quot;repeater&quot; Field Type added to the schema as part of the &quot;ContentPaymentForm&quot; Field Group"
  courses: [ContentPaymentFormCourses]
  "The name of the field group"
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
  "Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;ContentPaymentForm&quot; Field Group"
  paymentType: ContentPaymentFormPaymentType
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;ContentPaymentForm&quot; Field Group"
  title: String
}

"Interface representing fields of the ACF &quot;ContentPriceDetails&quot; Field Group"
interface ContentPriceDetails_Fields {
  "The name of the field group"
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
  "Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;ContentPriceDetails&quot; Field Group"
  levelsNumber: Float
  "Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;ContentPriceDetails&quot; Field Group"
  monthsNumber: Float
  "Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;ContentPriceDetails&quot; Field Group"
  videoTrainingsNumber: Float
}

"Interface representing fields of the ACF &quot;ContentPrice&quot; Field Group"
interface ContentPrice_Fields {
  "Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;ContentPrice&quot; Field Group"
  details: ContentPriceDetails
  "Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;ContentPrice&quot; Field Group"
  discount: Float
  "The name of the field group"
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
  "Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;ContentPrice&quot; Field Group"
  priceFull: Float
  "Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;ContentPrice&quot; Field Group"
  priceMonthly: Float
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;ContentPrice&quot; Field Group"
  title: String
}

"The template assigned to a node of content"
interface ContentTemplate {
  "The name of the template"
  templateName: String
}

"Connection to ContentType Nodes"
interface ContentTypeConnection {
  "A list of edges (relational context) between RootQuery and connected ContentType Nodes"
  edges: [ContentTypeConnectionEdge!]!
  "A list of connected ContentType Nodes"
  nodes: [ContentType!]!
  "Information about pagination in a connection."
  pageInfo: ContentTypeConnectionPageInfo!
}

"Edge between a Node and a connected ContentType"
interface ContentTypeConnectionEdge {
  "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
  cursor: String
  "The connected ContentType Node"
  node: ContentType!
}

"Page Info on the connected ContentTypeConnectionEdge"
interface ContentTypeConnectionPageInfo {
  "When paginating forwards, the cursor to continue."
  endCursor: String
  "When paginating forwards, are there more items?"
  hasNextPage: Boolean!
  "When paginating backwards, are there more items?"
  hasPreviousPage: Boolean!
  "Raw schema for page"
  seo: SEOPostTypePageInfo
  "When paginating backwards, the cursor to continue."
  startCursor: String
}

"Interface representing fields of the ACF &quot;Content&quot; Field Group"
interface Content_Fields {
  "Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;Content&quot; Field Group"
  background: ContentBackground
  "Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;Content&quot; Field Group"
  cta: ContentCta
  "Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;Content&quot; Field Group"
  details: ContentDetails
  "The name of the field group"
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
  "Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;Content&quot; Field Group"
  hero: ContentHero
  "Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;Content&quot; Field Group"
  paymentForm: ContentPaymentForm
  "Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;Content&quot; Field Group"
  price: ContentPrice
}

"Connection to course Nodes"
interface CourseConnection {
  "A list of edges (relational context) between RootQuery and connected course Nodes"
  edges: [CourseConnectionEdge!]!
  "A list of connected course Nodes"
  nodes: [Course!]!
  "Information about pagination in a connection."
  pageInfo: CourseConnectionPageInfo!
}

"Edge between a Node and a connected course"
interface CourseConnectionEdge {
  "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
  cursor: String
  "The connected course Node"
  node: Course!
}

"Page Info on the connected CourseConnectionEdge"
interface CourseConnectionPageInfo {
  "When paginating forwards, the cursor to continue."
  endCursor: String
  "When paginating forwards, are there more items?"
  hasNextPage: Boolean!
  "When paginating backwards, are there more items?"
  hasPreviousPage: Boolean!
  "Raw schema for page"
  seo: SEOPostTypePageInfo
  "When paginating backwards, the cursor to continue."
  startCursor: String
}

"Object that can be identified with a Database ID"
interface DatabaseIdentifier {
  "The unique identifier stored in the database"
  databaseId: Int!
}

"Interface representing fields of the ACF &quot;DetailsAdditionalQuestionsCta&quot; Field Group"
interface DetailsAdditionalQuestionsCta_Fields {
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;DetailsAdditionalQuestionsCta&quot; Field Group"
  afterBoldText: String
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;DetailsAdditionalQuestionsCta&quot; Field Group"
  beforeBoldText: String
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;DetailsAdditionalQuestionsCta&quot; Field Group"
  boldText: String
  "The name of the field group"
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
}

"Interface representing fields of the ACF &quot;DetailsAdditionalQuestions&quot; Field Group"
interface DetailsAdditionalQuestions_Fields {
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;DetailsAdditionalQuestions&quot; Field Group"
  button: String
  "Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;DetailsAdditionalQuestions&quot; Field Group"
  cta: DetailsAdditionalQuestionsCta
  "The name of the field group"
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;DetailsAdditionalQuestions&quot; Field Group"
  title: String
}

"Interface representing fields of the ACF &quot;DetailsFaq&quot; Field Group"
interface DetailsFaq_Fields {
  "Field of the &quot;textarea&quot; Field Type added to the schema as part of the &quot;DetailsFaq&quot; Field Group"
  answer: String
  "The name of the field group"
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;DetailsFaq&quot; Field Group"
  question: String
}

"Interface representing fields of the ACF &quot;Details&quot; Field Group"
interface Details_Fields {
  "Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;Details&quot; Field Group"
  additionalQuestions: DetailsAdditionalQuestions
  "Field of the &quot;repeater&quot; Field Type added to the schema as part of the &quot;Details&quot; Field Group"
  faq: [DetailsFaq]
  "The name of the field group"
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
}

"Relational context between connected nodes"
interface Edge {
  "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
  cursor: String
  "The connected node"
  node: Node!
}

"Asset enqueued by the CMS"
interface EnqueuedAsset {
  "The inline code to be run after the asset is loaded."
  after: [String]
  "Deprecated"
  args: Boolean @deprecated(reason: "Use `EnqueuedAsset.media` instead.")
  "The inline code to be run before the asset is loaded."
  before: [String]
  "The HTML conditional comment for the enqueued asset. E.g. IE 6, lte IE 7, etc"
  conditional: String
  "Dependencies needed to use this asset"
  dependencies: [EnqueuedAsset]
  "Extra information needed for the script"
  extra: String @deprecated(reason: "Use `EnqueuedScript.extraData` instead.")
  "The handle of the enqueued asset"
  handle: String
  "The ID of the enqueued asset"
  id: ID!
  "The source of the asset"
  src: String
  "The version of the enqueued asset"
  version: String
}

"Connection to EnqueuedScript Nodes"
interface EnqueuedScriptConnection {
  "A list of edges (relational context) between ContentNode and connected EnqueuedScript Nodes"
  edges: [EnqueuedScriptConnectionEdge!]!
  "A list of connected EnqueuedScript Nodes"
  nodes: [EnqueuedScript!]!
  "Information about pagination in a connection."
  pageInfo: EnqueuedScriptConnectionPageInfo!
}

"Edge between a Node and a connected EnqueuedScript"
interface EnqueuedScriptConnectionEdge {
  "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
  cursor: String
  "The connected EnqueuedScript Node"
  node: EnqueuedScript!
}

"Page Info on the connected EnqueuedScriptConnectionEdge"
interface EnqueuedScriptConnectionPageInfo {
  "When paginating forwards, the cursor to continue."
  endCursor: String
  "When paginating forwards, are there more items?"
  hasNextPage: Boolean!
  "When paginating backwards, are there more items?"
  hasPreviousPage: Boolean!
  "Raw schema for page"
  seo: SEOPostTypePageInfo
  "When paginating backwards, the cursor to continue."
  startCursor: String
}

"Connection to EnqueuedStylesheet Nodes"
interface EnqueuedStylesheetConnection {
  "A list of edges (relational context) between ContentNode and connected EnqueuedStylesheet Nodes"
  edges: [EnqueuedStylesheetConnectionEdge!]!
  "A list of connected EnqueuedStylesheet Nodes"
  nodes: [EnqueuedStylesheet!]!
  "Information about pagination in a connection."
  pageInfo: EnqueuedStylesheetConnectionPageInfo!
}

"Edge between a Node and a connected EnqueuedStylesheet"
interface EnqueuedStylesheetConnectionEdge {
  "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
  cursor: String
  "The connected EnqueuedStylesheet Node"
  node: EnqueuedStylesheet!
}

"Page Info on the connected EnqueuedStylesheetConnectionEdge"
interface EnqueuedStylesheetConnectionPageInfo {
  "When paginating forwards, the cursor to continue."
  endCursor: String
  "When paginating forwards, are there more items?"
  hasNextPage: Boolean!
  "When paginating backwards, are there more items?"
  hasPreviousPage: Boolean!
  "Raw schema for page"
  seo: SEOPostTypePageInfo
  "When paginating backwards, the cursor to continue."
  startCursor: String
}

"Connection to generalFragment Nodes"
interface GeneralFragmentConnection {
  "A list of edges (relational context) between RootQuery and connected generalFragment Nodes"
  edges: [GeneralFragmentConnectionEdge!]!
  "A list of connected generalFragment Nodes"
  nodes: [GeneralFragment!]!
  "Information about pagination in a connection."
  pageInfo: GeneralFragmentConnectionPageInfo!
}

"Edge between a Node and a connected generalFragment"
interface GeneralFragmentConnectionEdge {
  "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
  cursor: String
  "The connected generalFragment Node"
  node: GeneralFragment!
}

"Page Info on the connected GeneralFragmentConnectionEdge"
interface GeneralFragmentConnectionPageInfo {
  "When paginating forwards, the cursor to continue."
  endCursor: String
  "When paginating forwards, are there more items?"
  hasNextPage: Boolean!
  "When paginating backwards, are there more items?"
  hasPreviousPage: Boolean!
  "Raw schema for page"
  seo: SEOPostTypePageInfo
  "When paginating backwards, the cursor to continue."
  startCursor: String
}

"Content node with hierarchical (parent/child) relationships"
interface HierarchicalContentNode {
  "Returns ancestors of the node. Default ordered as lowest (closest to the child) to highest (closest to the root)."
  ancestors(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String,
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String,
    "The number of items to return after the referenced \"after\" cursor"
    first: Int,
    "The number of items to return before the referenced \"before\" cursor"
    last: Int,
    "Arguments for filtering the connection"
    where: HierarchicalContentNodeToContentNodeAncestorsConnectionWhereArgs
  ): HierarchicalContentNodeToContentNodeAncestorsConnection
  "Connection between the HierarchicalContentNode type and the ContentNode type"
  children(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String,
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String,
    "The number of items to return after the referenced \"after\" cursor"
    first: Int,
    "The number of items to return before the referenced \"before\" cursor"
    last: Int,
    "Arguments for filtering the connection"
    where: HierarchicalContentNodeToContentNodeChildrenConnectionWhereArgs
  ): HierarchicalContentNodeToContentNodeChildrenConnection
  "Connection between the ContentNode type and the ContentType type"
  contentType: ContentNodeToContentTypeConnectionEdge
  "The name of the Content Type the node belongs to"
  contentTypeName: String!
  "The unique identifier stored in the database"
  databaseId: Int!
  "Post publishing date."
  date: String
  "The publishing date set in GMT."
  dateGmt: String
  "The desired slug of the post"
  desiredSlug: String
  "If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds"
  editingLockedBy: ContentNodeToEditLockConnectionEdge
  "The RSS enclosure for the object"
  enclosure: String
  "Connection between the ContentNode type and the EnqueuedScript type"
  enqueuedScripts(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String,
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String,
    "The number of items to return after the referenced \"after\" cursor"
    first: Int,
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
  ): ContentNodeToEnqueuedScriptConnection
  "Connection between the ContentNode type and the EnqueuedStylesheet type"
  enqueuedStylesheets(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String,
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String,
    "The number of items to return after the referenced \"after\" cursor"
    first: Int,
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
  ): ContentNodeToEnqueuedStylesheetConnection
  "The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table."
  guid: String
  "The globally unique ID for the object"
  id: ID!
  "Whether the node is a Content Node"
  isContentNode: Boolean!
  "Whether the object is a node in the preview state"
  isPreview: Boolean
  "Whether the object is restricted from the current viewer"
  isRestricted: Boolean
  "Whether the node is a Term"
  isTermNode: Boolean!
  "The user that most recently edited the node"
  lastEditedBy: ContentNodeToEditLastConnectionEdge
  "The permalink of the post"
  link: String
  "The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time."
  modified: String
  "The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT."
  modifiedGmt: String
  "The parent of the node. The parent object can be of various types"
  parent: HierarchicalContentNodeToParentContentNodeConnectionEdge
  "Database id of the parent node"
  parentDatabaseId: Int
  "The globally unique identifier of the parent node."
  parentId: ID
  "The database id of the preview node"
  previewRevisionDatabaseId: Int
  "Whether the object is a node in the preview state"
  previewRevisionId: ID
  "The Yoast SEO data of the ContentNode"
  seo: PostTypeSEO
  "The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table."
  slug: String
  "The current status of the object"
  status: String
  "The template assigned to a node of content"
  template: ContentTemplate
  "The unique resource identifier path"
  uri: String
}

"Node with hierarchical (parent/child) relationships"
interface HierarchicalNode {
  "The unique identifier stored in the database"
  databaseId: Int!
  "The globally unique ID for the object"
  id: ID!
  "Database id of the parent node"
  parentDatabaseId: Int
  "The globally unique identifier of the parent node."
  parentId: ID
}

"Term node with hierarchical (parent/child) relationships"
interface HierarchicalTermNode {
  "The number of objects connected to the object"
  count: Int
  "The unique identifier stored in the database"
  databaseId: Int!
  "The description of the object"
  description: String
  "Connection between the TermNode type and the EnqueuedScript type"
  enqueuedScripts(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String,
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String,
    "The number of items to return after the referenced \"after\" cursor"
    first: Int,
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
  ): TermNodeToEnqueuedScriptConnection
  "Connection between the TermNode type and the EnqueuedStylesheet type"
  enqueuedStylesheets(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String,
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String,
    "The number of items to return after the referenced \"after\" cursor"
    first: Int,
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
  ): TermNodeToEnqueuedStylesheetConnection
  "The globally unique ID for the object"
  id: ID!
  "Whether the node is a Content Node"
  isContentNode: Boolean!
  "Whether the object is restricted from the current viewer"
  isRestricted: Boolean
  "Whether the node is a Term"
  isTermNode: Boolean!
  "The link to the term"
  link: String
  "The human friendly name of the object."
  name: String
  "Database id of the parent node"
  parentDatabaseId: Int
  "The globally unique identifier of the parent node."
  parentId: ID
  "An alphanumeric identifier for the object unique to its type."
  slug: String
  "The name of the taxonomy that the object is associated with"
  taxonomyName: String
  "The ID of the term group that this term object belongs to"
  termGroupId: Int
  "The taxonomy ID that the object is associated with"
  termTaxonomyId: Int
  "The unique resource identifier path"
  uri: String
}

"Connection to individualCourse Nodes"
interface IndividualCourseConnection {
  "A list of edges (relational context) between RootQuery and connected individualCourse Nodes"
  edges: [IndividualCourseConnectionEdge!]!
  "A list of connected individualCourse Nodes"
  nodes: [IndividualCourse!]!
  "Information about pagination in a connection."
  pageInfo: IndividualCourseConnectionPageInfo!
}

"Edge between a Node and a connected individualCourse"
interface IndividualCourseConnectionEdge {
  "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
  cursor: String
  "The connected individualCourse Node"
  node: IndividualCourse!
}

"Page Info on the connected IndividualCourseConnectionEdge"
interface IndividualCourseConnectionPageInfo {
  "When paginating forwards, the cursor to continue."
  endCursor: String
  "When paginating forwards, are there more items?"
  hasNextPage: Boolean!
  "When paginating backwards, are there more items?"
  hasPreviousPage: Boolean!
  "Raw schema for page"
  seo: SEOPostTypePageInfo
  "When paginating backwards, the cursor to continue."
  startCursor: String
}

"Interface representing fields of the ACF &quot;IndividualCourseDataBackgroundDesktop&quot; Field Group"
interface IndividualCourseDataBackgroundDesktop_Fields {
  "The name of the field group"
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
  "Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;IndividualCourseDataBackgroundDesktop&quot; Field Group"
  footer: AcfMediaItemConnectionEdge
  "Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;IndividualCourseDataBackgroundDesktop&quot; Field Group"
  hero: AcfMediaItemConnectionEdge
  "Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;IndividualCourseDataBackgroundDesktop&quot; Field Group"
  teacher: AcfMediaItemConnectionEdge
}

"Interface representing fields of the ACF &quot;IndividualCourseDataBackgroundMobile&quot; Field Group"
interface IndividualCourseDataBackgroundMobile_Fields {
  "The name of the field group"
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
  "Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;IndividualCourseDataBackgroundMobile&quot; Field Group"
  footer: AcfMediaItemConnectionEdge
  "Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;IndividualCourseDataBackgroundMobile&quot; Field Group"
  hero: AcfMediaItemConnectionEdge
  "Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;IndividualCourseDataBackgroundMobile&quot; Field Group"
  teacher: AcfMediaItemConnectionEdge
}

"Interface representing fields of the ACF &quot;IndividualCourseDataBackground&quot; Field Group"
interface IndividualCourseDataBackground_Fields {
  "Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;IndividualCourseDataBackground&quot; Field Group"
  desktop: IndividualCourseDataBackgroundDesktop
  "The name of the field group"
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
  "Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;IndividualCourseDataBackground&quot; Field Group"
  mobile: IndividualCourseDataBackgroundMobile
}

"Interface representing fields of the ACF &quot;IndividualCourseDataHeroBenefits&quot; Field Group"
interface IndividualCourseDataHeroBenefits_Fields {
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;IndividualCourseDataHeroBenefits&quot; Field Group"
  content: String
  "The name of the field group"
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
}

"Interface representing fields of the ACF &quot;IndividualCourseDataHeroCourseConditions&quot; Field Group"
interface IndividualCourseDataHeroCourseConditions_Fields {
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;IndividualCourseDataHeroCourseConditions&quot; Field Group"
  description: String
  "The name of the field group"
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
  "Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;IndividualCourseDataHeroCourseConditions&quot; Field Group"
  number: Float
}

"Interface representing fields of the ACF &quot;IndividualCourseDataHero&quot; Field Group"
interface IndividualCourseDataHero_Fields {
  "Field of the &quot;repeater&quot; Field Type added to the schema as part of the &quot;IndividualCourseDataHero&quot; Field Group"
  benefits: [IndividualCourseDataHeroBenefits]
  "Field of the &quot;repeater&quot; Field Type added to the schema as part of the &quot;IndividualCourseDataHero&quot; Field Group"
  courseConditions: [IndividualCourseDataHeroCourseConditions]
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;IndividualCourseDataHero&quot; Field Group"
  cta: String
  "The name of the field group"
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;IndividualCourseDataHero&quot; Field Group"
  runningLine: String
}

"Interface representing fields of the ACF &quot;IndividualCourseDataPrice&quot; Field Group"
interface IndividualCourseDataPrice_Fields {
  "Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;IndividualCourseDataPrice&quot; Field Group"
  courseLengthInMonths: Float
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;IndividualCourseDataPrice&quot; Field Group"
  cta: String
  "Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;IndividualCourseDataPrice&quot; Field Group"
  discount: Float
  "The name of the field group"
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
  "Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;IndividualCourseDataPrice&quot; Field Group"
  fullPrice: Float
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;IndividualCourseDataPrice&quot; Field Group"
  liveTrainingsNumber: String
  "Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;IndividualCourseDataPrice&quot; Field Group"
  monthlyPrice: Float
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;IndividualCourseDataPrice&quot; Field Group"
  oldPrice: String
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;IndividualCourseDataPrice&quot; Field Group"
  title: String
  "Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;IndividualCourseDataPrice&quot; Field Group"
  videoTrainingsNumber: Float
}

"Interface representing fields of the ACF &quot;IndividualCourseDataProcessStep&quot; Field Group"
interface IndividualCourseDataProcessStep_Fields {
  "Field of the &quot;textarea&quot; Field Type added to the schema as part of the &quot;IndividualCourseDataProcessStep&quot; Field Group"
  description: String
  "The name of the field group"
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;IndividualCourseDataProcessStep&quot; Field Group"
  title: String
}

"Interface representing fields of the ACF &quot;IndividualCourseDataProcess&quot; Field Group"
interface IndividualCourseDataProcess_Fields {
  "The name of the field group"
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
  "Field of the &quot;repeater&quot; Field Type added to the schema as part of the &quot;IndividualCourseDataProcess&quot; Field Group"
  step: [IndividualCourseDataProcessStep]
}

"Interface representing fields of the ACF &quot;IndividualCourseData&quot; Field Group"
interface IndividualCourseData_Fields {
  "Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;IndividualCourseData&quot; Field Group"
  background: IndividualCourseDataBackground
  "The name of the field group"
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
  "Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;IndividualCourseData&quot; Field Group"
  hero: IndividualCourseDataHero
  "Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;IndividualCourseData&quot; Field Group"
  price: IndividualCourseDataPrice
  "Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;IndividualCourseData&quot; Field Group"
  process: IndividualCourseDataProcess
}

"Connection to mediaItem Nodes"
interface MediaItemConnection {
  "A list of edges (relational context) between RootQuery and connected mediaItem Nodes"
  edges: [MediaItemConnectionEdge!]!
  "A list of connected mediaItem Nodes"
  nodes: [MediaItem!]!
  "Information about pagination in a connection."
  pageInfo: MediaItemConnectionPageInfo!
}

"Edge between a Node and a connected mediaItem"
interface MediaItemConnectionEdge {
  "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
  cursor: String
  "The connected mediaItem Node"
  node: MediaItem!
}

"Page Info on the connected MediaItemConnectionEdge"
interface MediaItemConnectionPageInfo {
  "When paginating forwards, the cursor to continue."
  endCursor: String
  "When paginating forwards, are there more items?"
  hasNextPage: Boolean!
  "When paginating backwards, are there more items?"
  hasPreviousPage: Boolean!
  "Raw schema for page"
  seo: SEOPostTypePageInfo
  "When paginating backwards, the cursor to continue."
  startCursor: String
}

"Connection to Menu Nodes"
interface MenuConnection {
  "A list of edges (relational context) between RootQuery and connected Menu Nodes"
  edges: [MenuConnectionEdge!]!
  "A list of connected Menu Nodes"
  nodes: [Menu!]!
  "Information about pagination in a connection."
  pageInfo: MenuConnectionPageInfo!
}

"Edge between a Node and a connected Menu"
interface MenuConnectionEdge {
  "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
  cursor: String
  "The connected Menu Node"
  node: Menu!
}

"Page Info on the connected MenuConnectionEdge"
interface MenuConnectionPageInfo {
  "When paginating forwards, the cursor to continue."
  endCursor: String
  "When paginating forwards, are there more items?"
  hasNextPage: Boolean!
  "When paginating backwards, are there more items?"
  hasPreviousPage: Boolean!
  "Raw schema for page"
  seo: SEOPostTypePageInfo
  "When paginating backwards, the cursor to continue."
  startCursor: String
}

"Connection to MenuItem Nodes"
interface MenuItemConnection {
  "A list of edges (relational context) between RootQuery and connected MenuItem Nodes"
  edges: [MenuItemConnectionEdge!]!
  "A list of connected MenuItem Nodes"
  nodes: [MenuItem!]!
  "Information about pagination in a connection."
  pageInfo: MenuItemConnectionPageInfo!
}

"Edge between a Node and a connected MenuItem"
interface MenuItemConnectionEdge {
  "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
  cursor: String
  "The connected MenuItem Node"
  node: MenuItem!
}

"Page Info on the connected MenuItemConnectionEdge"
interface MenuItemConnectionPageInfo {
  "When paginating forwards, the cursor to continue."
  endCursor: String
  "When paginating forwards, are there more items?"
  hasNextPage: Boolean!
  "When paginating backwards, are there more items?"
  hasPreviousPage: Boolean!
  "Raw schema for page"
  seo: SEOPostTypePageInfo
  "When paginating backwards, the cursor to continue."
  startCursor: String
}

"Nodes that can be linked to as Menu Items"
interface MenuItemLinkable {
  "The unique identifier stored in the database"
  databaseId: Int!
  "The globally unique ID for the object"
  id: ID!
  "Whether the node is a Content Node"
  isContentNode: Boolean!
  "Whether the node is a Term"
  isTermNode: Boolean!
  "The unique resource identifier path"
  uri: String
}

"Edge between a Node and a connected MenuItemLinkable"
interface MenuItemLinkableConnectionEdge {
  "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
  cursor: String
  "The connected MenuItemLinkable Node"
  node: MenuItemLinkable!
}

"An object with an ID"
interface Node {
  "The globally unique ID for the object"
  id: ID!
}

"A node that can have an author assigned to it"
interface NodeWithAuthor {
  "Connection between the NodeWithAuthor type and the User type"
  author: NodeWithAuthorToUserConnectionEdge
  "The database identifier of the author of the node"
  authorDatabaseId: Int
  "The globally unique identifier of the author of the node"
  authorId: ID
  "The globally unique ID for the object"
  id: ID!
}

"A node that can have comments associated with it"
interface NodeWithComments {
  "The number of comments. Even though WPGraphQL denotes this field as an integer, in WordPress this field should be saved as a numeric string for compatibility."
  commentCount: Int
  "Whether the comments are open or closed for this particular post."
  commentStatus: String
  "The globally unique ID for the object"
  id: ID!
}

"A node that supports the content editor"
interface NodeWithContentEditor {
  "The content of the post."
  content(
    "Format of the field output"
    format: PostObjectFieldFormatEnum
  ): String
  "The globally unique ID for the object"
  id: ID!
}

"A node that can have an excerpt"
interface NodeWithExcerpt {
  "The excerpt of the post."
  excerpt(
    "Format of the field output"
    format: PostObjectFieldFormatEnum
  ): String
  "The globally unique ID for the object"
  id: ID!
}

"A node that can have a featured image set"
interface NodeWithFeaturedImage {
  "Connection between the NodeWithFeaturedImage type and the MediaItem type"
  featuredImage: NodeWithFeaturedImageToMediaItemConnectionEdge
  "The database identifier for the featured image node assigned to the content node"
  featuredImageDatabaseId: Int
  "Globally unique ID of the featured image assigned to the node"
  featuredImageId: ID
  "The globally unique ID for the object"
  id: ID!
}

"A node that can have page attributes"
interface NodeWithPageAttributes {
  "The globally unique ID for the object"
  id: ID!
  "A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types."
  menuOrder: Int
}

"A node that can have revisions"
interface NodeWithRevisions {
  "The globally unique ID for the object"
  id: ID!
  "True if the node is a revision of another node"
  isRevision: Boolean
  "If the current node is a revision, this field exposes the node this is a revision of. Returns null if the node is not a revision of another node."
  revisionOf: NodeWithRevisionsToContentNodeConnectionEdge
}

"A node that can have a template associated with it"
interface NodeWithTemplate {
  "The globally unique ID for the object"
  id: ID!
  "The template assigned to the node"
  template: ContentTemplate
}

"A node that NodeWith a title"
interface NodeWithTitle {
  "The globally unique ID for the object"
  id: ID!
  "The Yoast SEO data of the ContentNode"
  seo: PostTypeSEO
  "The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made."
  title(
    "Format of the field output"
    format: PostObjectFieldFormatEnum
  ): String
}

"A node that can have trackbacks and pingbacks"
interface NodeWithTrackbacks {
  "The globally unique ID for the object"
  id: ID!
  "Whether the pings are open or closed for this particular post."
  pingStatus: String
  "URLs that have been pinged."
  pinged: [String]
  "URLs queued to be pinged."
  toPing: [String]
}

"A singular connection from one Node to another, with support for relational data on the &quot;edge&quot; of the connection."
interface OneToOneConnection {
  "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
  cursor: String
  "The connected node"
  node: Node!
}

"Connection to page Nodes"
interface PageConnection {
  "A list of edges (relational context) between RootQuery and connected page Nodes"
  edges: [PageConnectionEdge!]!
  "A list of connected page Nodes"
  nodes: [Page!]!
  "Information about pagination in a connection."
  pageInfo: PageConnectionPageInfo!
}

"Edge between a Node and a connected page"
interface PageConnectionEdge {
  "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
  cursor: String
  "The connected page Node"
  node: Page!
}

"Page Info on the connected PageConnectionEdge"
interface PageConnectionPageInfo {
  "When paginating forwards, the cursor to continue."
  endCursor: String
  "When paginating forwards, are there more items?"
  hasNextPage: Boolean!
  "When paginating backwards, are there more items?"
  hasPreviousPage: Boolean!
  "Raw schema for page"
  seo: SEOPostTypePageInfo
  "When paginating backwards, the cursor to continue."
  startCursor: String
}

"Information about pagination in a connection."
interface PageInfo {
  "When paginating forwards, the cursor to continue."
  endCursor: String
  "When paginating forwards, are there more items?"
  hasNextPage: Boolean!
  "When paginating backwards, are there more items?"
  hasPreviousPage: Boolean!
  "When paginating backwards, the cursor to continue."
  startCursor: String
}

"Connection to Plugin Nodes"
interface PluginConnection {
  "A list of edges (relational context) between RootQuery and connected Plugin Nodes"
  edges: [PluginConnectionEdge!]!
  "A list of connected Plugin Nodes"
  nodes: [Plugin!]!
  "Information about pagination in a connection."
  pageInfo: PluginConnectionPageInfo!
}

"Edge between a Node and a connected Plugin"
interface PluginConnectionEdge {
  "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
  cursor: String
  "The connected Plugin Node"
  node: Plugin!
}

"Page Info on the connected PluginConnectionEdge"
interface PluginConnectionPageInfo {
  "When paginating forwards, the cursor to continue."
  endCursor: String
  "When paginating forwards, are there more items?"
  hasNextPage: Boolean!
  "When paginating backwards, are there more items?"
  hasPreviousPage: Boolean!
  "Raw schema for page"
  seo: SEOPostTypePageInfo
  "When paginating backwards, the cursor to continue."
  startCursor: String
}

"Connection to post Nodes"
interface PostConnection {
  "A list of edges (relational context) between RootQuery and connected post Nodes"
  edges: [PostConnectionEdge!]!
  "A list of connected post Nodes"
  nodes: [Post!]!
  "Information about pagination in a connection."
  pageInfo: PostConnectionPageInfo!
}

"Edge between a Node and a connected post"
interface PostConnectionEdge {
  "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
  cursor: String
  "The connected post Node"
  node: Post!
}

"Page Info on the connected PostConnectionEdge"
interface PostConnectionPageInfo {
  "When paginating forwards, the cursor to continue."
  endCursor: String
  "When paginating forwards, are there more items?"
  hasNextPage: Boolean!
  "When paginating backwards, are there more items?"
  hasPreviousPage: Boolean!
  "Raw schema for page"
  seo: SEOPostTypePageInfo
  "When paginating backwards, the cursor to continue."
  startCursor: String
}

"Connection to postFormat Nodes"
interface PostFormatConnection {
  "A list of edges (relational context) between RootQuery and connected postFormat Nodes"
  edges: [PostFormatConnectionEdge!]!
  "A list of connected postFormat Nodes"
  nodes: [PostFormat!]!
  "Information about pagination in a connection."
  pageInfo: PostFormatConnectionPageInfo!
}

"Edge between a Node and a connected postFormat"
interface PostFormatConnectionEdge {
  "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
  cursor: String
  "The connected postFormat Node"
  node: PostFormat!
}

"Page Info on the connected PostFormatConnectionEdge"
interface PostFormatConnectionPageInfo {
  "When paginating forwards, the cursor to continue."
  endCursor: String
  "When paginating forwards, are there more items?"
  hasNextPage: Boolean!
  "When paginating backwards, are there more items?"
  hasPreviousPage: Boolean!
  "Raw schema for page"
  seo: SEOPostTypePageInfo
  "When paginating backwards, the cursor to continue."
  startCursor: String
}

"Nodes that can be seen in a preview (unpublished) state."
interface Previewable {
  "Whether the object is a node in the preview state"
  isPreview: Boolean
  "The database id of the preview node"
  previewRevisionDatabaseId: Int
  "Whether the object is a node in the preview state"
  previewRevisionId: ID
}

"Connection to tag Nodes"
interface TagConnection {
  "A list of edges (relational context) between RootQuery and connected tag Nodes"
  edges: [TagConnectionEdge!]!
  "A list of connected tag Nodes"
  nodes: [Tag!]!
  "Information about pagination in a connection."
  pageInfo: TagConnectionPageInfo!
}

"Edge between a Node and a connected tag"
interface TagConnectionEdge {
  "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
  cursor: String
  "The connected tag Node"
  node: Tag!
}

"Page Info on the connected TagConnectionEdge"
interface TagConnectionPageInfo {
  "When paginating forwards, the cursor to continue."
  endCursor: String
  "When paginating forwards, are there more items?"
  hasNextPage: Boolean!
  "When paginating backwards, are there more items?"
  hasPreviousPage: Boolean!
  "Raw schema for page"
  seo: SEOPostTypePageInfo
  "When paginating backwards, the cursor to continue."
  startCursor: String
}

"Connection to Taxonomy Nodes"
interface TaxonomyConnection {
  "A list of edges (relational context) between RootQuery and connected Taxonomy Nodes"
  edges: [TaxonomyConnectionEdge!]!
  "A list of connected Taxonomy Nodes"
  nodes: [Taxonomy!]!
  "Information about pagination in a connection."
  pageInfo: TaxonomyConnectionPageInfo!
}

"Edge between a Node and a connected Taxonomy"
interface TaxonomyConnectionEdge {
  "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
  cursor: String
  "The connected Taxonomy Node"
  node: Taxonomy!
}

"Page Info on the connected TaxonomyConnectionEdge"
interface TaxonomyConnectionPageInfo {
  "When paginating forwards, the cursor to continue."
  endCursor: String
  "When paginating forwards, are there more items?"
  hasNextPage: Boolean!
  "When paginating backwards, are there more items?"
  hasPreviousPage: Boolean!
  "Raw schema for page"
  seo: SEOPostTypePageInfo
  "When paginating backwards, the cursor to continue."
  startCursor: String
}

"Terms are nodes within a Taxonomy, used to group and relate other nodes."
interface TermNode {
  "The number of objects connected to the object"
  count: Int
  "Identifies the primary key from the database."
  databaseId: Int!
  "The description of the object"
  description: String
  "Connection between the TermNode type and the EnqueuedScript type"
  enqueuedScripts(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String,
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String,
    "The number of items to return after the referenced \"after\" cursor"
    first: Int,
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
  ): TermNodeToEnqueuedScriptConnection
  "Connection between the TermNode type and the EnqueuedStylesheet type"
  enqueuedStylesheets(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String,
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String,
    "The number of items to return after the referenced \"after\" cursor"
    first: Int,
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
  ): TermNodeToEnqueuedStylesheetConnection
  "The globally unique ID for the object"
  id: ID!
  "Whether the node is a Content Node"
  isContentNode: Boolean!
  "Whether the object is restricted from the current viewer"
  isRestricted: Boolean
  "Whether the node is a Term"
  isTermNode: Boolean!
  "The link to the term"
  link: String
  "The human friendly name of the object."
  name: String
  "An alphanumeric identifier for the object unique to its type."
  slug: String
  "The name of the taxonomy that the object is associated with"
  taxonomyName: String
  "The ID of the term group that this term object belongs to"
  termGroupId: Int
  "The taxonomy ID that the object is associated with"
  termTaxonomyId: Int
  "The unique resource identifier path"
  uri: String
}

"Connection to TermNode Nodes"
interface TermNodeConnection {
  "A list of edges (relational context) between RootQuery and connected TermNode Nodes"
  edges: [TermNodeConnectionEdge!]!
  "A list of connected TermNode Nodes"
  nodes: [TermNode!]!
  "Information about pagination in a connection."
  pageInfo: TermNodeConnectionPageInfo!
}

"Edge between a Node and a connected TermNode"
interface TermNodeConnectionEdge {
  "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
  cursor: String
  "The connected TermNode Node"
  node: TermNode!
}

"Page Info on the connected TermNodeConnectionEdge"
interface TermNodeConnectionPageInfo {
  "When paginating forwards, the cursor to continue."
  endCursor: String
  "When paginating forwards, are there more items?"
  hasNextPage: Boolean!
  "When paginating backwards, are there more items?"
  hasPreviousPage: Boolean!
  "Raw schema for page"
  seo: SEOPostTypePageInfo
  "When paginating backwards, the cursor to continue."
  startCursor: String
}

"Connection to Theme Nodes"
interface ThemeConnection {
  "A list of edges (relational context) between RootQuery and connected Theme Nodes"
  edges: [ThemeConnectionEdge!]!
  "A list of connected Theme Nodes"
  nodes: [Theme!]!
  "Information about pagination in a connection."
  pageInfo: ThemeConnectionPageInfo!
}

"Edge between a Node and a connected Theme"
interface ThemeConnectionEdge {
  "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
  cursor: String
  "The connected Theme Node"
  node: Theme!
}

"Page Info on the connected ThemeConnectionEdge"
interface ThemeConnectionPageInfo {
  "When paginating forwards, the cursor to continue."
  endCursor: String
  "When paginating forwards, are there more items?"
  hasNextPage: Boolean!
  "When paginating backwards, are there more items?"
  hasPreviousPage: Boolean!
  "Raw schema for page"
  seo: SEOPostTypePageInfo
  "When paginating backwards, the cursor to continue."
  startCursor: String
}

"Any node that has a URI"
interface UniformResourceIdentifiable {
  "The globally unique ID for the object"
  id: ID!
  "Whether the node is a Content Node"
  isContentNode: Boolean!
  "Whether the node is a Term"
  isTermNode: Boolean!
  "The unique resource identifier path"
  uri: String
}

"Connection to User Nodes"
interface UserConnection {
  "A list of edges (relational context) between RootQuery and connected User Nodes"
  edges: [UserConnectionEdge!]!
  "A list of connected User Nodes"
  nodes: [User!]!
  "Information about pagination in a connection."
  pageInfo: UserConnectionPageInfo!
}

"Edge between a Node and a connected User"
interface UserConnectionEdge {
  "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
  cursor: String
  "The connected User Node"
  node: User!
}

"Page Info on the connected UserConnectionEdge"
interface UserConnectionPageInfo {
  "When paginating forwards, the cursor to continue."
  endCursor: String
  "When paginating forwards, are there more items?"
  hasNextPage: Boolean!
  "When paginating backwards, are there more items?"
  hasPreviousPage: Boolean!
  "Raw schema for page"
  seo: SEOPostTypePageInfo
  "When paginating backwards, the cursor to continue."
  startCursor: String
}

"Connection to UserRole Nodes"
interface UserRoleConnection {
  "A list of edges (relational context) between RootQuery and connected UserRole Nodes"
  edges: [UserRoleConnectionEdge!]!
  "A list of connected UserRole Nodes"
  nodes: [UserRole!]!
  "Information about pagination in a connection."
  pageInfo: UserRoleConnectionPageInfo!
}

"Edge between a Node and a connected UserRole"
interface UserRoleConnectionEdge {
  "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
  cursor: String
  "The connected UserRole Node"
  node: UserRole!
}

"Page Info on the connected UserRoleConnectionEdge"
interface UserRoleConnectionPageInfo {
  "When paginating forwards, the cursor to continue."
  endCursor: String
  "When paginating forwards, are there more items?"
  hasNextPage: Boolean!
  "When paginating backwards, are there more items?"
  hasPreviousPage: Boolean!
  "Raw schema for page"
  seo: SEOPostTypePageInfo
  "When paginating backwards, the cursor to continue."
  startCursor: String
}

"Information about pagination in a connection."
interface WPPageInfo {
  "When paginating forwards, the cursor to continue."
  endCursor: String
  "When paginating forwards, are there more items?"
  hasNextPage: Boolean!
  "When paginating backwards, are there more items?"
  hasPreviousPage: Boolean!
  "Raw schema for page"
  seo: SEOPostTypePageInfo
  "When paginating backwards, the cursor to continue."
  startCursor: String
}

"Provides access to fields of the &quot;CommonFragments&quot; ACF Field Group via the &quot;commonFragments&quot; field"
interface WithAcfCommonFragments {
  "Fields of the CommonFragments ACF Field Group"
  commonFragments: CommonFragments
}

"Provides access to fields of the &quot;Content&quot; ACF Field Group via the &quot;content&quot; field"
interface WithAcfContent {
  "Fields of the Content ACF Field Group"
  content: Content
}

"Provides access to fields of the &quot;IndividualCourseData&quot; ACF Field Group via the &quot;individualCourseData&quot; field"
interface WithAcfIndividualCourseData {
  "Fields of the IndividualCourseData ACF Field Group"
  individualCourseData: IndividualCourseData
}

"Deprecated in favor of MenuItemLinkeable Interface"
union MenuItemObjectUnion = Category | Course | GeneralFragment | IndividualCourse | Page | Post | Tag

"Connection between the ContentPaymentFormCourses type and the ContentNode type"
type AcfContentNodeConnection implements Connection & ContentNodeConnection {
  "Edges for the AcfContentNodeConnection connection"
  edges: [AcfContentNodeConnectionEdge!]!
  "The nodes of the connection, without the edges"
  nodes: [ContentNode!]!
  "Information about pagination in a connection."
  pageInfo: AcfContentNodeConnectionPageInfo!
}

"An edge in a connection"
type AcfContentNodeConnectionEdge implements ContentNodeConnectionEdge & Edge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: ContentNode!
}

"Page Info on the &quot;AcfContentNodeConnection&quot;"
type AcfContentNodeConnectionPageInfo implements ContentNodeConnectionPageInfo & PageInfo & WPPageInfo {
  "When paginating forwards, the cursor to continue."
  endCursor: String
  "When paginating forwards, are there more items?"
  hasNextPage: Boolean!
  "When paginating backwards, are there more items?"
  hasPreviousPage: Boolean!
  "Raw schema for page"
  seo: SEOPostTypePageInfo
  "When paginating backwards, the cursor to continue."
  startCursor: String
}

"Connection between the IndividualCourseDataBackgroundDesktop type and the MediaItem type"
type AcfMediaItemConnectionEdge implements Edge & MediaItemConnectionEdge & OneToOneConnection {
  "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
  cursor: String
  "The node of the connection, without the edges"
  node: MediaItem!
}

"Avatars are profile images for users. WordPress by default uses the Gravatar service to host and fetch avatars from."
type Avatar {
  "URL for the default image or a default type. Accepts &#039;404&#039; (return a 404 instead of a default image), &#039;retro&#039; (8bit), &#039;monsterid&#039; (monster), &#039;wavatar&#039; (cartoon face), &#039;indenticon&#039; (the &#039;quilt&#039;), &#039;mystery&#039;, &#039;mm&#039;, or &#039;mysteryman&#039; (The Oyster Man), &#039;blank&#039; (transparent GIF), or &#039;gravatar_default&#039; (the Gravatar logo)."
  default: String
  "HTML attributes to insert in the IMG element. Is not sanitized."
  extraAttr: String
  "Whether to always show the default image, never the Gravatar."
  forceDefault: Boolean
  "Whether the avatar was successfully found."
  foundAvatar: Boolean
  "Height of the avatar image."
  height: Int
  "Whether the object is restricted from the current viewer"
  isRestricted: Boolean
  "What rating to display avatars up to. Accepts &#039;G&#039;, &#039;PG&#039;, &#039;R&#039;, &#039;X&#039;, and are judged in that order."
  rating: String
  "Type of url scheme to use. Typically HTTP vs. HTTPS."
  scheme: String
  "The size of the avatar in pixels. A value of 96 will match a 96px x 96px gravatar image."
  size: Int
  "URL for the gravatar image source."
  url: String
  "Width of the avatar image."
  width: Int
}

"The category type"
type Category implements DatabaseIdentifier & HierarchicalNode & HierarchicalTermNode & MenuItemLinkable & Node & TermNode & UniformResourceIdentifiable {
  "The ancestors of the node. Default ordered as lowest (closest to the child) to highest (closest to the root)."
  ancestors(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String,
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String,
    "The number of items to return after the referenced \"after\" cursor"
    first: Int,
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
  ): CategoryToAncestorsCategoryConnection
  "The id field matches the WP_Post-&gt;ID field."
  categoryId: Int @deprecated(reason: "Deprecated in favor of databaseId")
  "Connection between the category type and its children categories."
  children(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String,
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String,
    "The number of items to return after the referenced \"after\" cursor"
    first: Int,
    "The number of items to return before the referenced \"before\" cursor"
    last: Int,
    "Arguments for filtering the connection"
    where: CategoryToCategoryConnectionWhereArgs
  ): CategoryToCategoryConnection
  "Connection between the Category type and the ContentNode type"
  contentNodes(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String,
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String,
    "The number of items to return after the referenced \"after\" cursor"
    first: Int,
    "The number of items to return before the referenced \"before\" cursor"
    last: Int,
    "Arguments for filtering the connection"
    where: CategoryToContentNodeConnectionWhereArgs
  ): CategoryToContentNodeConnection
  "The number of objects connected to the object"
  count: Int
  "The unique identifier stored in the database"
  databaseId: Int!
  "The description of the object"
  description: String
  "Connection between the TermNode type and the EnqueuedScript type"
  enqueuedScripts(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String,
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String,
    "The number of items to return after the referenced \"after\" cursor"
    first: Int,
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
  ): TermNodeToEnqueuedScriptConnection
  "Connection between the TermNode type and the EnqueuedStylesheet type"
  enqueuedStylesheets(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String,
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String,
    "The number of items to return after the referenced \"after\" cursor"
    first: Int,
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
  ): TermNodeToEnqueuedStylesheetConnection
  "The globally unique ID for the object"
  id: ID!
  "Whether the node is a Content Node"
  isContentNode: Boolean!
  "Whether the object is restricted from the current viewer"
  isRestricted: Boolean
  "Whether the node is a Term"
  isTermNode: Boolean!
  "The link to the term"
  link: String
  "The human friendly name of the object."
  name: String
  "Connection between the category type and its parent category."
  parent: CategoryToParentCategoryConnectionEdge
  "Database id of the parent node"
  parentDatabaseId: Int
  "The globally unique identifier of the parent node."
  parentId: ID
  "Connection between the Category type and the post type"
  posts(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String,
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String,
    "The number of items to return after the referenced \"after\" cursor"
    first: Int,
    "The number of items to return before the referenced \"before\" cursor"
    last: Int,
    "Arguments for filtering the connection"
    where: CategoryToPostConnectionWhereArgs
  ): CategoryToPostConnection
  "The Yoast SEO data of the Рубрики taxonomy."
  seo: TaxonomySEO
  "An alphanumeric identifier for the object unique to its type."
  slug: String
  "Connection between the Category type and the Taxonomy type"
  taxonomy: CategoryToTaxonomyConnectionEdge
  "The name of the taxonomy that the object is associated with"
  taxonomyName: String
  "The ID of the term group that this term object belongs to"
  termGroupId: Int
  "The taxonomy ID that the object is associated with"
  termTaxonomyId: Int
  "The unique resource identifier path"
  uri: String
}

"Connection between the Category type and the category type"
type CategoryToAncestorsCategoryConnection implements CategoryConnection & Connection {
  "Edges for the CategoryToAncestorsCategoryConnection connection"
  edges: [CategoryToAncestorsCategoryConnectionEdge!]!
  "The nodes of the connection, without the edges"
  nodes: [Category!]!
  "Information about pagination in a connection."
  pageInfo: CategoryToAncestorsCategoryConnectionPageInfo!
}

"An edge in a connection"
type CategoryToAncestorsCategoryConnectionEdge implements CategoryConnectionEdge & Edge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: Category!
}

"Page Info on the &quot;CategoryToAncestorsCategoryConnection&quot;"
type CategoryToAncestorsCategoryConnectionPageInfo implements CategoryConnectionPageInfo & PageInfo & WPPageInfo {
  "When paginating forwards, the cursor to continue."
  endCursor: String
  "When paginating forwards, are there more items?"
  hasNextPage: Boolean!
  "When paginating backwards, are there more items?"
  hasPreviousPage: Boolean!
  "Raw schema for page"
  seo: SEOPostTypePageInfo
  "When paginating backwards, the cursor to continue."
  startCursor: String
}

"Connection between the Category type and the category type"
type CategoryToCategoryConnection implements CategoryConnection & Connection {
  "Edges for the CategoryToCategoryConnection connection"
  edges: [CategoryToCategoryConnectionEdge!]!
  "The nodes of the connection, without the edges"
  nodes: [Category!]!
  "Information about pagination in a connection."
  pageInfo: CategoryToCategoryConnectionPageInfo!
}

"An edge in a connection"
type CategoryToCategoryConnectionEdge implements CategoryConnectionEdge & Edge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: Category!
}

"Page Info on the &quot;CategoryToCategoryConnection&quot;"
type CategoryToCategoryConnectionPageInfo implements CategoryConnectionPageInfo & PageInfo & WPPageInfo {
  "When paginating forwards, the cursor to continue."
  endCursor: String
  "When paginating forwards, are there more items?"
  hasNextPage: Boolean!
  "When paginating backwards, are there more items?"
  hasPreviousPage: Boolean!
  "Raw schema for page"
  seo: SEOPostTypePageInfo
  "When paginating backwards, the cursor to continue."
  startCursor: String
}

"Connection between the Category type and the ContentNode type"
type CategoryToContentNodeConnection implements Connection & ContentNodeConnection {
  "Edges for the CategoryToContentNodeConnection connection"
  edges: [CategoryToContentNodeConnectionEdge!]!
  "The nodes of the connection, without the edges"
  nodes: [ContentNode!]!
  "Information about pagination in a connection."
  pageInfo: CategoryToContentNodeConnectionPageInfo!
}

"An edge in a connection"
type CategoryToContentNodeConnectionEdge implements ContentNodeConnectionEdge & Edge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: ContentNode!
}

"Page Info on the &quot;CategoryToContentNodeConnection&quot;"
type CategoryToContentNodeConnectionPageInfo implements ContentNodeConnectionPageInfo & PageInfo & WPPageInfo {
  "When paginating forwards, the cursor to continue."
  endCursor: String
  "When paginating forwards, are there more items?"
  hasNextPage: Boolean!
  "When paginating backwards, are there more items?"
  hasPreviousPage: Boolean!
  "Raw schema for page"
  seo: SEOPostTypePageInfo
  "When paginating backwards, the cursor to continue."
  startCursor: String
}

"Connection between the Category type and the category type"
type CategoryToParentCategoryConnectionEdge implements CategoryConnectionEdge & Edge & OneToOneConnection {
  "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
  cursor: String
  "The node of the connection, without the edges"
  node: Category!
}

"Connection between the Category type and the post type"
type CategoryToPostConnection implements Connection & PostConnection {
  "Edges for the CategoryToPostConnection connection"
  edges: [CategoryToPostConnectionEdge!]!
  "The nodes of the connection, without the edges"
  nodes: [Post!]!
  "Information about pagination in a connection."
  pageInfo: CategoryToPostConnectionPageInfo!
}

"An edge in a connection"
type CategoryToPostConnectionEdge implements Edge & PostConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: Post!
}

"Page Info on the &quot;CategoryToPostConnection&quot;"
type CategoryToPostConnectionPageInfo implements PageInfo & PostConnectionPageInfo & WPPageInfo {
  "When paginating forwards, the cursor to continue."
  endCursor: String
  "When paginating forwards, are there more items?"
  hasNextPage: Boolean!
  "When paginating backwards, are there more items?"
  hasPreviousPage: Boolean!
  "Raw schema for page"
  seo: SEOPostTypePageInfo
  "When paginating backwards, the cursor to continue."
  startCursor: String
}

"Connection between the Category type and the Taxonomy type"
type CategoryToTaxonomyConnectionEdge implements Edge & OneToOneConnection & TaxonomyConnectionEdge {
  "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
  cursor: String
  "The node of the connection, without the edges"
  node: Taxonomy!
}

"A Comment object"
type Comment implements DatabaseIdentifier & Node {
  "User agent used to post the comment. This field is equivalent to WP_Comment-&gt;comment_agent and the value matching the &quot;comment_agent&quot; column in SQL."
  agent: String
  "The approval status of the comment. This field is equivalent to WP_Comment-&gt;comment_approved and the value matching the &quot;comment_approved&quot; column in SQL."
  approved: Boolean @deprecated(reason: "Deprecated in favor of the `status` field")
  "The author of the comment"
  author: CommentToCommenterConnectionEdge
  "IP address for the author. This field is equivalent to WP_Comment-&gt;comment_author_IP and the value matching the &quot;comment_author_IP&quot; column in SQL."
  authorIp: String
  "ID for the comment, unique among comments."
  commentId: Int @deprecated(reason: "Deprecated in favor of databaseId")
  "Connection between the Comment type and the ContentNode type"
  commentedOn: CommentToContentNodeConnectionEdge
  "Content of the comment. This field is equivalent to WP_Comment-&gt;comment_content and the value matching the &quot;comment_content&quot; column in SQL."
  content(
    "Format of the field output"
    format: PostObjectFieldFormatEnum
  ): String
  "The unique identifier stored in the database"
  databaseId: Int!
  "Date the comment was posted in local time. This field is equivalent to WP_Comment-&gt;date and the value matching the &quot;date&quot; column in SQL."
  date: String
  "Date the comment was posted in GMT. This field is equivalent to WP_Comment-&gt;date_gmt and the value matching the &quot;date_gmt&quot; column in SQL."
  dateGmt: String
  "The globally unique identifier for the comment object"
  id: ID!
  "Whether the object is restricted from the current viewer"
  isRestricted: Boolean
  "Karma value for the comment. This field is equivalent to WP_Comment-&gt;comment_karma and the value matching the &quot;comment_karma&quot; column in SQL."
  karma: Int
  "Connection between the Comment type and the Comment type"
  parent(
    "Arguments for filtering the connection"
    where: CommentToParentCommentConnectionWhereArgs
  ): CommentToParentCommentConnectionEdge
  "The database id of the parent comment node or null if it is the root comment"
  parentDatabaseId: Int
  "The globally unique identifier of the parent comment node."
  parentId: ID
  "Connection between the Comment type and the Comment type"
  replies(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String,
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String,
    "The number of items to return after the referenced \"after\" cursor"
    first: Int,
    "The number of items to return before the referenced \"before\" cursor"
    last: Int,
    "Arguments for filtering the connection"
    where: CommentToCommentConnectionWhereArgs
  ): CommentToCommentConnection
  "The approval status of the comment. This field is equivalent to WP_Comment-&gt;comment_approved and the value matching the &quot;comment_approved&quot; column in SQL."
  status: CommentStatusEnum
  "Type of comment. This field is equivalent to WP_Comment-&gt;comment_type and the value matching the &quot;comment_type&quot; column in SQL."
  type: String
}

"A Comment Author object"
type CommentAuthor implements Commenter & DatabaseIdentifier & Node {
  "Avatar object for user. The avatar object can be retrieved in different sizes by specifying the size argument."
  avatar(
    "Whether to always show the default image, never the Gravatar. Default false"
    forceDefault: Boolean,
    "The rating level of the avatar."
    rating: AvatarRatingEnum,
    "The size attribute of the avatar field can be used to fetch avatars of different sizes. The value corresponds to the dimension in pixels to fetch. The default is 96 pixels."
    size: Int = 96
  ): Avatar
  "The unique identifier stored in the database"
  databaseId: Int!
  "The email for the comment author"
  email: String
  "The globally unique identifier for the comment author object"
  id: ID!
  "Whether the object is restricted from the current viewer"
  isRestricted: Boolean
  "The name for the comment author."
  name: String
  "The url the comment author."
  url: String
}

"Connection between the Comment type and the Comment type"
type CommentToCommentConnection implements CommentConnection & Connection {
  "Edges for the CommentToCommentConnection connection"
  edges: [CommentToCommentConnectionEdge!]!
  "The nodes of the connection, without the edges"
  nodes: [Comment!]!
  "Information about pagination in a connection."
  pageInfo: CommentToCommentConnectionPageInfo!
}

"An edge in a connection"
type CommentToCommentConnectionEdge implements CommentConnectionEdge & Edge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: Comment!
}

"Page Info on the &quot;CommentToCommentConnection&quot;"
type CommentToCommentConnectionPageInfo implements CommentConnectionPageInfo & PageInfo & WPPageInfo {
  "When paginating forwards, the cursor to continue."
  endCursor: String
  "When paginating forwards, are there more items?"
  hasNextPage: Boolean!
  "When paginating backwards, are there more items?"
  hasPreviousPage: Boolean!
  "Raw schema for page"
  seo: SEOPostTypePageInfo
  "When paginating backwards, the cursor to continue."
  startCursor: String
}

"Connection between the Comment type and the Commenter type"
type CommentToCommenterConnectionEdge implements CommenterConnectionEdge & Edge & OneToOneConnection {
  "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
  cursor: String
  "The node of the connection, without the edges"
  node: Commenter!
}

"Connection between the Comment type and the ContentNode type"
type CommentToContentNodeConnectionEdge implements ContentNodeConnectionEdge & Edge & OneToOneConnection {
  "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
  cursor: String
  "The node of the connection, without the edges"
  node: ContentNode!
}

"Connection between the Comment type and the Comment type"
type CommentToParentCommentConnectionEdge implements CommentConnectionEdge & Edge & OneToOneConnection {
  "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
  cursor: String
  "The node of the connection, without the edges"
  node: Comment!
}

"The &quot;CommonFragments&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;."
type CommonFragments implements AcfFieldGroup & AcfFieldGroupFields & CommonFragments_Fields {
  "Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;CommonFragments&quot; Field Group"
  contacts: CommonFragmentsContacts
  "Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;CommonFragments&quot; Field Group"
  cta: CommonFragmentsCta
  "Field of the &quot;repeater&quot; Field Type added to the schema as part of the &quot;CommonFragments&quot; Field Group"
  faq: [CommonFragmentsFaq]
  "The name of the field group"
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
  "Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;CommonFragments&quot; Field Group"
  footer: CommonFragmentsFooter
  "Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;CommonFragments&quot; Field Group"
  header: CommonFragmentsHeader
  "Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;CommonFragments&quot; Field Group"
  paymentForm: CommonFragmentsPaymentForm
  "Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;CommonFragments&quot; Field Group"
  privacyPolicy: CommonFragmentsPrivacyPolicy
  "Field of the &quot;repeater&quot; Field Type added to the schema as part of the &quot;CommonFragments&quot; Field Group"
  process: [CommonFragmentsProcess]
  "Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;CommonFragments&quot; Field Group"
  teacher: CommonFragmentsTeacher
}

"The &quot;CommonFragmentsContacts&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;."
type CommonFragmentsContacts implements AcfFieldGroup & AcfFieldGroupFields & CommonFragmentsContacts_Fields {
  "Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;CommonFragmentsContacts&quot; Field Group"
  background: CommonFragmentsContactsBackground
  "The name of the field group"
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
  "Field of the &quot;repeater&quot; Field Type added to the schema as part of the &quot;CommonFragmentsContacts&quot; Field Group"
  socials: [CommonFragmentsContactsSocials]
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;CommonFragmentsContacts&quot; Field Group"
  title: String
}

"The &quot;CommonFragmentsContactsBackground&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;."
type CommonFragmentsContactsBackground implements AcfFieldGroup & AcfFieldGroupFields & CommonFragmentsContactsBackground_Fields {
  "Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;CommonFragmentsContactsBackground&quot; Field Group"
  desktop: AcfMediaItemConnectionEdge
  "The name of the field group"
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
  "Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;CommonFragmentsContactsBackground&quot; Field Group"
  mobile: AcfMediaItemConnectionEdge
}

"The &quot;CommonFragmentsContactsSocials&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;."
type CommonFragmentsContactsSocials implements AcfFieldGroup & AcfFieldGroupFields & CommonFragmentsContactsSocials_Fields {
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;CommonFragmentsContactsSocials&quot; Field Group"
  content: String
  "The name of the field group"
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;CommonFragmentsContactsSocials&quot; Field Group"
  link: String
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;CommonFragmentsContactsSocials&quot; Field Group"
  title: String
}

"The &quot;CommonFragmentsCta&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;."
type CommonFragmentsCta implements AcfFieldGroup & AcfFieldGroupFields & CommonFragmentsCta_Fields {
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;CommonFragmentsCta&quot; Field Group"
  button: String
  "The name of the field group"
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
  "Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;CommonFragmentsCta&quot; Field Group"
  text: CommonFragmentsCtaText
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;CommonFragmentsCta&quot; Field Group"
  title: String
}

"The &quot;CommonFragmentsCtaText&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;."
type CommonFragmentsCtaText implements AcfFieldGroup & AcfFieldGroupFields & CommonFragmentsCtaText_Fields {
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;CommonFragmentsCtaText&quot; Field Group"
  accent: String
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;CommonFragmentsCtaText&quot; Field Group"
  afterAccent: String
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;CommonFragmentsCtaText&quot; Field Group"
  beforeAccent: String
  "The name of the field group"
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
}

"The &quot;CommonFragmentsFaq&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;."
type CommonFragmentsFaq implements AcfFieldGroup & AcfFieldGroupFields & CommonFragmentsFaq_Fields {
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;CommonFragmentsFaq&quot; Field Group"
  answer: String
  "The name of the field group"
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;CommonFragmentsFaq&quot; Field Group"
  question: String
}

"The &quot;CommonFragmentsFooter&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;."
type CommonFragmentsFooter implements AcfFieldGroup & AcfFieldGroupFields & CommonFragmentsFooter_Fields {
  "Field of the &quot;repeater&quot; Field Type added to the schema as part of the &quot;CommonFragmentsFooter&quot; Field Group"
  courses: [CommonFragmentsFooterCourses]
  "Field of the &quot;email&quot; Field Type added to the schema as part of the &quot;CommonFragmentsFooter&quot; Field Group"
  email: String
  "The name of the field group"
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
  "Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;CommonFragmentsFooter&quot; Field Group"
  logo: AcfMediaItemConnectionEdge
  "Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;CommonFragmentsFooter&quot; Field Group"
  privacyPolicy: CommonFragmentsFooterPrivacyPolicy
  "Field of the &quot;repeater&quot; Field Type added to the schema as part of the &quot;CommonFragmentsFooter&quot; Field Group"
  socials: [CommonFragmentsFooterSocials]
}

"The &quot;CommonFragmentsFooterCourses&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;."
type CommonFragmentsFooterCourses implements AcfFieldGroup & AcfFieldGroupFields & CommonFragmentsFooterCourses_Fields {
  "The name of the field group"
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;CommonFragmentsFooterCourses&quot; Field Group"
  path: String
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;CommonFragmentsFooterCourses&quot; Field Group"
  title: String
}

"The &quot;CommonFragmentsFooterPrivacyPolicy&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;."
type CommonFragmentsFooterPrivacyPolicy implements AcfFieldGroup & AcfFieldGroupFields & CommonFragmentsFooterPrivacyPolicy_Fields {
  "The name of the field group"
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;CommonFragmentsFooterPrivacyPolicy&quot; Field Group"
  path: String
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;CommonFragmentsFooterPrivacyPolicy&quot; Field Group"
  title: String
}

"The &quot;CommonFragmentsFooterSocials&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;."
type CommonFragmentsFooterSocials implements AcfFieldGroup & AcfFieldGroupFields & CommonFragmentsFooterSocials_Fields {
  "The name of the field group"
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;CommonFragmentsFooterSocials&quot; Field Group"
  link: String
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;CommonFragmentsFooterSocials&quot; Field Group"
  title: String
}

"The &quot;CommonFragmentsHeader&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;."
type CommonFragmentsHeader implements AcfFieldGroup & AcfFieldGroupFields & CommonFragmentsHeader_Fields {
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;CommonFragmentsHeader&quot; Field Group"
  ctaButton: String
  "Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;CommonFragmentsHeader&quot; Field Group"
  dropdownList: CommonFragmentsHeaderDropdownList
  "The name of the field group"
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
  "Field of the &quot;repeater&quot; Field Type added to the schema as part of the &quot;CommonFragmentsHeader&quot; Field Group"
  links: [CommonFragmentsHeaderLinks]
  "Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;CommonFragmentsHeader&quot; Field Group"
  logo: AcfMediaItemConnectionEdge
}

"The &quot;CommonFragmentsHeaderDropdownList&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;."
type CommonFragmentsHeaderDropdownList implements AcfFieldGroup & AcfFieldGroupFields & CommonFragmentsHeaderDropdownList_Fields {
  "The name of the field group"
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
  "Field of the &quot;repeater&quot; Field Type added to the schema as part of the &quot;CommonFragmentsHeaderDropdownList&quot; Field Group"
  items: [CommonFragmentsHeaderDropdownListItems]
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;CommonFragmentsHeaderDropdownList&quot; Field Group"
  title: String
}

"The &quot;CommonFragmentsHeaderDropdownListItems&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;."
type CommonFragmentsHeaderDropdownListItems implements AcfFieldGroup & AcfFieldGroupFields & CommonFragmentsHeaderDropdownListItems_Fields {
  "The name of the field group"
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;CommonFragmentsHeaderDropdownListItems&quot; Field Group"
  level: String
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;CommonFragmentsHeaderDropdownListItems&quot; Field Group"
  path: String
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;CommonFragmentsHeaderDropdownListItems&quot; Field Group"
  title: String
}

"The &quot;CommonFragmentsHeaderLinks&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;."
type CommonFragmentsHeaderLinks implements AcfFieldGroup & AcfFieldGroupFields & CommonFragmentsHeaderLinks_Fields {
  "The name of the field group"
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;CommonFragmentsHeaderLinks&quot; Field Group"
  path: String
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;CommonFragmentsHeaderLinks&quot; Field Group"
  title: String
}

"The &quot;CommonFragmentsPaymentForm&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;."
type CommonFragmentsPaymentForm implements AcfFieldGroup & AcfFieldGroupFields & CommonFragmentsPaymentForm_Fields {
  "The name of the field group"
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;CommonFragmentsPaymentForm&quot; Field Group"
  placeholder: String
}

"The &quot;CommonFragmentsPrivacyPolicy&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;."
type CommonFragmentsPrivacyPolicy implements AcfFieldGroup & AcfFieldGroupFields & CommonFragmentsPrivacyPolicy_Fields {
  "Field of the &quot;repeater&quot; Field Type added to the schema as part of the &quot;CommonFragmentsPrivacyPolicy&quot; Field Group"
  content: [CommonFragmentsPrivacyPolicyContent]
  "The name of the field group"
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;CommonFragmentsPrivacyPolicy&quot; Field Group"
  title: String
}

"The &quot;CommonFragmentsPrivacyPolicyContent&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;."
type CommonFragmentsPrivacyPolicyContent implements AcfFieldGroup & AcfFieldGroupFields & CommonFragmentsPrivacyPolicyContent_Fields {
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;CommonFragmentsPrivacyPolicyContent&quot; Field Group"
  description: String
  "The name of the field group"
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;CommonFragmentsPrivacyPolicyContent&quot; Field Group"
  title: String
}

"The &quot;CommonFragmentsProcess&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;."
type CommonFragmentsProcess implements AcfFieldGroup & AcfFieldGroupFields & CommonFragmentsProcess_Fields {
  "The name of the field group"
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
  "Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;CommonFragmentsProcess&quot; Field Group"
  picture: CommonFragmentsProcessPicture
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;CommonFragmentsProcess&quot; Field Group"
  text: String
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;CommonFragmentsProcess&quot; Field Group"
  title: String
}

"The &quot;CommonFragmentsProcessPicture&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;."
type CommonFragmentsProcessPicture implements AcfFieldGroup & AcfFieldGroupFields & CommonFragmentsProcessPicture_Fields {
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;CommonFragmentsProcessPicture&quot; Field Group"
  alt: String
  "The name of the field group"
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
  "Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;CommonFragmentsProcessPicture&quot; Field Group"
  image: AcfMediaItemConnectionEdge
}

"The &quot;CommonFragmentsTeacher&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;."
type CommonFragmentsTeacher implements AcfFieldGroup & AcfFieldGroupFields & CommonFragmentsTeacher_Fields {
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;CommonFragmentsTeacher&quot; Field Group"
  description: String
  "Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;CommonFragmentsTeacher&quot; Field Group"
  education: CommonFragmentsTeacherEducation
  "Field of the &quot;repeater&quot; Field Type added to the schema as part of the &quot;CommonFragmentsTeacher&quot; Field Group"
  experience: [CommonFragmentsTeacherExperience]
  "The name of the field group"
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
  "Field of the &quot;repeater&quot; Field Type added to the schema as part of the &quot;CommonFragmentsTeacher&quot; Field Group"
  gallery: [CommonFragmentsTeacherGallery]
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;CommonFragmentsTeacher&quot; Field Group"
  subtitle: String
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;CommonFragmentsTeacher&quot; Field Group"
  title: String
}

"The &quot;CommonFragmentsTeacherEducation&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;."
type CommonFragmentsTeacherEducation implements AcfFieldGroup & AcfFieldGroupFields & CommonFragmentsTeacherEducation_Fields {
  "The name of the field group"
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
  "Field of the &quot;repeater&quot; Field Type added to the schema as part of the &quot;CommonFragmentsTeacherEducation&quot; Field Group"
  list: [CommonFragmentsTeacherEducationList]
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;CommonFragmentsTeacherEducation&quot; Field Group"
  title: String
}

"The &quot;CommonFragmentsTeacherEducationList&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;."
type CommonFragmentsTeacherEducationList implements AcfFieldGroup & AcfFieldGroupFields & CommonFragmentsTeacherEducationList_Fields {
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;CommonFragmentsTeacherEducationList&quot; Field Group"
  element: String
  "The name of the field group"
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
}

"The &quot;CommonFragmentsTeacherExperience&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;."
type CommonFragmentsTeacherExperience implements AcfFieldGroup & AcfFieldGroupFields & CommonFragmentsTeacherExperience_Fields {
  "The name of the field group"
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
  "Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;CommonFragmentsTeacherExperience&quot; Field Group"
  number: Float
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;CommonFragmentsTeacherExperience&quot; Field Group"
  text: String
}

"The &quot;CommonFragmentsTeacherGallery&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;."
type CommonFragmentsTeacherGallery implements AcfFieldGroup & AcfFieldGroupFields & CommonFragmentsTeacherGallery_Fields {
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;CommonFragmentsTeacherGallery&quot; Field Group"
  alt: String
  "The name of the field group"
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
  "Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;CommonFragmentsTeacherGallery&quot; Field Group"
  image: AcfMediaItemConnectionEdge
}

"The &quot;Content&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;."
type Content implements AcfFieldGroup & AcfFieldGroupFields & Content_Fields {
  "Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;Content&quot; Field Group"
  background: ContentBackground
  "Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;Content&quot; Field Group"
  cta: ContentCta
  "Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;Content&quot; Field Group"
  details: ContentDetails
  "The name of the field group"
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
  "Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;Content&quot; Field Group"
  hero: ContentHero
  "Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;Content&quot; Field Group"
  paymentForm: ContentPaymentForm
  "Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;Content&quot; Field Group"
  price: ContentPrice
}

"The &quot;ContentBackground&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;."
type ContentBackground implements AcfFieldGroup & AcfFieldGroupFields & ContentBackground_Fields {
  "Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;ContentBackground&quot; Field Group"
  desktop: ContentBackgroundDesktop
  "The name of the field group"
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
  "Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;ContentBackground&quot; Field Group"
  mobile: ContentBackgroundMobile
}

"The &quot;ContentBackgroundDesktop&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;."
type ContentBackgroundDesktop implements AcfFieldGroup & AcfFieldGroupFields & ContentBackgroundDesktop_Fields {
  "The name of the field group"
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
  "Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;ContentBackgroundDesktop&quot; Field Group"
  footer: AcfMediaItemConnectionEdge
  "Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;ContentBackgroundDesktop&quot; Field Group"
  hero: AcfMediaItemConnectionEdge
  "Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;ContentBackgroundDesktop&quot; Field Group"
  teacher: AcfMediaItemConnectionEdge
}

"The &quot;ContentBackgroundMobile&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;."
type ContentBackgroundMobile implements AcfFieldGroup & AcfFieldGroupFields & ContentBackgroundMobile_Fields {
  "The name of the field group"
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
  "Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;ContentBackgroundMobile&quot; Field Group"
  footer: AcfMediaItemConnectionEdge
  "Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;ContentBackgroundMobile&quot; Field Group"
  hero: AcfMediaItemConnectionEdge
  "Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;ContentBackgroundMobile&quot; Field Group"
  teacher: AcfMediaItemConnectionEdge
}

"The &quot;ContentCta&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;."
type ContentCta implements AcfFieldGroup & AcfFieldGroupFields & ContentCta_Fields {
  "The name of the field group"
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;ContentCta&quot; Field Group"
  subtitle: String
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;ContentCta&quot; Field Group"
  title: String
}

"The &quot;ContentDetails&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;."
type ContentDetails implements AcfFieldGroup & AcfFieldGroupFields & ContentDetails_Fields {
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;ContentDetails&quot; Field Group"
  description: String
  "The name of the field group"
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
  "Field of the &quot;repeater&quot; Field Type added to the schema as part of the &quot;ContentDetails&quot; Field Group"
  levels: [ContentDetailsLevels]
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;ContentDetails&quot; Field Group"
  title: String
}

"The &quot;ContentDetailsLevels&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;."
type ContentDetailsLevels implements AcfFieldGroup & AcfFieldGroupFields & ContentDetailsLevels_Fields {
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;ContentDetailsLevels&quot; Field Group"
  content: String
  "The name of the field group"
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
  "Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;ContentDetailsLevels&quot; Field Group"
  lengthOfCourseInMonths: Float
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;ContentDetailsLevels&quot; Field Group"
  level: String
  "Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;ContentDetailsLevels&quot; Field Group"
  liveTrainingsNumber: Float
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;ContentDetailsLevels&quot; Field Group"
  target: String
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;ContentDetailsLevels&quot; Field Group"
  tooltip: String
  "Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;ContentDetailsLevels&quot; Field Group"
  videoTrainingsNumber: Float
}

"The &quot;ContentHero&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;."
type ContentHero implements AcfFieldGroup & AcfFieldGroupFields & ContentHero_Fields {
  "Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;ContentHero&quot; Field Group"
  cta: ContentHeroCta
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;ContentHero&quot; Field Group"
  description: String
  "The name of the field group"
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
  "Running line"
  runningLine: String
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;ContentHero&quot; Field Group"
  title: String
}

"The &quot;ContentHeroCta&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;."
type ContentHeroCta implements AcfFieldGroup & AcfFieldGroupFields & ContentHeroCta_Fields {
  "The name of the field group"
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
  "Field of the &quot;repeater&quot; Field Type added to the schema as part of the &quot;ContentHeroCta&quot; Field Group"
  tagsCloud: [ContentHeroCtaTagsCloud]
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;ContentHeroCta&quot; Field Group"
  title: String
}

"The &quot;ContentHeroCtaTagsCloud&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;."
type ContentHeroCtaTagsCloud implements AcfFieldGroup & AcfFieldGroupFields & ContentHeroCtaTagsCloud_Fields {
  "The name of the field group"
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;ContentHeroCtaTagsCloud&quot; Field Group"
  tag: String
}

"Connection between the ContentNode type and the ContentType type"
type ContentNodeToContentTypeConnectionEdge implements ContentTypeConnectionEdge & Edge & OneToOneConnection {
  "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
  cursor: String
  "The node of the connection, without the edges"
  node: ContentType!
}

"Connection between the ContentNode type and the User type"
type ContentNodeToEditLastConnectionEdge implements Edge & OneToOneConnection & UserConnectionEdge {
  "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
  cursor: String
  "The node of the connection, without the edges"
  node: User!
}

"Connection between the ContentNode type and the User type"
type ContentNodeToEditLockConnectionEdge implements Edge & OneToOneConnection & UserConnectionEdge {
  "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
  cursor: String
  "The timestamp for when the node was last edited"
  lockTimestamp: String
  "The node of the connection, without the edges"
  node: User!
}

"Connection between the ContentNode type and the EnqueuedScript type"
type ContentNodeToEnqueuedScriptConnection implements Connection & EnqueuedScriptConnection {
  "Edges for the ContentNodeToEnqueuedScriptConnection connection"
  edges: [ContentNodeToEnqueuedScriptConnectionEdge!]!
  "The nodes of the connection, without the edges"
  nodes: [EnqueuedScript!]!
  "Information about pagination in a connection."
  pageInfo: ContentNodeToEnqueuedScriptConnectionPageInfo!
}

"An edge in a connection"
type ContentNodeToEnqueuedScriptConnectionEdge implements Edge & EnqueuedScriptConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: EnqueuedScript!
}

"Page Info on the &quot;ContentNodeToEnqueuedScriptConnection&quot;"
type ContentNodeToEnqueuedScriptConnectionPageInfo implements EnqueuedScriptConnectionPageInfo & PageInfo & WPPageInfo {
  "When paginating forwards, the cursor to continue."
  endCursor: String
  "When paginating forwards, are there more items?"
  hasNextPage: Boolean!
  "When paginating backwards, are there more items?"
  hasPreviousPage: Boolean!
  "Raw schema for page"
  seo: SEOPostTypePageInfo
  "When paginating backwards, the cursor to continue."
  startCursor: String
}

"Connection between the ContentNode type and the EnqueuedStylesheet type"
type ContentNodeToEnqueuedStylesheetConnection implements Connection & EnqueuedStylesheetConnection {
  "Edges for the ContentNodeToEnqueuedStylesheetConnection connection"
  edges: [ContentNodeToEnqueuedStylesheetConnectionEdge!]!
  "The nodes of the connection, without the edges"
  nodes: [EnqueuedStylesheet!]!
  "Information about pagination in a connection."
  pageInfo: ContentNodeToEnqueuedStylesheetConnectionPageInfo!
}

"An edge in a connection"
type ContentNodeToEnqueuedStylesheetConnectionEdge implements Edge & EnqueuedStylesheetConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: EnqueuedStylesheet!
}

"Page Info on the &quot;ContentNodeToEnqueuedStylesheetConnection&quot;"
type ContentNodeToEnqueuedStylesheetConnectionPageInfo implements EnqueuedStylesheetConnectionPageInfo & PageInfo & WPPageInfo {
  "When paginating forwards, the cursor to continue."
  endCursor: String
  "When paginating forwards, are there more items?"
  hasNextPage: Boolean!
  "When paginating backwards, are there more items?"
  hasPreviousPage: Boolean!
  "Raw schema for page"
  seo: SEOPostTypePageInfo
  "When paginating backwards, the cursor to continue."
  startCursor: String
}

"The &quot;ContentPaymentForm&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;."
type ContentPaymentForm implements AcfFieldGroup & AcfFieldGroupFields & ContentPaymentForm_Fields {
  "Field of the &quot;repeater&quot; Field Type added to the schema as part of the &quot;ContentPaymentForm&quot; Field Group"
  courses: [ContentPaymentFormCourses]
  "The name of the field group"
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
  "Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;ContentPaymentForm&quot; Field Group"
  paymentType: ContentPaymentFormPaymentType
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;ContentPaymentForm&quot; Field Group"
  title: String
}

"The &quot;ContentPaymentFormCourses&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;."
type ContentPaymentFormCourses implements AcfFieldGroup & AcfFieldGroupFields & ContentPaymentFormCourses_Fields {
  "Field of the &quot;post_object&quot; Field Type added to the schema as part of the &quot;ContentPaymentFormCourses&quot; Field Group"
  course(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String,
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String,
    "The number of items to return after the referenced \"after\" cursor"
    first: Int,
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
  ): AcfContentNodeConnection
  "The name of the field group"
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
}

"The &quot;ContentPaymentFormPaymentType&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;."
type ContentPaymentFormPaymentType implements AcfFieldGroup & AcfFieldGroupFields & ContentPaymentFormPaymentType_Fields {
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;ContentPaymentFormPaymentType&quot; Field Group"
  benefit: String
  "The name of the field group"
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;ContentPaymentFormPaymentType&quot; Field Group"
  installment: String
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;ContentPaymentFormPaymentType&quot; Field Group"
  oneTime: String
}

"The &quot;ContentPrice&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;."
type ContentPrice implements AcfFieldGroup & AcfFieldGroupFields & ContentPrice_Fields {
  "Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;ContentPrice&quot; Field Group"
  details: ContentPriceDetails
  "Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;ContentPrice&quot; Field Group"
  discount: Float
  "The name of the field group"
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
  "Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;ContentPrice&quot; Field Group"
  priceFull: Float
  "Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;ContentPrice&quot; Field Group"
  priceMonthly: Float
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;ContentPrice&quot; Field Group"
  title: String
}

"The &quot;ContentPriceDetails&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;."
type ContentPriceDetails implements AcfFieldGroup & AcfFieldGroupFields & ContentPriceDetails_Fields {
  "The name of the field group"
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
  "Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;ContentPriceDetails&quot; Field Group"
  levelsNumber: Float
  "Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;ContentPriceDetails&quot; Field Group"
  monthsNumber: Float
  "Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;ContentPriceDetails&quot; Field Group"
  videoTrainingsNumber: Float
}

"An Post Type object"
type ContentType implements Node & UniformResourceIdentifiable {
  "Whether this content type should can be exported."
  canExport: Boolean
  "Connection between the ContentType type and the Taxonomy type"
  connectedTaxonomies(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String,
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String,
    "The number of items to return after the referenced \"after\" cursor"
    first: Int,
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
  ): ContentTypeToTaxonomyConnection
  "Connection between the ContentType type and the ContentNode type"
  contentNodes(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String,
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String,
    "The number of items to return after the referenced \"after\" cursor"
    first: Int,
    "The number of items to return before the referenced \"before\" cursor"
    last: Int,
    "Arguments for filtering the connection"
    where: ContentTypeToContentNodeConnectionWhereArgs
  ): ContentTypeToContentNodeConnection
  "Whether content of this type should be deleted when the author of it is deleted from the system."
  deleteWithUser: Boolean
  "Description of the content type."
  description: String
  "Whether to exclude nodes of this content type from front end search results."
  excludeFromSearch: Boolean
  "The plural name of the content type within the GraphQL Schema."
  graphqlPluralName: String
  "The singular name of the content type within the GraphQL Schema."
  graphqlSingleName: String
  "Whether this content type should have archives. Content archives are generated by type and by date."
  hasArchive: Boolean
  "Whether the content type is hierarchical, for example pages."
  hierarchical: Boolean
  "The globally unique identifier of the post-type object."
  id: ID!
  "Whether the node is a Content Node"
  isContentNode: Boolean!
  "Whether this page is set to the static front page."
  isFrontPage: Boolean!
  "Whether this page is set to the blog posts page."
  isPostsPage: Boolean!
  "Whether the object is restricted from the current viewer"
  isRestricted: Boolean
  "Whether the node is a Term"
  isTermNode: Boolean!
  "Display name of the content type."
  label: String
  "Details about the content type labels."
  labels: PostTypeLabelDetails
  "The name of the icon file to display as a menu icon."
  menuIcon: String
  "The position of this post type in the menu. Only applies if show_in_menu is true."
  menuPosition: Int
  "The internal name of the post type. This should not be used for display purposes."
  name: String
  "Whether a content type is intended for use publicly either via the admin interface or by front-end users. While the default settings of exclude_from_search, publicly_queryable, show_ui, and show_in_nav_menus are inherited from public, each does not rely on this relationship and controls a very specific intention."
  public: Boolean
  "Whether queries can be performed on the front end for the content type as part of parse_request()."
  publiclyQueryable: Boolean
  "Name of content type to display in REST API &quot;wp/v2&quot; namespace."
  restBase: String
  "The REST Controller class assigned to handling this content type."
  restControllerClass: String
  "Makes this content type available via the admin bar."
  showInAdminBar: Boolean
  "Whether to add the content type to the GraphQL Schema."
  showInGraphql: Boolean
  "Where to show the content type in the admin menu. To work, $show_ui must be true. If true, the post type is shown in its own top level menu. If false, no menu is shown. If a string of an existing top level menu (eg. &quot;tools.php&quot; or &quot;edit.php?post_type=page&quot;), the post type will be placed as a sub-menu of that."
  showInMenu: Boolean
  "Makes this content type available for selection in navigation menus."
  showInNavMenus: Boolean
  "Whether the content type is associated with a route under the the REST API &quot;wp/v2&quot; namespace."
  showInRest: Boolean
  "Whether to generate and allow a UI for managing this content type in the admin."
  showUi: Boolean
  "The unique resource identifier path"
  uri: String
}

"Connection between the ContentType type and the ContentNode type"
type ContentTypeToContentNodeConnection implements Connection & ContentNodeConnection {
  "Edges for the ContentTypeToContentNodeConnection connection"
  edges: [ContentTypeToContentNodeConnectionEdge!]!
  "The nodes of the connection, without the edges"
  nodes: [ContentNode!]!
  "Information about pagination in a connection."
  pageInfo: ContentTypeToContentNodeConnectionPageInfo!
}

"An edge in a connection"
type ContentTypeToContentNodeConnectionEdge implements ContentNodeConnectionEdge & Edge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: ContentNode!
}

"Page Info on the &quot;ContentTypeToContentNodeConnection&quot;"
type ContentTypeToContentNodeConnectionPageInfo implements ContentNodeConnectionPageInfo & PageInfo & WPPageInfo {
  "When paginating forwards, the cursor to continue."
  endCursor: String
  "When paginating forwards, are there more items?"
  hasNextPage: Boolean!
  "When paginating backwards, are there more items?"
  hasPreviousPage: Boolean!
  "Raw schema for page"
  seo: SEOPostTypePageInfo
  "When paginating backwards, the cursor to continue."
  startCursor: String
}

"Connection between the ContentType type and the Taxonomy type"
type ContentTypeToTaxonomyConnection implements Connection & TaxonomyConnection {
  "Edges for the ContentTypeToTaxonomyConnection connection"
  edges: [ContentTypeToTaxonomyConnectionEdge!]!
  "The nodes of the connection, without the edges"
  nodes: [Taxonomy!]!
  "Information about pagination in a connection."
  pageInfo: ContentTypeToTaxonomyConnectionPageInfo!
}

"An edge in a connection"
type ContentTypeToTaxonomyConnectionEdge implements Edge & TaxonomyConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: Taxonomy!
}

"Page Info on the &quot;ContentTypeToTaxonomyConnection&quot;"
type ContentTypeToTaxonomyConnectionPageInfo implements PageInfo & TaxonomyConnectionPageInfo & WPPageInfo {
  "When paginating forwards, the cursor to continue."
  endCursor: String
  "When paginating forwards, are there more items?"
  hasNextPage: Boolean!
  "When paginating backwards, are there more items?"
  hasPreviousPage: Boolean!
  "Raw schema for page"
  seo: SEOPostTypePageInfo
  "When paginating backwards, the cursor to continue."
  startCursor: String
}

"The course type"
type Course implements ContentNode & DatabaseIdentifier & HierarchicalContentNode & HierarchicalNode & MenuItemLinkable & Node & NodeWithContentEditor & NodeWithFeaturedImage & NodeWithTemplate & NodeWithTitle & Previewable & UniformResourceIdentifiable & WithAcfContent {
  "Returns ancestors of the node. Default ordered as lowest (closest to the child) to highest (closest to the root)."
  ancestors(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String,
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String,
    "The number of items to return after the referenced \"after\" cursor"
    first: Int,
    "The number of items to return before the referenced \"before\" cursor"
    last: Int,
    "Arguments for filtering the connection"
    where: HierarchicalContentNodeToContentNodeAncestorsConnectionWhereArgs
  ): HierarchicalContentNodeToContentNodeAncestorsConnection
  "Connection between the HierarchicalContentNode type and the ContentNode type"
  children(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String,
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String,
    "The number of items to return after the referenced \"after\" cursor"
    first: Int,
    "The number of items to return before the referenced \"before\" cursor"
    last: Int,
    "Arguments for filtering the connection"
    where: HierarchicalContentNodeToContentNodeChildrenConnectionWhereArgs
  ): HierarchicalContentNodeToContentNodeChildrenConnection
  "Fields of the Content ACF Field Group"
  content: Content
  "Connection between the ContentNode type and the ContentType type"
  contentType: ContentNodeToContentTypeConnectionEdge
  "The name of the Content Type the node belongs to"
  contentTypeName: String!
  "The id field matches the WP_Post-&gt;ID field."
  courseId: Int! @deprecated(reason: "Deprecated in favor of the databaseId field")
  "The unique identifier stored in the database"
  databaseId: Int!
  "Post publishing date."
  date: String
  "The publishing date set in GMT."
  dateGmt: String
  "The desired slug of the post"
  desiredSlug: String
  "If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds"
  editingLockedBy: ContentNodeToEditLockConnectionEdge
  "The RSS enclosure for the object"
  enclosure: String
  "Connection between the ContentNode type and the EnqueuedScript type"
  enqueuedScripts(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String,
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String,
    "The number of items to return after the referenced \"after\" cursor"
    first: Int,
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
  ): ContentNodeToEnqueuedScriptConnection
  "Connection between the ContentNode type and the EnqueuedStylesheet type"
  enqueuedStylesheets(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String,
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String,
    "The number of items to return after the referenced \"after\" cursor"
    first: Int,
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
  ): ContentNodeToEnqueuedStylesheetConnection
  "Connection between the NodeWithFeaturedImage type and the MediaItem type"
  featuredImage: NodeWithFeaturedImageToMediaItemConnectionEdge
  "The database identifier for the featured image node assigned to the content node"
  featuredImageDatabaseId: Int
  "Globally unique ID of the featured image assigned to the node"
  featuredImageId: ID
  "The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table."
  guid: String
  "The globally unique identifier of the course object."
  id: ID!
  "Whether the node is a Content Node"
  isContentNode: Boolean!
  "Whether the object is a node in the preview state"
  isPreview: Boolean
  "Whether the object is restricted from the current viewer"
  isRestricted: Boolean
  "Whether the node is a Term"
  isTermNode: Boolean!
  "The user that most recently edited the node"
  lastEditedBy: ContentNodeToEditLastConnectionEdge
  "The permalink of the post"
  link: String
  "The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time."
  modified: String
  "The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT."
  modifiedGmt: String
  "The parent of the node. The parent object can be of various types"
  parent: HierarchicalContentNodeToParentContentNodeConnectionEdge
  "Database id of the parent node"
  parentDatabaseId: Int
  "The globally unique identifier of the parent node."
  parentId: ID
  "Connection between the Course type and the course type"
  preview: CourseToPreviewConnectionEdge
  "The database id of the preview node"
  previewRevisionDatabaseId: Int
  "Whether the object is a node in the preview state"
  previewRevisionId: ID
  "The Yoast SEO data of the ContentNode"
  seo: PostTypeSEO
  "The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table."
  slug: String
  "The current status of the object"
  status: String
  "The template assigned to a node of content"
  template: ContentTemplate
  "The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made."
  title(
    "Format of the field output"
    format: PostObjectFieldFormatEnum
  ): String
  "The unique resource identifier path"
  uri: String
}

"Connection between the Course type and the course type"
type CourseToPreviewConnectionEdge implements CourseConnectionEdge & Edge & OneToOneConnection {
  "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
  cursor: String
  "The node of the connection, without the edges"
  node: Course!
}

"The payload for the createCategory mutation."
type CreateCategoryPayload {
  "The created category"
  category: Category
  "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
}

"The payload for the createComment mutation."
type CreateCommentPayload {
  "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The comment that was created"
  comment: Comment
  "Whether the mutation succeeded. If the comment is not approved, the server will not return the comment to a non authenticated user, but a success message can be returned if the create succeeded, and the client can optimistically add the comment to the client cache"
  success: Boolean
}

"The payload for the createCourse mutation."
type CreateCoursePayload {
  "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The Post object mutation type."
  course: Course
}

"The payload for the createGeneralFragment mutation."
type CreateGeneralFragmentPayload {
  "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The Post object mutation type."
  generalFragment: GeneralFragment
}

"The payload for the createIndividualCourse mutation."
type CreateIndividualCoursePayload {
  "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The Post object mutation type."
  individualCourse: IndividualCourse
}

"The payload for the createMediaItem mutation."
type CreateMediaItemPayload {
  "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The MediaItem object mutation type."
  mediaItem: MediaItem
}

"The payload for the createPage mutation."
type CreatePagePayload {
  "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The Post object mutation type."
  page: Page
}

"The payload for the createPostFormat mutation."
type CreatePostFormatPayload {
  "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The created post_format"
  postFormat: PostFormat
}

"The payload for the createPost mutation."
type CreatePostPayload {
  "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The Post object mutation type."
  post: Post
}

"The payload for the createTag mutation."
type CreateTagPayload {
  "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The created post_tag"
  tag: Tag
}

"The payload for the createUser mutation."
type CreateUserPayload {
  "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The User object mutation type."
  user: User
}

"The template assigned to the node"
type DefaultTemplate implements ContentTemplate {
  "The name of the template"
  templateName: String
}

"The payload for the deleteCategory mutation."
type DeleteCategoryPayload {
  "The deleted term object"
  category: Category
  "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The ID of the deleted object"
  deletedId: ID
}

"The payload for the deleteComment mutation."
type DeleteCommentPayload {
  "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The deleted comment object"
  comment: Comment
  "The deleted comment ID"
  deletedId: ID
}

"The payload for the deleteCourse mutation."
type DeleteCoursePayload {
  "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The object before it was deleted"
  course: Course
  "The ID of the deleted object"
  deletedId: ID
}

"The payload for the deleteGeneralFragment mutation."
type DeleteGeneralFragmentPayload {
  "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The ID of the deleted object"
  deletedId: ID
  "The object before it was deleted"
  generalFragment: GeneralFragment
}

"The payload for the deleteIndividualCourse mutation."
type DeleteIndividualCoursePayload {
  "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The ID of the deleted object"
  deletedId: ID
  "The object before it was deleted"
  individualCourse: IndividualCourse
}

"The payload for the deleteMediaItem mutation."
type DeleteMediaItemPayload {
  "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The ID of the deleted mediaItem"
  deletedId: ID
  "The mediaItem before it was deleted"
  mediaItem: MediaItem
}

"The payload for the deletePage mutation."
type DeletePagePayload {
  "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The ID of the deleted object"
  deletedId: ID
  "The object before it was deleted"
  page: Page
}

"The payload for the deletePostFormat mutation."
type DeletePostFormatPayload {
  "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The ID of the deleted object"
  deletedId: ID
  "The deleted term object"
  postFormat: PostFormat
}

"The payload for the deletePost mutation."
type DeletePostPayload {
  "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The ID of the deleted object"
  deletedId: ID
  "The object before it was deleted"
  post: Post
}

"The payload for the deleteTag mutation."
type DeleteTagPayload {
  "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The ID of the deleted object"
  deletedId: ID
  "The deleted term object"
  tag: Tag
}

"The payload for the deleteUser mutation."
type DeleteUserPayload {
  "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The ID of the user that you just deleted"
  deletedId: ID
  "The deleted user object"
  user: User
}

"The &quot;Details&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;."
type Details implements AcfFieldGroup & AcfFieldGroupFields & Details_Fields {
  "Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;Details&quot; Field Group"
  additionalQuestions: DetailsAdditionalQuestions
  "Field of the &quot;repeater&quot; Field Type added to the schema as part of the &quot;Details&quot; Field Group"
  faq: [DetailsFaq]
  "The name of the field group"
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
}

"The &quot;DetailsAdditionalQuestions&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;."
type DetailsAdditionalQuestions implements AcfFieldGroup & AcfFieldGroupFields & DetailsAdditionalQuestions_Fields {
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;DetailsAdditionalQuestions&quot; Field Group"
  button: String
  "Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;DetailsAdditionalQuestions&quot; Field Group"
  cta: DetailsAdditionalQuestionsCta
  "The name of the field group"
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;DetailsAdditionalQuestions&quot; Field Group"
  title: String
}

"The &quot;DetailsAdditionalQuestionsCta&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;."
type DetailsAdditionalQuestionsCta implements AcfFieldGroup & AcfFieldGroupFields & DetailsAdditionalQuestionsCta_Fields {
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;DetailsAdditionalQuestionsCta&quot; Field Group"
  afterBoldText: String
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;DetailsAdditionalQuestionsCta&quot; Field Group"
  beforeBoldText: String
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;DetailsAdditionalQuestionsCta&quot; Field Group"
  boldText: String
  "The name of the field group"
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
}

"The &quot;DetailsFaq&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;."
type DetailsFaq implements AcfFieldGroup & AcfFieldGroupFields & DetailsFaq_Fields {
  "Field of the &quot;textarea&quot; Field Type added to the schema as part of the &quot;DetailsFaq&quot; Field Group"
  answer: String
  "The name of the field group"
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;DetailsFaq&quot; Field Group"
  question: String
}

"The discussion setting type"
type DiscussionSettings {
  "Разрешить оставлять комментарии к новым записям."
  defaultCommentStatus: String
  "Разрешить ссылки оповещения с других блогов (уведомления и обратные ссылки) на новые статьи."
  defaultPingStatus: String
}

"Script enqueued by the CMS"
type EnqueuedScript implements EnqueuedAsset & Node {
  "The inline code to be run after the asset is loaded."
  after: [String]
  "Deprecated"
  args: Boolean @deprecated(reason: "Use `EnqueuedAsset.media` instead.")
  "The inline code to be run before the asset is loaded."
  before: [String]
  "The HTML conditional comment for the enqueued asset. E.g. IE 6, lte IE 7, etc"
  conditional: String
  "Dependencies needed to use this asset"
  dependencies: [EnqueuedScript]
  "Extra information needed for the script"
  extra: String @deprecated(reason: "Use `EnqueuedScript.extraData` instead.")
  "Extra data supplied to the enqueued script"
  extraData: String
  "The handle of the enqueued asset"
  handle: String
  "The global ID of the enqueued script"
  id: ID!
  "The source of the asset"
  src: String
  "The loading strategy to use on the script tag"
  strategy: ScriptLoadingStrategyEnum
  "The version of the enqueued script"
  version: String
}

"Stylesheet enqueued by the CMS"
type EnqueuedStylesheet implements EnqueuedAsset & Node {
  "The inline code to be run after the asset is loaded."
  after: [String]
  "Deprecated"
  args: Boolean @deprecated(reason: "Use `EnqueuedAsset.media` instead.")
  "The inline code to be run before the asset is loaded."
  before: [String]
  "The HTML conditional comment for the enqueued asset. E.g. IE 6, lte IE 7, etc"
  conditional: String
  "Dependencies needed to use this asset"
  dependencies: [EnqueuedStylesheet]
  "Extra information needed for the script"
  extra: String @deprecated(reason: "Use `EnqueuedScript.extraData` instead.")
  "The handle of the enqueued asset"
  handle: String
  "The global ID of the enqueued stylesheet"
  id: ID!
  "Whether the enqueued style is RTL or not"
  isRtl: Boolean
  "The media attribute to use for the link"
  media: String
  "The absolute path to the enqueued style. Set when the stylesheet is meant to load inline."
  path: String
  "The `rel` attribute to use for the link"
  rel: String
  "The source of the asset"
  src: String
  "Optional suffix, used in combination with RTL"
  suffix: String
  "The title of the enqueued style. Used for preferred/alternate stylesheets."
  title: String
  "The version of the enqueued style"
  version: String
}

"The generalFragment type"
type GeneralFragment implements ContentNode & DatabaseIdentifier & MenuItemLinkable & Node & NodeWithContentEditor & NodeWithFeaturedImage & NodeWithTemplate & NodeWithTitle & Previewable & UniformResourceIdentifiable & WithAcfCommonFragments {
  "Fields of the CommonFragments ACF Field Group"
  commonFragments: CommonFragments
  "The content of the post."
  content(
    "Format of the field output"
    format: PostObjectFieldFormatEnum
  ): String
  "Connection between the ContentNode type and the ContentType type"
  contentType: ContentNodeToContentTypeConnectionEdge
  "The name of the Content Type the node belongs to"
  contentTypeName: String!
  "The unique identifier stored in the database"
  databaseId: Int!
  "Post publishing date."
  date: String
  "The publishing date set in GMT."
  dateGmt: String
  "The desired slug of the post"
  desiredSlug: String
  "If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds"
  editingLockedBy: ContentNodeToEditLockConnectionEdge
  "The RSS enclosure for the object"
  enclosure: String
  "Connection between the ContentNode type and the EnqueuedScript type"
  enqueuedScripts(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String,
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String,
    "The number of items to return after the referenced \"after\" cursor"
    first: Int,
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
  ): ContentNodeToEnqueuedScriptConnection
  "Connection between the ContentNode type and the EnqueuedStylesheet type"
  enqueuedStylesheets(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String,
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String,
    "The number of items to return after the referenced \"after\" cursor"
    first: Int,
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
  ): ContentNodeToEnqueuedStylesheetConnection
  "Connection between the NodeWithFeaturedImage type and the MediaItem type"
  featuredImage: NodeWithFeaturedImageToMediaItemConnectionEdge
  "The database identifier for the featured image node assigned to the content node"
  featuredImageDatabaseId: Int
  "Globally unique ID of the featured image assigned to the node"
  featuredImageId: ID
  "The id field matches the WP_Post-&gt;ID field."
  generalFragmentId: Int! @deprecated(reason: "Deprecated in favor of the databaseId field")
  "The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table."
  guid: String
  "The globally unique identifier of the general-fragment object."
  id: ID!
  "Whether the node is a Content Node"
  isContentNode: Boolean!
  "Whether the object is a node in the preview state"
  isPreview: Boolean
  "Whether the object is restricted from the current viewer"
  isRestricted: Boolean
  "Whether the node is a Term"
  isTermNode: Boolean!
  "The user that most recently edited the node"
  lastEditedBy: ContentNodeToEditLastConnectionEdge
  "The permalink of the post"
  link: String
  "The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time."
  modified: String
  "The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT."
  modifiedGmt: String
  "Connection between the GeneralFragment type and the generalFragment type"
  preview: GeneralFragmentToPreviewConnectionEdge
  "The database id of the preview node"
  previewRevisionDatabaseId: Int
  "Whether the object is a node in the preview state"
  previewRevisionId: ID
  "The Yoast SEO data of the ContentNode"
  seo: PostTypeSEO
  "The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table."
  slug: String
  "The current status of the object"
  status: String
  "The template assigned to the node"
  template: ContentTemplate
  "The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made."
  title(
    "Format of the field output"
    format: PostObjectFieldFormatEnum
  ): String
  "The unique resource identifier path"
  uri: String
}

"Connection between the GeneralFragment type and the generalFragment type"
type GeneralFragmentToPreviewConnectionEdge implements Edge & GeneralFragmentConnectionEdge & OneToOneConnection {
  "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
  cursor: String
  "The node of the connection, without the edges"
  node: GeneralFragment!
}

"The general setting type"
type GeneralSettings {
  "Общий формат даты."
  dateFormat: String
  "Слоган сайта."
  description: String
  "Этот адрес используется в целях администрирования. Например, для уведомления о новых пользователях."
  email: String
  "Код локали WordPress."
  language: String
  "Первый день недели."
  startOfWeek: Int
  "Общий формат времени."
  timeFormat: String
  "Город в той же временной зоне что и у вас."
  timezone: String
  "Название сайта."
  title: String
  "Адрес сайта (URL)"
  url: String
}

"Connection between the HierarchicalContentNode type and the ContentNode type"
type HierarchicalContentNodeToContentNodeAncestorsConnection implements Connection & ContentNodeConnection {
  "Edges for the HierarchicalContentNodeToContentNodeAncestorsConnection connection"
  edges: [HierarchicalContentNodeToContentNodeAncestorsConnectionEdge!]!
  "The nodes of the connection, without the edges"
  nodes: [ContentNode!]!
  "Information about pagination in a connection."
  pageInfo: HierarchicalContentNodeToContentNodeAncestorsConnectionPageInfo!
}

"An edge in a connection"
type HierarchicalContentNodeToContentNodeAncestorsConnectionEdge implements ContentNodeConnectionEdge & Edge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: ContentNode!
}

"Page Info on the &quot;HierarchicalContentNodeToContentNodeAncestorsConnection&quot;"
type HierarchicalContentNodeToContentNodeAncestorsConnectionPageInfo implements ContentNodeConnectionPageInfo & PageInfo & WPPageInfo {
  "When paginating forwards, the cursor to continue."
  endCursor: String
  "When paginating forwards, are there more items?"
  hasNextPage: Boolean!
  "When paginating backwards, are there more items?"
  hasPreviousPage: Boolean!
  "Raw schema for page"
  seo: SEOPostTypePageInfo
  "When paginating backwards, the cursor to continue."
  startCursor: String
}

"Connection between the HierarchicalContentNode type and the ContentNode type"
type HierarchicalContentNodeToContentNodeChildrenConnection implements Connection & ContentNodeConnection {
  "Edges for the HierarchicalContentNodeToContentNodeChildrenConnection connection"
  edges: [HierarchicalContentNodeToContentNodeChildrenConnectionEdge!]!
  "The nodes of the connection, without the edges"
  nodes: [ContentNode!]!
  "Information about pagination in a connection."
  pageInfo: HierarchicalContentNodeToContentNodeChildrenConnectionPageInfo!
}

"An edge in a connection"
type HierarchicalContentNodeToContentNodeChildrenConnectionEdge implements ContentNodeConnectionEdge & Edge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: ContentNode!
}

"Page Info on the &quot;HierarchicalContentNodeToContentNodeChildrenConnection&quot;"
type HierarchicalContentNodeToContentNodeChildrenConnectionPageInfo implements ContentNodeConnectionPageInfo & PageInfo & WPPageInfo {
  "When paginating forwards, the cursor to continue."
  endCursor: String
  "When paginating forwards, are there more items?"
  hasNextPage: Boolean!
  "When paginating backwards, are there more items?"
  hasPreviousPage: Boolean!
  "Raw schema for page"
  seo: SEOPostTypePageInfo
  "When paginating backwards, the cursor to continue."
  startCursor: String
}

"Connection between the HierarchicalContentNode type and the ContentNode type"
type HierarchicalContentNodeToParentContentNodeConnectionEdge implements ContentNodeConnectionEdge & Edge & OneToOneConnection {
  "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
  cursor: String
  "The node of the connection, without the edges"
  node: ContentNode!
}

"The individualCourse type"
type IndividualCourse implements ContentNode & DatabaseIdentifier & MenuItemLinkable & Node & NodeWithContentEditor & NodeWithFeaturedImage & NodeWithTemplate & NodeWithTitle & Previewable & UniformResourceIdentifiable & WithAcfIndividualCourseData {
  "The content of the post."
  content(
    "Format of the field output"
    format: PostObjectFieldFormatEnum
  ): String
  "Connection between the ContentNode type and the ContentType type"
  contentType: ContentNodeToContentTypeConnectionEdge
  "The name of the Content Type the node belongs to"
  contentTypeName: String!
  "The unique identifier stored in the database"
  databaseId: Int!
  "Post publishing date."
  date: String
  "The publishing date set in GMT."
  dateGmt: String
  "The desired slug of the post"
  desiredSlug: String
  "If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds"
  editingLockedBy: ContentNodeToEditLockConnectionEdge
  "The RSS enclosure for the object"
  enclosure: String
  "Connection between the ContentNode type and the EnqueuedScript type"
  enqueuedScripts(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String,
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String,
    "The number of items to return after the referenced \"after\" cursor"
    first: Int,
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
  ): ContentNodeToEnqueuedScriptConnection
  "Connection between the ContentNode type and the EnqueuedStylesheet type"
  enqueuedStylesheets(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String,
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String,
    "The number of items to return after the referenced \"after\" cursor"
    first: Int,
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
  ): ContentNodeToEnqueuedStylesheetConnection
  "Connection between the NodeWithFeaturedImage type and the MediaItem type"
  featuredImage: NodeWithFeaturedImageToMediaItemConnectionEdge
  "The database identifier for the featured image node assigned to the content node"
  featuredImageDatabaseId: Int
  "Globally unique ID of the featured image assigned to the node"
  featuredImageId: ID
  "The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table."
  guid: String
  "The globally unique identifier of the individual-course object."
  id: ID!
  "Fields of the IndividualCourseData ACF Field Group"
  individualCourseData: IndividualCourseData
  "The id field matches the WP_Post-&gt;ID field."
  individualCourseId: Int! @deprecated(reason: "Deprecated in favor of the databaseId field")
  "Whether the node is a Content Node"
  isContentNode: Boolean!
  "Whether the object is a node in the preview state"
  isPreview: Boolean
  "Whether the object is restricted from the current viewer"
  isRestricted: Boolean
  "Whether the node is a Term"
  isTermNode: Boolean!
  "The user that most recently edited the node"
  lastEditedBy: ContentNodeToEditLastConnectionEdge
  "The permalink of the post"
  link: String
  "The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time."
  modified: String
  "The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT."
  modifiedGmt: String
  "Connection between the IndividualCourse type and the individualCourse type"
  preview: IndividualCourseToPreviewConnectionEdge
  "The database id of the preview node"
  previewRevisionDatabaseId: Int
  "Whether the object is a node in the preview state"
  previewRevisionId: ID
  "The Yoast SEO data of the ContentNode"
  seo: PostTypeSEO
  "The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table."
  slug: String
  "The current status of the object"
  status: String
  "The template assigned to the node"
  template: ContentTemplate
  "The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made."
  title(
    "Format of the field output"
    format: PostObjectFieldFormatEnum
  ): String
  "The unique resource identifier path"
  uri: String
}

"The &quot;IndividualCourseData&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;."
type IndividualCourseData implements AcfFieldGroup & AcfFieldGroupFields & IndividualCourseData_Fields {
  "Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;IndividualCourseData&quot; Field Group"
  background: IndividualCourseDataBackground
  "The name of the field group"
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
  "Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;IndividualCourseData&quot; Field Group"
  hero: IndividualCourseDataHero
  "Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;IndividualCourseData&quot; Field Group"
  price: IndividualCourseDataPrice
  "Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;IndividualCourseData&quot; Field Group"
  process: IndividualCourseDataProcess
}

"The &quot;IndividualCourseDataBackground&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;."
type IndividualCourseDataBackground implements AcfFieldGroup & AcfFieldGroupFields & IndividualCourseDataBackground_Fields {
  "Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;IndividualCourseDataBackground&quot; Field Group"
  desktop: IndividualCourseDataBackgroundDesktop
  "The name of the field group"
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
  "Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;IndividualCourseDataBackground&quot; Field Group"
  mobile: IndividualCourseDataBackgroundMobile
}

"The &quot;IndividualCourseDataBackgroundDesktop&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;."
type IndividualCourseDataBackgroundDesktop implements AcfFieldGroup & AcfFieldGroupFields & IndividualCourseDataBackgroundDesktop_Fields {
  "The name of the field group"
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
  "Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;IndividualCourseDataBackgroundDesktop&quot; Field Group"
  footer: AcfMediaItemConnectionEdge
  "Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;IndividualCourseDataBackgroundDesktop&quot; Field Group"
  hero: AcfMediaItemConnectionEdge
  "Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;IndividualCourseDataBackgroundDesktop&quot; Field Group"
  teacher: AcfMediaItemConnectionEdge
}

"The &quot;IndividualCourseDataBackgroundMobile&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;."
type IndividualCourseDataBackgroundMobile implements AcfFieldGroup & AcfFieldGroupFields & IndividualCourseDataBackgroundMobile_Fields {
  "The name of the field group"
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
  "Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;IndividualCourseDataBackgroundMobile&quot; Field Group"
  footer: AcfMediaItemConnectionEdge
  "Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;IndividualCourseDataBackgroundMobile&quot; Field Group"
  hero: AcfMediaItemConnectionEdge
  "Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;IndividualCourseDataBackgroundMobile&quot; Field Group"
  teacher: AcfMediaItemConnectionEdge
}

"The &quot;IndividualCourseDataHero&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;."
type IndividualCourseDataHero implements AcfFieldGroup & AcfFieldGroupFields & IndividualCourseDataHero_Fields {
  "Field of the &quot;repeater&quot; Field Type added to the schema as part of the &quot;IndividualCourseDataHero&quot; Field Group"
  benefits: [IndividualCourseDataHeroBenefits]
  "Field of the &quot;repeater&quot; Field Type added to the schema as part of the &quot;IndividualCourseDataHero&quot; Field Group"
  courseConditions: [IndividualCourseDataHeroCourseConditions]
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;IndividualCourseDataHero&quot; Field Group"
  cta: String
  "The name of the field group"
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;IndividualCourseDataHero&quot; Field Group"
  runningLine: String
}

"The &quot;IndividualCourseDataHeroBenefits&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;."
type IndividualCourseDataHeroBenefits implements AcfFieldGroup & AcfFieldGroupFields & IndividualCourseDataHeroBenefits_Fields {
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;IndividualCourseDataHeroBenefits&quot; Field Group"
  content: String
  "The name of the field group"
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
}

"The &quot;IndividualCourseDataHeroCourseConditions&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;."
type IndividualCourseDataHeroCourseConditions implements AcfFieldGroup & AcfFieldGroupFields & IndividualCourseDataHeroCourseConditions_Fields {
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;IndividualCourseDataHeroCourseConditions&quot; Field Group"
  description: String
  "The name of the field group"
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
  "Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;IndividualCourseDataHeroCourseConditions&quot; Field Group"
  number: Float
}

"The &quot;IndividualCourseDataPrice&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;."
type IndividualCourseDataPrice implements AcfFieldGroup & AcfFieldGroupFields & IndividualCourseDataPrice_Fields {
  "Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;IndividualCourseDataPrice&quot; Field Group"
  courseLengthInMonths: Float
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;IndividualCourseDataPrice&quot; Field Group"
  cta: String
  "Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;IndividualCourseDataPrice&quot; Field Group"
  discount: Float
  "The name of the field group"
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
  "Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;IndividualCourseDataPrice&quot; Field Group"
  fullPrice: Float
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;IndividualCourseDataPrice&quot; Field Group"
  liveTrainingsNumber: String
  "Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;IndividualCourseDataPrice&quot; Field Group"
  monthlyPrice: Float
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;IndividualCourseDataPrice&quot; Field Group"
  oldPrice: String
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;IndividualCourseDataPrice&quot; Field Group"
  title: String
  "Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;IndividualCourseDataPrice&quot; Field Group"
  videoTrainingsNumber: Float
}

"The &quot;IndividualCourseDataProcess&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;."
type IndividualCourseDataProcess implements AcfFieldGroup & AcfFieldGroupFields & IndividualCourseDataProcess_Fields {
  "The name of the field group"
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
  "Field of the &quot;repeater&quot; Field Type added to the schema as part of the &quot;IndividualCourseDataProcess&quot; Field Group"
  step: [IndividualCourseDataProcessStep]
}

"The &quot;IndividualCourseDataProcessStep&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;."
type IndividualCourseDataProcessStep implements AcfFieldGroup & AcfFieldGroupFields & IndividualCourseDataProcessStep_Fields {
  "Field of the &quot;textarea&quot; Field Type added to the schema as part of the &quot;IndividualCourseDataProcessStep&quot; Field Group"
  description: String
  "The name of the field group"
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
  "Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;IndividualCourseDataProcessStep&quot; Field Group"
  title: String
}

"Connection between the IndividualCourse type and the individualCourse type"
type IndividualCourseToPreviewConnectionEdge implements Edge & IndividualCourseConnectionEdge & OneToOneConnection {
  "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
  cursor: String
  "The node of the connection, without the edges"
  node: IndividualCourse!
}

"File details for a Media Item"
type MediaDetails {
  "The filename of the mediaItem"
  file: String
  "The height of the mediaItem"
  height: Int
  "Meta information associated with the mediaItem"
  meta: MediaItemMeta
  "The available sizes of the mediaItem"
  sizes(
    "The sizes to exclude. Will take precedence over `include`."
    exclude: [MediaItemSizeEnum],
    "The sizes to include. Can be overridden by `exclude`."
    include: [MediaItemSizeEnum]
  ): [MediaSize]
  "The width of the mediaItem"
  width: Int
}

"The mediaItem type"
type MediaItem implements ContentNode & DatabaseIdentifier & HierarchicalContentNode & HierarchicalNode & Node & NodeWithAuthor & NodeWithComments & NodeWithTemplate & NodeWithTitle & UniformResourceIdentifiable {
  "Alternative text to display when resource is not displayed"
  altText: String
  "Returns ancestors of the node. Default ordered as lowest (closest to the child) to highest (closest to the root)."
  ancestors(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String,
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String,
    "The number of items to return after the referenced \"after\" cursor"
    first: Int,
    "The number of items to return before the referenced \"before\" cursor"
    last: Int,
    "Arguments for filtering the connection"
    where: HierarchicalContentNodeToContentNodeAncestorsConnectionWhereArgs
  ): HierarchicalContentNodeToContentNodeAncestorsConnection
  "Connection between the NodeWithAuthor type and the User type"
  author: NodeWithAuthorToUserConnectionEdge
  "The database identifier of the author of the node"
  authorDatabaseId: Int
  "The globally unique identifier of the author of the node"
  authorId: ID
  "The caption for the resource"
  caption(
    "Format of the field output"
    format: PostObjectFieldFormatEnum
  ): String
  "Connection between the HierarchicalContentNode type and the ContentNode type"
  children(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String,
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String,
    "The number of items to return after the referenced \"after\" cursor"
    first: Int,
    "The number of items to return before the referenced \"before\" cursor"
    last: Int,
    "Arguments for filtering the connection"
    where: HierarchicalContentNodeToContentNodeChildrenConnectionWhereArgs
  ): HierarchicalContentNodeToContentNodeChildrenConnection
  "The number of comments. Even though WPGraphQL denotes this field as an integer, in WordPress this field should be saved as a numeric string for compatibility."
  commentCount: Int
  "Whether the comments are open or closed for this particular post."
  commentStatus: String
  "Connection between the MediaItem type and the Comment type"
  comments(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String,
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String,
    "The number of items to return after the referenced \"after\" cursor"
    first: Int,
    "The number of items to return before the referenced \"before\" cursor"
    last: Int,
    "Arguments for filtering the connection"
    where: MediaItemToCommentConnectionWhereArgs
  ): MediaItemToCommentConnection
  "Connection between the ContentNode type and the ContentType type"
  contentType: ContentNodeToContentTypeConnectionEdge
  "The name of the Content Type the node belongs to"
  contentTypeName: String!
  "The unique identifier stored in the database"
  databaseId: Int!
  "Post publishing date."
  date: String
  "The publishing date set in GMT."
  dateGmt: String
  "Description of the image (stored as post_content)"
  description(
    "Format of the field output"
    format: PostObjectFieldFormatEnum
  ): String
  "The desired slug of the post"
  desiredSlug: String
  "If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds"
  editingLockedBy: ContentNodeToEditLockConnectionEdge
  "The RSS enclosure for the object"
  enclosure: String
  "Connection between the ContentNode type and the EnqueuedScript type"
  enqueuedScripts(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String,
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String,
    "The number of items to return after the referenced \"after\" cursor"
    first: Int,
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
  ): ContentNodeToEnqueuedScriptConnection
  "Connection between the ContentNode type and the EnqueuedStylesheet type"
  enqueuedStylesheets(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String,
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String,
    "The number of items to return after the referenced \"after\" cursor"
    first: Int,
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
  ): ContentNodeToEnqueuedStylesheetConnection
  "The filesize in bytes of the resource"
  fileSize(
    "Size of the MediaItem to return"
    size: MediaItemSizeEnum
  ): Int
  "The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table."
  guid: String
  "The globally unique identifier of the attachment object."
  id: ID!
  "Whether the node is a Content Node"
  isContentNode: Boolean!
  "Whether the object is a node in the preview state"
  isPreview: Boolean
  "Whether the object is restricted from the current viewer"
  isRestricted: Boolean
  "Whether the node is a Term"
  isTermNode: Boolean!
  "The user that most recently edited the node"
  lastEditedBy: ContentNodeToEditLastConnectionEdge
  "The permalink of the post"
  link: String
  "Details about the mediaItem"
  mediaDetails: MediaDetails
  "The id field matches the WP_Post-&gt;ID field."
  mediaItemId: Int! @deprecated(reason: "Deprecated in favor of the databaseId field")
  "Url of the mediaItem"
  mediaItemUrl: String
  "Type of resource"
  mediaType: String
  "The mime type of the mediaItem"
  mimeType: String
  "The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time."
  modified: String
  "The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT."
  modifiedGmt: String
  "The parent of the node. The parent object can be of various types"
  parent: HierarchicalContentNodeToParentContentNodeConnectionEdge
  "Database id of the parent node"
  parentDatabaseId: Int
  "The globally unique identifier of the parent node."
  parentId: ID
  "The database id of the preview node"
  previewRevisionDatabaseId: Int
  "Whether the object is a node in the preview state"
  previewRevisionId: ID
  "The Yoast SEO data of the ContentNode"
  seo: PostTypeSEO
  "The sizes attribute value for an image."
  sizes(
    "Size of the MediaItem to calculate sizes with"
    size: MediaItemSizeEnum
  ): String
  "The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table."
  slug: String
  "Url of the mediaItem"
  sourceUrl(
    "Size of the MediaItem to return"
    size: MediaItemSizeEnum
  ): String
  "The srcset attribute specifies the URL of the image to use in different situations. It is a comma separated string of urls and their widths."
  srcSet(
    "Size of the MediaItem to calculate srcSet with"
    size: MediaItemSizeEnum
  ): String
  "The current status of the object"
  status: String
  "The template assigned to a node of content"
  template: ContentTemplate
  "The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made."
  title(
    "Format of the field output"
    format: PostObjectFieldFormatEnum
  ): String
  "The unique resource identifier path"
  uri: String
}

"Meta connected to a MediaItem"
type MediaItemMeta {
  "Aperture measurement of the media item."
  aperture: Float
  "Information about the camera used to create the media item."
  camera: String
  "The text string description associated with the media item."
  caption: String
  "Copyright information associated with the media item."
  copyright: String
  "The date/time when the media was created."
  createdTimestamp: Int
  "The original creator of the media item."
  credit: String
  "The focal length value of the media item."
  focalLength: Float
  "The ISO (International Organization for Standardization) value of the media item."
  iso: Int
  "List of keywords used to describe or identfy the media item."
  keywords: [String]
  "The vertical or horizontal aspect of the media item."
  orientation: String
  "The shutter speed information of the media item."
  shutterSpeed: Float
  "A useful title for the media item."
  title: String
}

"Connection between the MediaItem type and the Comment type"
type MediaItemToCommentConnection implements CommentConnection & Connection {
  "Edges for the MediaItemToCommentConnection connection"
  edges: [MediaItemToCommentConnectionEdge!]!
  "The nodes of the connection, without the edges"
  nodes: [Comment!]!
  "Information about pagination in a connection."
  pageInfo: MediaItemToCommentConnectionPageInfo!
}

"An edge in a connection"
type MediaItemToCommentConnectionEdge implements CommentConnectionEdge & Edge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: Comment!
}

"Page Info on the &quot;MediaItemToCommentConnection&quot;"
type MediaItemToCommentConnectionPageInfo implements CommentConnectionPageInfo & PageInfo & WPPageInfo {
  "When paginating forwards, the cursor to continue."
  endCursor: String
  "When paginating forwards, are there more items?"
  hasNextPage: Boolean!
  "When paginating backwards, are there more items?"
  hasPreviousPage: Boolean!
  "Raw schema for page"
  seo: SEOPostTypePageInfo
  "When paginating backwards, the cursor to continue."
  startCursor: String
}

"Details of an available size for a media item"
type MediaSize {
  "The filename of the referenced size"
  file: String
  "The filesize of the resource"
  fileSize: Int
  "The height of the referenced size"
  height: String
  "The mime type of the referenced size"
  mimeType: String
  "The referenced size name"
  name: String
  "The url of the referenced size"
  sourceUrl: String
  "The width of the referenced size"
  width: String
}

"Menus are the containers for navigation items. Menus can be assigned to menu locations, which are typically registered by the active theme."
type Menu implements DatabaseIdentifier & Node {
  "The number of items in the menu"
  count: Int
  "The unique identifier stored in the database"
  databaseId: Int!
  "The globally unique identifier of the nav menu object."
  id: ID!
  "Whether the object is restricted from the current viewer"
  isRestricted: Boolean
  "The locations a menu is assigned to"
  locations: [MenuLocationEnum]
  "WP ID of the nav menu."
  menuId: Int @deprecated(reason: "Deprecated in favor of the databaseId field")
  "Connection between the Menu type and the MenuItem type"
  menuItems(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String,
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String,
    "The number of items to return after the referenced \"after\" cursor"
    first: Int,
    "The number of items to return before the referenced \"before\" cursor"
    last: Int,
    "Arguments for filtering the connection"
    where: MenuToMenuItemConnectionWhereArgs
  ): MenuToMenuItemConnection
  "Display name of the menu. Equivalent to WP_Term-&gt;name."
  name: String
  "The url friendly name of the menu. Equivalent to WP_Term-&gt;slug"
  slug: String
}

"Navigation menu items are the individual items assigned to a menu. These are rendered as the links in a navigation menu."
type MenuItem implements DatabaseIdentifier & Node {
  "Connection between the MenuItem type and the MenuItem type"
  childItems(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String,
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String,
    "The number of items to return after the referenced \"after\" cursor"
    first: Int,
    "The number of items to return before the referenced \"before\" cursor"
    last: Int,
    "Arguments for filtering the connection"
    where: MenuItemToMenuItemConnectionWhereArgs
  ): MenuItemToMenuItemConnection
  "Connection from MenuItem to it&#039;s connected node"
  connectedNode: MenuItemToMenuItemLinkableConnectionEdge
  "The object connected to this menu item."
  connectedObject: MenuItemObjectUnion @deprecated(reason: "Deprecated in favor of the connectedNode field")
  "Class attribute for the menu item link"
  cssClasses: [String]
  "The unique identifier stored in the database"
  databaseId: Int!
  "Description of the menu item."
  description: String
  "The globally unique identifier of the nav menu item object."
  id: ID!
  "Whether the object is restricted from the current viewer"
  isRestricted: Boolean
  "Label or title of the menu item."
  label: String
  "Link relationship (XFN) of the menu item."
  linkRelationship: String
  "The locations the menu item&#039;s Menu is assigned to"
  locations: [MenuLocationEnum]
  "The Menu a MenuItem is part of"
  menu: MenuItemToMenuConnectionEdge
  "WP ID of the menu item."
  menuItemId: Int @deprecated(reason: "Deprecated in favor of the databaseId field")
  "Menu item order"
  order: Int
  "The database id of the parent menu item or null if it is the root"
  parentDatabaseId: Int
  "The globally unique identifier of the parent nav menu item object."
  parentId: ID
  "Path for the resource. Relative path for internal resources. Absolute path for external resources."
  path: String
  "Target attribute for the menu item link."
  target: String
  "Title attribute for the menu item link"
  title: String
  "The uri of the resource the menu item links to"
  uri: String
  "URL or destination of the menu item."
  url: String
}

"Connection between the MenuItem type and the Menu type"
type MenuItemToMenuConnectionEdge implements Edge & MenuConnectionEdge & OneToOneConnection {
  "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
  cursor: String
  "The node of the connection, without the edges"
  node: Menu!
}

"Connection between the MenuItem type and the MenuItem type"
type MenuItemToMenuItemConnection implements Connection & MenuItemConnection {
  "Edges for the MenuItemToMenuItemConnection connection"
  edges: [MenuItemToMenuItemConnectionEdge!]!
  "The nodes of the connection, without the edges"
  nodes: [MenuItem!]!
  "Information about pagination in a connection."
  pageInfo: MenuItemToMenuItemConnectionPageInfo!
}

"An edge in a connection"
type MenuItemToMenuItemConnectionEdge implements Edge & MenuItemConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: MenuItem!
}

"Page Info on the &quot;MenuItemToMenuItemConnection&quot;"
type MenuItemToMenuItemConnectionPageInfo implements MenuItemConnectionPageInfo & PageInfo & WPPageInfo {
  "When paginating forwards, the cursor to continue."
  endCursor: String
  "When paginating forwards, are there more items?"
  hasNextPage: Boolean!
  "When paginating backwards, are there more items?"
  hasPreviousPage: Boolean!
  "Raw schema for page"
  seo: SEOPostTypePageInfo
  "When paginating backwards, the cursor to continue."
  startCursor: String
}

"Connection between the MenuItem type and the MenuItemLinkable type"
type MenuItemToMenuItemLinkableConnectionEdge implements Edge & MenuItemLinkableConnectionEdge & OneToOneConnection {
  "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
  cursor: String
  "The node of the connection, without the edges"
  node: MenuItemLinkable!
}

"Connection between the Menu type and the MenuItem type"
type MenuToMenuItemConnection implements Connection & MenuItemConnection {
  "Edges for the MenuToMenuItemConnection connection"
  edges: [MenuToMenuItemConnectionEdge!]!
  "The nodes of the connection, without the edges"
  nodes: [MenuItem!]!
  "Information about pagination in a connection."
  pageInfo: MenuToMenuItemConnectionPageInfo!
}

"An edge in a connection"
type MenuToMenuItemConnectionEdge implements Edge & MenuItemConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: MenuItem!
}

"Page Info on the &quot;MenuToMenuItemConnection&quot;"
type MenuToMenuItemConnectionPageInfo implements MenuItemConnectionPageInfo & PageInfo & WPPageInfo {
  "When paginating forwards, the cursor to continue."
  endCursor: String
  "When paginating forwards, are there more items?"
  hasNextPage: Boolean!
  "When paginating backwards, are there more items?"
  hasPreviousPage: Boolean!
  "Raw schema for page"
  seo: SEOPostTypePageInfo
  "When paginating backwards, the cursor to continue."
  startCursor: String
}

"Connection between the NodeWithAuthor type and the User type"
type NodeWithAuthorToUserConnectionEdge implements Edge & OneToOneConnection & UserConnectionEdge {
  "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
  cursor: String
  "The node of the connection, without the edges"
  node: User!
}

"Connection between the NodeWithFeaturedImage type and the MediaItem type"
type NodeWithFeaturedImageToMediaItemConnectionEdge implements Edge & MediaItemConnectionEdge & OneToOneConnection {
  "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
  cursor: String
  "The node of the connection, without the edges"
  node: MediaItem!
}

"Connection between the NodeWithRevisions type and the ContentNode type"
type NodeWithRevisionsToContentNodeConnectionEdge implements ContentNodeConnectionEdge & Edge & OneToOneConnection {
  "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
  cursor: String
  "The node of the connection, without the edges"
  node: ContentNode!
}

"The page type"
type Page implements ContentNode & DatabaseIdentifier & HierarchicalContentNode & HierarchicalNode & MenuItemLinkable & Node & NodeWithAuthor & NodeWithComments & NodeWithContentEditor & NodeWithFeaturedImage & NodeWithPageAttributes & NodeWithRevisions & NodeWithTemplate & NodeWithTitle & Previewable & UniformResourceIdentifiable {
  "Returns ancestors of the node. Default ordered as lowest (closest to the child) to highest (closest to the root)."
  ancestors(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String,
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String,
    "The number of items to return after the referenced \"after\" cursor"
    first: Int,
    "The number of items to return before the referenced \"before\" cursor"
    last: Int,
    "Arguments for filtering the connection"
    where: HierarchicalContentNodeToContentNodeAncestorsConnectionWhereArgs
  ): HierarchicalContentNodeToContentNodeAncestorsConnection
  "Connection between the NodeWithAuthor type and the User type"
  author: NodeWithAuthorToUserConnectionEdge
  "The database identifier of the author of the node"
  authorDatabaseId: Int
  "The globally unique identifier of the author of the node"
  authorId: ID
  "Connection between the HierarchicalContentNode type and the ContentNode type"
  children(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String,
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String,
    "The number of items to return after the referenced \"after\" cursor"
    first: Int,
    "The number of items to return before the referenced \"before\" cursor"
    last: Int,
    "Arguments for filtering the connection"
    where: HierarchicalContentNodeToContentNodeChildrenConnectionWhereArgs
  ): HierarchicalContentNodeToContentNodeChildrenConnection
  "The number of comments. Even though WPGraphQL denotes this field as an integer, in WordPress this field should be saved as a numeric string for compatibility."
  commentCount: Int
  "Whether the comments are open or closed for this particular post."
  commentStatus: String
  "Connection between the Page type and the Comment type"
  comments(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String,
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String,
    "The number of items to return after the referenced \"after\" cursor"
    first: Int,
    "The number of items to return before the referenced \"before\" cursor"
    last: Int,
    "Arguments for filtering the connection"
    where: PageToCommentConnectionWhereArgs
  ): PageToCommentConnection
  "The content of the post."
  content(
    "Format of the field output"
    format: PostObjectFieldFormatEnum
  ): String
  "Connection between the ContentNode type and the ContentType type"
  contentType: ContentNodeToContentTypeConnectionEdge
  "The name of the Content Type the node belongs to"
  contentTypeName: String!
  "The unique identifier stored in the database"
  databaseId: Int!
  "Post publishing date."
  date: String
  "The publishing date set in GMT."
  dateGmt: String
  "The desired slug of the post"
  desiredSlug: String
  "If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds"
  editingLockedBy: ContentNodeToEditLockConnectionEdge
  "The RSS enclosure for the object"
  enclosure: String
  "Connection between the ContentNode type and the EnqueuedScript type"
  enqueuedScripts(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String,
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String,
    "The number of items to return after the referenced \"after\" cursor"
    first: Int,
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
  ): ContentNodeToEnqueuedScriptConnection
  "Connection between the ContentNode type and the EnqueuedStylesheet type"
  enqueuedStylesheets(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String,
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String,
    "The number of items to return after the referenced \"after\" cursor"
    first: Int,
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
  ): ContentNodeToEnqueuedStylesheetConnection
  "Connection between the NodeWithFeaturedImage type and the MediaItem type"
  featuredImage: NodeWithFeaturedImageToMediaItemConnectionEdge
  "The database identifier for the featured image node assigned to the content node"
  featuredImageDatabaseId: Int
  "Globally unique ID of the featured image assigned to the node"
  featuredImageId: ID
  "The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table."
  guid: String
  "The globally unique identifier of the page object."
  id: ID!
  "Whether the node is a Content Node"
  isContentNode: Boolean!
  "Whether this page is set to the static front page."
  isFrontPage: Boolean!
  "Whether this page is set to the blog posts page."
  isPostsPage: Boolean!
  "Whether the object is a node in the preview state"
  isPreview: Boolean
  "Whether this page is set to the privacy page."
  isPrivacyPage: Boolean!
  "Whether the object is restricted from the current viewer"
  isRestricted: Boolean
  "True if the node is a revision of another node"
  isRevision: Boolean
  "Whether the node is a Term"
  isTermNode: Boolean!
  "The user that most recently edited the node"
  lastEditedBy: ContentNodeToEditLastConnectionEdge
  "The permalink of the post"
  link: String
  "A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types."
  menuOrder: Int
  "The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time."
  modified: String
  "The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT."
  modifiedGmt: String
  "The id field matches the WP_Post-&gt;ID field."
  pageId: Int! @deprecated(reason: "Deprecated in favor of the databaseId field")
  "The parent of the node. The parent object can be of various types"
  parent: HierarchicalContentNodeToParentContentNodeConnectionEdge
  "Database id of the parent node"
  parentDatabaseId: Int
  "The globally unique identifier of the parent node."
  parentId: ID
  "Connection between the Page type and the page type"
  preview: PageToPreviewConnectionEdge
  "The database id of the preview node"
  previewRevisionDatabaseId: Int
  "Whether the object is a node in the preview state"
  previewRevisionId: ID
  "If the current node is a revision, this field exposes the node this is a revision of. Returns null if the node is not a revision of another node."
  revisionOf: NodeWithRevisionsToContentNodeConnectionEdge
  "Connection between the Page type and the page type"
  revisions(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String,
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String,
    "The number of items to return after the referenced \"after\" cursor"
    first: Int,
    "The number of items to return before the referenced \"before\" cursor"
    last: Int,
    "Arguments for filtering the connection"
    where: PageToRevisionConnectionWhereArgs
  ): PageToRevisionConnection
  "The Yoast SEO data of the ContentNode"
  seo: PostTypeSEO
  "The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table."
  slug: String
  "The current status of the object"
  status: String
  "The template assigned to a node of content"
  template: ContentTemplate
  "The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made."
  title(
    "Format of the field output"
    format: PostObjectFieldFormatEnum
  ): String
  "The unique resource identifier path"
  uri: String
}

"Connection between the Page type and the Comment type"
type PageToCommentConnection implements CommentConnection & Connection {
  "Edges for the PageToCommentConnection connection"
  edges: [PageToCommentConnectionEdge!]!
  "The nodes of the connection, without the edges"
  nodes: [Comment!]!
  "Information about pagination in a connection."
  pageInfo: PageToCommentConnectionPageInfo!
}

"An edge in a connection"
type PageToCommentConnectionEdge implements CommentConnectionEdge & Edge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: Comment!
}

"Page Info on the &quot;PageToCommentConnection&quot;"
type PageToCommentConnectionPageInfo implements CommentConnectionPageInfo & PageInfo & WPPageInfo {
  "When paginating forwards, the cursor to continue."
  endCursor: String
  "When paginating forwards, are there more items?"
  hasNextPage: Boolean!
  "When paginating backwards, are there more items?"
  hasPreviousPage: Boolean!
  "Raw schema for page"
  seo: SEOPostTypePageInfo
  "When paginating backwards, the cursor to continue."
  startCursor: String
}

"Connection between the Page type and the page type"
type PageToPreviewConnectionEdge implements Edge & OneToOneConnection & PageConnectionEdge {
  "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
  cursor: String
  "The node of the connection, without the edges"
  node: Page!
}

"Connection between the Page type and the page type"
type PageToRevisionConnection implements Connection & PageConnection {
  "Edges for the PageToRevisionConnection connection"
  edges: [PageToRevisionConnectionEdge!]!
  "The nodes of the connection, without the edges"
  nodes: [Page!]!
  "Information about pagination in a connection."
  pageInfo: PageToRevisionConnectionPageInfo!
}

"An edge in a connection"
type PageToRevisionConnectionEdge implements Edge & PageConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: Page!
}

"Page Info on the &quot;PageToRevisionConnection&quot;"
type PageToRevisionConnectionPageInfo implements PageConnectionPageInfo & PageInfo & WPPageInfo {
  "When paginating forwards, the cursor to continue."
  endCursor: String
  "When paginating forwards, are there more items?"
  hasNextPage: Boolean!
  "When paginating backwards, are there more items?"
  hasPreviousPage: Boolean!
  "Raw schema for page"
  seo: SEOPostTypePageInfo
  "When paginating backwards, the cursor to continue."
  startCursor: String
}

"An plugin object"
type Plugin implements Node {
  "Name of the plugin author(s), may also be a company name."
  author: String
  "URI for the related author(s)/company website."
  authorUri: String
  "Description of the plugin."
  description: String
  "The globally unique identifier of the plugin object."
  id: ID!
  "Whether the object is restricted from the current viewer"
  isRestricted: Boolean
  "Display name of the plugin."
  name: String
  "Plugin path."
  path: String
  "URI for the plugin website. This is useful for directing users for support requests etc."
  pluginUri: String
  "Current version of the plugin."
  version: String
}

"The post type"
type Post implements ContentNode & DatabaseIdentifier & MenuItemLinkable & Node & NodeWithAuthor & NodeWithComments & NodeWithContentEditor & NodeWithExcerpt & NodeWithFeaturedImage & NodeWithRevisions & NodeWithTemplate & NodeWithTitle & NodeWithTrackbacks & Previewable & UniformResourceIdentifiable {
  "Connection between the NodeWithAuthor type and the User type"
  author: NodeWithAuthorToUserConnectionEdge
  "The database identifier of the author of the node"
  authorDatabaseId: Int
  "The globally unique identifier of the author of the node"
  authorId: ID
  "Connection between the Post type and the category type"
  categories(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String,
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String,
    "The number of items to return after the referenced \"after\" cursor"
    first: Int,
    "The number of items to return before the referenced \"before\" cursor"
    last: Int,
    "Arguments for filtering the connection"
    where: PostToCategoryConnectionWhereArgs
  ): PostToCategoryConnection
  "The number of comments. Even though WPGraphQL denotes this field as an integer, in WordPress this field should be saved as a numeric string for compatibility."
  commentCount: Int
  "Whether the comments are open or closed for this particular post."
  commentStatus: String
  "Connection between the Post type and the Comment type"
  comments(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String,
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String,
    "The number of items to return after the referenced \"after\" cursor"
    first: Int,
    "The number of items to return before the referenced \"before\" cursor"
    last: Int,
    "Arguments for filtering the connection"
    where: PostToCommentConnectionWhereArgs
  ): PostToCommentConnection
  "The content of the post."
  content(
    "Format of the field output"
    format: PostObjectFieldFormatEnum
  ): String
  "Connection between the ContentNode type and the ContentType type"
  contentType: ContentNodeToContentTypeConnectionEdge
  "The name of the Content Type the node belongs to"
  contentTypeName: String!
  "The unique identifier stored in the database"
  databaseId: Int!
  "Post publishing date."
  date: String
  "The publishing date set in GMT."
  dateGmt: String
  "The desired slug of the post"
  desiredSlug: String
  "If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds"
  editingLockedBy: ContentNodeToEditLockConnectionEdge
  "The RSS enclosure for the object"
  enclosure: String
  "Connection between the ContentNode type and the EnqueuedScript type"
  enqueuedScripts(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String,
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String,
    "The number of items to return after the referenced \"after\" cursor"
    first: Int,
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
  ): ContentNodeToEnqueuedScriptConnection
  "Connection between the ContentNode type and the EnqueuedStylesheet type"
  enqueuedStylesheets(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String,
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String,
    "The number of items to return after the referenced \"after\" cursor"
    first: Int,
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
  ): ContentNodeToEnqueuedStylesheetConnection
  "The excerpt of the post."
  excerpt(
    "Format of the field output"
    format: PostObjectFieldFormatEnum
  ): String
  "Connection between the NodeWithFeaturedImage type and the MediaItem type"
  featuredImage: NodeWithFeaturedImageToMediaItemConnectionEdge
  "The database identifier for the featured image node assigned to the content node"
  featuredImageDatabaseId: Int
  "Globally unique ID of the featured image assigned to the node"
  featuredImageId: ID
  "The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table."
  guid: String
  "The globally unique identifier of the post object."
  id: ID!
  "Whether the node is a Content Node"
  isContentNode: Boolean!
  "Whether the object is a node in the preview state"
  isPreview: Boolean
  "Whether the object is restricted from the current viewer"
  isRestricted: Boolean
  "True if the node is a revision of another node"
  isRevision: Boolean
  "Whether this page is sticky"
  isSticky: Boolean!
  "Whether the node is a Term"
  isTermNode: Boolean!
  "The user that most recently edited the node"
  lastEditedBy: ContentNodeToEditLastConnectionEdge
  "The permalink of the post"
  link: String
  "The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time."
  modified: String
  "The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT."
  modifiedGmt: String
  "Whether the pings are open or closed for this particular post."
  pingStatus: String
  "URLs that have been pinged."
  pinged: [String]
  "Connection between the Post type and the postFormat type"
  postFormats(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String,
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String,
    "The number of items to return after the referenced \"after\" cursor"
    first: Int,
    "The number of items to return before the referenced \"before\" cursor"
    last: Int,
    "Arguments for filtering the connection"
    where: PostToPostFormatConnectionWhereArgs
  ): PostToPostFormatConnection
  "The id field matches the WP_Post-&gt;ID field."
  postId: Int! @deprecated(reason: "Deprecated in favor of the databaseId field")
  "Connection between the Post type and the post type"
  preview: PostToPreviewConnectionEdge
  "The database id of the preview node"
  previewRevisionDatabaseId: Int
  "Whether the object is a node in the preview state"
  previewRevisionId: ID
  "If the current node is a revision, this field exposes the node this is a revision of. Returns null if the node is not a revision of another node."
  revisionOf: NodeWithRevisionsToContentNodeConnectionEdge
  "Connection between the Post type and the post type"
  revisions(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String,
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String,
    "The number of items to return after the referenced \"after\" cursor"
    first: Int,
    "The number of items to return before the referenced \"before\" cursor"
    last: Int,
    "Arguments for filtering the connection"
    where: PostToRevisionConnectionWhereArgs
  ): PostToRevisionConnection
  "The Yoast SEO data of the ContentNode"
  seo: PostTypeSEO
  "The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table."
  slug: String
  "The current status of the object"
  status: String
  "Connection between the Post type and the tag type"
  tags(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String,
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String,
    "The number of items to return after the referenced \"after\" cursor"
    first: Int,
    "The number of items to return before the referenced \"before\" cursor"
    last: Int,
    "Arguments for filtering the connection"
    where: PostToTagConnectionWhereArgs
  ): PostToTagConnection
  "The template assigned to the node"
  template: ContentTemplate
  "Connection between the Post type and the TermNode type"
  terms(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String,
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String,
    "The number of items to return after the referenced \"after\" cursor"
    first: Int,
    "The number of items to return before the referenced \"before\" cursor"
    last: Int,
    "Arguments for filtering the connection"
    where: PostToTermNodeConnectionWhereArgs
  ): PostToTermNodeConnection
  "The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made."
  title(
    "Format of the field output"
    format: PostObjectFieldFormatEnum
  ): String
  "URLs queued to be pinged."
  toPing: [String]
  "The unique resource identifier path"
  uri: String
}

"The postFormat type"
type PostFormat implements DatabaseIdentifier & Node & TermNode & UniformResourceIdentifiable {
  "Connection between the PostFormat type and the ContentNode type"
  contentNodes(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String,
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String,
    "The number of items to return after the referenced \"after\" cursor"
    first: Int,
    "The number of items to return before the referenced \"before\" cursor"
    last: Int,
    "Arguments for filtering the connection"
    where: PostFormatToContentNodeConnectionWhereArgs
  ): PostFormatToContentNodeConnection
  "The number of objects connected to the object"
  count: Int
  "The unique identifier stored in the database"
  databaseId: Int!
  "The description of the object"
  description: String
  "Connection between the TermNode type and the EnqueuedScript type"
  enqueuedScripts(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String,
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String,
    "The number of items to return after the referenced \"after\" cursor"
    first: Int,
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
  ): TermNodeToEnqueuedScriptConnection
  "Connection between the TermNode type and the EnqueuedStylesheet type"
  enqueuedStylesheets(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String,
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String,
    "The number of items to return after the referenced \"after\" cursor"
    first: Int,
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
  ): TermNodeToEnqueuedStylesheetConnection
  "The globally unique ID for the object"
  id: ID!
  "Whether the node is a Content Node"
  isContentNode: Boolean!
  "Whether the object is restricted from the current viewer"
  isRestricted: Boolean
  "Whether the node is a Term"
  isTermNode: Boolean!
  "The link to the term"
  link: String
  "The human friendly name of the object."
  name: String
  "The id field matches the WP_Post-&gt;ID field."
  postFormatId: Int @deprecated(reason: "Deprecated in favor of databaseId")
  "Connection between the PostFormat type and the post type"
  posts(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String,
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String,
    "The number of items to return after the referenced \"after\" cursor"
    first: Int,
    "The number of items to return before the referenced \"before\" cursor"
    last: Int,
    "Arguments for filtering the connection"
    where: PostFormatToPostConnectionWhereArgs
  ): PostFormatToPostConnection
  "The Yoast SEO data of the Форматы taxonomy."
  seo: TaxonomySEO
  "An alphanumeric identifier for the object unique to its type."
  slug: String
  "Connection between the PostFormat type and the Taxonomy type"
  taxonomy: PostFormatToTaxonomyConnectionEdge
  "The name of the taxonomy that the object is associated with"
  taxonomyName: String
  "The ID of the term group that this term object belongs to"
  termGroupId: Int
  "The taxonomy ID that the object is associated with"
  termTaxonomyId: Int
  "The unique resource identifier path"
  uri: String
}

"Connection between the PostFormat type and the ContentNode type"
type PostFormatToContentNodeConnection implements Connection & ContentNodeConnection {
  "Edges for the PostFormatToContentNodeConnection connection"
  edges: [PostFormatToContentNodeConnectionEdge!]!
  "The nodes of the connection, without the edges"
  nodes: [ContentNode!]!
  "Information about pagination in a connection."
  pageInfo: PostFormatToContentNodeConnectionPageInfo!
}

"An edge in a connection"
type PostFormatToContentNodeConnectionEdge implements ContentNodeConnectionEdge & Edge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: ContentNode!
}

"Page Info on the &quot;PostFormatToContentNodeConnection&quot;"
type PostFormatToContentNodeConnectionPageInfo implements ContentNodeConnectionPageInfo & PageInfo & WPPageInfo {
  "When paginating forwards, the cursor to continue."
  endCursor: String
  "When paginating forwards, are there more items?"
  hasNextPage: Boolean!
  "When paginating backwards, are there more items?"
  hasPreviousPage: Boolean!
  "Raw schema for page"
  seo: SEOPostTypePageInfo
  "When paginating backwards, the cursor to continue."
  startCursor: String
}

"Connection between the PostFormat type and the post type"
type PostFormatToPostConnection implements Connection & PostConnection {
  "Edges for the PostFormatToPostConnection connection"
  edges: [PostFormatToPostConnectionEdge!]!
  "The nodes of the connection, without the edges"
  nodes: [Post!]!
  "Information about pagination in a connection."
  pageInfo: PostFormatToPostConnectionPageInfo!
}

"An edge in a connection"
type PostFormatToPostConnectionEdge implements Edge & PostConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: Post!
}

"Page Info on the &quot;PostFormatToPostConnection&quot;"
type PostFormatToPostConnectionPageInfo implements PageInfo & PostConnectionPageInfo & WPPageInfo {
  "When paginating forwards, the cursor to continue."
  endCursor: String
  "When paginating forwards, are there more items?"
  hasNextPage: Boolean!
  "When paginating backwards, are there more items?"
  hasPreviousPage: Boolean!
  "Raw schema for page"
  seo: SEOPostTypePageInfo
  "When paginating backwards, the cursor to continue."
  startCursor: String
}

"Connection between the PostFormat type and the Taxonomy type"
type PostFormatToTaxonomyConnectionEdge implements Edge & OneToOneConnection & TaxonomyConnectionEdge {
  "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
  cursor: String
  "The node of the connection, without the edges"
  node: Taxonomy!
}

"Connection between the Post type and the category type"
type PostToCategoryConnection implements CategoryConnection & Connection {
  "Edges for the PostToCategoryConnection connection"
  edges: [PostToCategoryConnectionEdge!]!
  "The nodes of the connection, without the edges"
  nodes: [Category!]!
  "Information about pagination in a connection."
  pageInfo: PostToCategoryConnectionPageInfo!
}

"An edge in a connection"
type PostToCategoryConnectionEdge implements CategoryConnectionEdge & Edge {
  "A cursor for use in pagination"
  cursor: String
  "The Yoast SEO Primary category"
  isPrimary: Boolean
  "The item at the end of the edge"
  node: Category!
}

"Page Info on the &quot;PostToCategoryConnection&quot;"
type PostToCategoryConnectionPageInfo implements CategoryConnectionPageInfo & PageInfo & WPPageInfo {
  "When paginating forwards, the cursor to continue."
  endCursor: String
  "When paginating forwards, are there more items?"
  hasNextPage: Boolean!
  "When paginating backwards, are there more items?"
  hasPreviousPage: Boolean!
  "Raw schema for page"
  seo: SEOPostTypePageInfo
  "When paginating backwards, the cursor to continue."
  startCursor: String
}

"Connection between the Post type and the Comment type"
type PostToCommentConnection implements CommentConnection & Connection {
  "Edges for the PostToCommentConnection connection"
  edges: [PostToCommentConnectionEdge!]!
  "The nodes of the connection, without the edges"
  nodes: [Comment!]!
  "Information about pagination in a connection."
  pageInfo: PostToCommentConnectionPageInfo!
}

"An edge in a connection"
type PostToCommentConnectionEdge implements CommentConnectionEdge & Edge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: Comment!
}

"Page Info on the &quot;PostToCommentConnection&quot;"
type PostToCommentConnectionPageInfo implements CommentConnectionPageInfo & PageInfo & WPPageInfo {
  "When paginating forwards, the cursor to continue."
  endCursor: String
  "When paginating forwards, are there more items?"
  hasNextPage: Boolean!
  "When paginating backwards, are there more items?"
  hasPreviousPage: Boolean!
  "Raw schema for page"
  seo: SEOPostTypePageInfo
  "When paginating backwards, the cursor to continue."
  startCursor: String
}

"Connection between the Post type and the postFormat type"
type PostToPostFormatConnection implements Connection & PostFormatConnection {
  "Edges for the PostToPostFormatConnection connection"
  edges: [PostToPostFormatConnectionEdge!]!
  "The nodes of the connection, without the edges"
  nodes: [PostFormat!]!
  "Information about pagination in a connection."
  pageInfo: PostToPostFormatConnectionPageInfo!
}

"An edge in a connection"
type PostToPostFormatConnectionEdge implements Edge & PostFormatConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The Yoast SEO Primary post_format"
  isPrimary: Boolean
  "The item at the end of the edge"
  node: PostFormat!
}

"Page Info on the &quot;PostToPostFormatConnection&quot;"
type PostToPostFormatConnectionPageInfo implements PageInfo & PostFormatConnectionPageInfo & WPPageInfo {
  "When paginating forwards, the cursor to continue."
  endCursor: String
  "When paginating forwards, are there more items?"
  hasNextPage: Boolean!
  "When paginating backwards, are there more items?"
  hasPreviousPage: Boolean!
  "Raw schema for page"
  seo: SEOPostTypePageInfo
  "When paginating backwards, the cursor to continue."
  startCursor: String
}

"Connection between the Post type and the post type"
type PostToPreviewConnectionEdge implements Edge & OneToOneConnection & PostConnectionEdge {
  "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
  cursor: String
  "The node of the connection, without the edges"
  node: Post!
}

"Connection between the Post type and the post type"
type PostToRevisionConnection implements Connection & PostConnection {
  "Edges for the PostToRevisionConnection connection"
  edges: [PostToRevisionConnectionEdge!]!
  "The nodes of the connection, without the edges"
  nodes: [Post!]!
  "Information about pagination in a connection."
  pageInfo: PostToRevisionConnectionPageInfo!
}

"An edge in a connection"
type PostToRevisionConnectionEdge implements Edge & PostConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: Post!
}

"Page Info on the &quot;PostToRevisionConnection&quot;"
type PostToRevisionConnectionPageInfo implements PageInfo & PostConnectionPageInfo & WPPageInfo {
  "When paginating forwards, the cursor to continue."
  endCursor: String
  "When paginating forwards, are there more items?"
  hasNextPage: Boolean!
  "When paginating backwards, are there more items?"
  hasPreviousPage: Boolean!
  "Raw schema for page"
  seo: SEOPostTypePageInfo
  "When paginating backwards, the cursor to continue."
  startCursor: String
}

"Connection between the Post type and the tag type"
type PostToTagConnection implements Connection & TagConnection {
  "Edges for the PostToTagConnection connection"
  edges: [PostToTagConnectionEdge!]!
  "The nodes of the connection, without the edges"
  nodes: [Tag!]!
  "Information about pagination in a connection."
  pageInfo: PostToTagConnectionPageInfo!
}

"An edge in a connection"
type PostToTagConnectionEdge implements Edge & TagConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The Yoast SEO Primary post_tag"
  isPrimary: Boolean
  "The item at the end of the edge"
  node: Tag!
}

"Page Info on the &quot;PostToTagConnection&quot;"
type PostToTagConnectionPageInfo implements PageInfo & TagConnectionPageInfo & WPPageInfo {
  "When paginating forwards, the cursor to continue."
  endCursor: String
  "When paginating forwards, are there more items?"
  hasNextPage: Boolean!
  "When paginating backwards, are there more items?"
  hasPreviousPage: Boolean!
  "Raw schema for page"
  seo: SEOPostTypePageInfo
  "When paginating backwards, the cursor to continue."
  startCursor: String
}

"Connection between the Post type and the TermNode type"
type PostToTermNodeConnection implements Connection & TermNodeConnection {
  "Edges for the PostToTermNodeConnection connection"
  edges: [PostToTermNodeConnectionEdge!]!
  "The nodes of the connection, without the edges"
  nodes: [TermNode!]!
  "Information about pagination in a connection."
  pageInfo: PostToTermNodeConnectionPageInfo!
}

"An edge in a connection"
type PostToTermNodeConnectionEdge implements Edge & TermNodeConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: TermNode!
}

"Page Info on the &quot;PostToTermNodeConnection&quot;"
type PostToTermNodeConnectionPageInfo implements PageInfo & TermNodeConnectionPageInfo & WPPageInfo {
  "When paginating forwards, the cursor to continue."
  endCursor: String
  "When paginating forwards, are there more items?"
  hasNextPage: Boolean!
  "When paginating backwards, are there more items?"
  hasPreviousPage: Boolean!
  "Raw schema for page"
  seo: SEOPostTypePageInfo
  "When paginating backwards, the cursor to continue."
  startCursor: String
}

"Details for labels of the PostType"
type PostTypeLabelDetails {
  "Default is ‘Add New’ for both hierarchical and non-hierarchical types."
  addNew: String
  "Label for adding a new singular item."
  addNewItem: String
  "Label to signify all items in a submenu link."
  allItems: String
  "Label for archives in nav menus"
  archives: String
  "Label for the attributes meta box."
  attributes: String
  "Label for editing a singular item."
  editItem: String
  "Label for the Featured Image meta box title."
  featuredImage: String
  "Label for the table views hidden heading."
  filterItemsList: String
  "Label for the media frame button."
  insertIntoItem: String
  "Label for the table hidden heading."
  itemsList: String
  "Label for the table pagination hidden heading."
  itemsListNavigation: String
  "Label for the menu name."
  menuName: String
  "General name for the post type, usually plural."
  name: String
  "Label for the new item page title."
  newItem: String
  "Label used when no items are found."
  notFound: String
  "Label used when no items are in the trash."
  notFoundInTrash: String
  "Label used to prefix parents of hierarchical items."
  parentItemColon: String
  "Label for removing the featured image."
  removeFeaturedImage: String
  "Label for searching plural items."
  searchItems: String
  "Label for setting the featured image."
  setFeaturedImage: String
  "Name for one object of this post type."
  singularName: String
  "Label for the media frame filter."
  uploadedToThisItem: String
  "Label in the media frame for using a featured image."
  useFeaturedImage: String
  "Label for viewing a singular item."
  viewItem: String
  "Label for viewing post type archives."
  viewItems: String
}

type PostTypeSEO {
  breadcrumbs: [SEOPostTypeBreadcrumbs]
  canonical: String
  cornerstone: Boolean
  focuskw: String
  fullHead: String
  metaDesc: String
  metaKeywords: String
  metaRobotsNofollow: String
  metaRobotsNoindex: String
  opengraphAuthor: String
  opengraphDescription: String
  opengraphImage: MediaItem
  opengraphModifiedTime: String
  opengraphPublishedTime: String
  opengraphPublisher: String
  opengraphSiteName: String
  opengraphTitle: String
  opengraphType: String
  opengraphUrl: String
  readingTime: Float
  schema: SEOPostTypeSchema
  title: String
  twitterDescription: String
  twitterImage: MediaItem
  twitterTitle: String
}

"The reading setting type"
type ReadingSettings {
  "ID страницы, на которой должны отображаться последние записи"
  pageForPosts: Int
  "ID страницы, которая должна отображаться на главной странице"
  pageOnFront: Int
  "Максимум страниц блога для показа."
  postsPerPage: Int
  "Что показать на главной странице"
  showOnFront: String
}

"The payload for the registerUser mutation."
type RegisterUserPayload {
  "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The User object mutation type."
  user: User
}

"The payload for the resetUserPassword mutation."
type ResetUserPasswordPayload {
  "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The User object mutation type."
  user: User
}

"The payload for the restoreComment mutation."
type RestoreCommentPayload {
  "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The restored comment object"
  comment: Comment
  "The ID of the restored comment"
  restoredId: ID
}

"The root mutation"
type RootMutation {
  "The createCategory mutation"
  createCategory(
    "Input for the createCategory mutation"
    input: CreateCategoryInput!
  ): CreateCategoryPayload
  "The createComment mutation"
  createComment(
    "Input for the createComment mutation"
    input: CreateCommentInput!
  ): CreateCommentPayload
  "The createCourse mutation"
  createCourse(
    "Input for the createCourse mutation"
    input: CreateCourseInput!
  ): CreateCoursePayload
  "The createGeneralFragment mutation"
  createGeneralFragment(
    "Input for the createGeneralFragment mutation"
    input: CreateGeneralFragmentInput!
  ): CreateGeneralFragmentPayload
  "The createIndividualCourse mutation"
  createIndividualCourse(
    "Input for the createIndividualCourse mutation"
    input: CreateIndividualCourseInput!
  ): CreateIndividualCoursePayload
  "The createMediaItem mutation"
  createMediaItem(
    "Input for the createMediaItem mutation"
    input: CreateMediaItemInput!
  ): CreateMediaItemPayload
  "The createPage mutation"
  createPage(
    "Input for the createPage mutation"
    input: CreatePageInput!
  ): CreatePagePayload
  "The createPost mutation"
  createPost(
    "Input for the createPost mutation"
    input: CreatePostInput!
  ): CreatePostPayload
  "The createPostFormat mutation"
  createPostFormat(
    "Input for the createPostFormat mutation"
    input: CreatePostFormatInput!
  ): CreatePostFormatPayload
  "The createTag mutation"
  createTag(
    "Input for the createTag mutation"
    input: CreateTagInput!
  ): CreateTagPayload
  "The createUser mutation"
  createUser(
    "Input for the createUser mutation"
    input: CreateUserInput!
  ): CreateUserPayload
  "The deleteCategory mutation"
  deleteCategory(
    "Input for the deleteCategory mutation"
    input: DeleteCategoryInput!
  ): DeleteCategoryPayload
  "The deleteComment mutation"
  deleteComment(
    "Input for the deleteComment mutation"
    input: DeleteCommentInput!
  ): DeleteCommentPayload
  "The deleteCourse mutation"
  deleteCourse(
    "Input for the deleteCourse mutation"
    input: DeleteCourseInput!
  ): DeleteCoursePayload
  "The deleteGeneralFragment mutation"
  deleteGeneralFragment(
    "Input for the deleteGeneralFragment mutation"
    input: DeleteGeneralFragmentInput!
  ): DeleteGeneralFragmentPayload
  "The deleteIndividualCourse mutation"
  deleteIndividualCourse(
    "Input for the deleteIndividualCourse mutation"
    input: DeleteIndividualCourseInput!
  ): DeleteIndividualCoursePayload
  "The deleteMediaItem mutation"
  deleteMediaItem(
    "Input for the deleteMediaItem mutation"
    input: DeleteMediaItemInput!
  ): DeleteMediaItemPayload
  "The deletePage mutation"
  deletePage(
    "Input for the deletePage mutation"
    input: DeletePageInput!
  ): DeletePagePayload
  "The deletePost mutation"
  deletePost(
    "Input for the deletePost mutation"
    input: DeletePostInput!
  ): DeletePostPayload
  "The deletePostFormat mutation"
  deletePostFormat(
    "Input for the deletePostFormat mutation"
    input: DeletePostFormatInput!
  ): DeletePostFormatPayload
  "The deleteTag mutation"
  deleteTag(
    "Input for the deleteTag mutation"
    input: DeleteTagInput!
  ): DeleteTagPayload
  "The deleteUser mutation"
  deleteUser(
    "Input for the deleteUser mutation"
    input: DeleteUserInput!
  ): DeleteUserPayload
  "Increase the count."
  increaseCount(
    "The count to increase"
    count: Int
  ): Int
  "The registerUser mutation"
  registerUser(
    "Input for the registerUser mutation"
    input: RegisterUserInput!
  ): RegisterUserPayload
  "The resetUserPassword mutation"
  resetUserPassword(
    "Input for the resetUserPassword mutation"
    input: ResetUserPasswordInput!
  ): ResetUserPasswordPayload
  "The restoreComment mutation"
  restoreComment(
    "Input for the restoreComment mutation"
    input: RestoreCommentInput!
  ): RestoreCommentPayload
  "Send password reset email to user"
  sendPasswordResetEmail(
    "Input for the sendPasswordResetEmail mutation"
    input: SendPasswordResetEmailInput!
  ): SendPasswordResetEmailPayload
  "The updateCategory mutation"
  updateCategory(
    "Input for the updateCategory mutation"
    input: UpdateCategoryInput!
  ): UpdateCategoryPayload
  "The updateComment mutation"
  updateComment(
    "Input for the updateComment mutation"
    input: UpdateCommentInput!
  ): UpdateCommentPayload
  "The updateCourse mutation"
  updateCourse(
    "Input for the updateCourse mutation"
    input: UpdateCourseInput!
  ): UpdateCoursePayload
  "The updateGeneralFragment mutation"
  updateGeneralFragment(
    "Input for the updateGeneralFragment mutation"
    input: UpdateGeneralFragmentInput!
  ): UpdateGeneralFragmentPayload
  "The updateIndividualCourse mutation"
  updateIndividualCourse(
    "Input for the updateIndividualCourse mutation"
    input: UpdateIndividualCourseInput!
  ): UpdateIndividualCoursePayload
  "The updateMediaItem mutation"
  updateMediaItem(
    "Input for the updateMediaItem mutation"
    input: UpdateMediaItemInput!
  ): UpdateMediaItemPayload
  "The updatePage mutation"
  updatePage(
    "Input for the updatePage mutation"
    input: UpdatePageInput!
  ): UpdatePagePayload
  "The updatePost mutation"
  updatePost(
    "Input for the updatePost mutation"
    input: UpdatePostInput!
  ): UpdatePostPayload
  "The updatePostFormat mutation"
  updatePostFormat(
    "Input for the updatePostFormat mutation"
    input: UpdatePostFormatInput!
  ): UpdatePostFormatPayload
  "The updateSettings mutation"
  updateSettings(
    "Input for the updateSettings mutation"
    input: UpdateSettingsInput!
  ): UpdateSettingsPayload
  "The updateTag mutation"
  updateTag(
    "Input for the updateTag mutation"
    input: UpdateTagInput!
  ): UpdateTagPayload
  "The updateUser mutation"
  updateUser(
    "Input for the updateUser mutation"
    input: UpdateUserInput!
  ): UpdateUserPayload
}

"The root entry point into the Graph"
type RootQuery {
  "Entry point to get all settings for the site"
  allSettings: Settings
  "Connection between the RootQuery type and the category type"
  categories(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String,
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String,
    "The number of items to return after the referenced \"after\" cursor"
    first: Int,
    "The number of items to return before the referenced \"before\" cursor"
    last: Int,
    "Arguments for filtering the connection"
    where: RootQueryToCategoryConnectionWhereArgs
  ): RootQueryToCategoryConnection
  "A 0bject"
  category(
    "The globally unique identifier of the object."
    id: ID!,
    "Type of unique identifier to fetch by. Default is Global ID"
    idType: CategoryIdType
  ): Category
  "Returns a Comment"
  comment(
    "Unique identifier for the comment node."
    id: ID!,
    "Type of unique identifier to fetch a comment by. Default is Global ID"
    idType: CommentNodeIdTypeEnum
  ): Comment
  "Connection between the RootQuery type and the Comment type"
  comments(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String,
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String,
    "The number of items to return after the referenced \"after\" cursor"
    first: Int,
    "The number of items to return before the referenced \"before\" cursor"
    last: Int,
    "Arguments for filtering the connection"
    where: RootQueryToCommentConnectionWhereArgs
  ): RootQueryToCommentConnection
  "A node used to manage content"
  contentNode(
    "Whether to return the Preview Node instead of the Published Node. When the ID of a Node is provided along with asPreview being set to true, the preview node with un-published changes will be returned instead of the published node. If no preview node exists or the requester doesn't have proper capabilities to preview, no node will be returned. If the ID provided is a URI and has a preview query arg, it will be used as a fallback if the \"asPreview\" argument is not explicitly provided as an argument."
    asPreview: Boolean,
    "The content type the node is used for. Required when idType is set to \"name\" or \"slug\""
    contentType: ContentTypeEnum,
    "Unique identifier for the content node."
    id: ID!,
    "Type of unique identifier to fetch a content node by. Default is Global ID"
    idType: ContentNodeIdTypeEnum
  ): ContentNode
  "Connection between the RootQuery type and the ContentNode type"
  contentNodes(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String,
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String,
    "The number of items to return after the referenced \"after\" cursor"
    first: Int,
    "The number of items to return before the referenced \"before\" cursor"
    last: Int,
    "Arguments for filtering the connection"
    where: RootQueryToContentNodeConnectionWhereArgs
  ): RootQueryToContentNodeConnection
  "Fetch a Content Type node by unique Identifier"
  contentType(
    "Unique Identifier for the Content Type node."
    id: ID!,
    "Type of unique identifier to fetch a content type by. Default is Global ID"
    idType: ContentTypeIdTypeEnum
  ): ContentType
  "Connection between the RootQuery type and the ContentType type"
  contentTypes(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String,
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String,
    "The number of items to return after the referenced \"after\" cursor"
    first: Int,
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
  ): RootQueryToContentTypeConnection
  "An object of the course Type. "
  course(
    "Whether to return the Preview Node instead of the Published Node. When the ID of a Node is provided along with asPreview being set to true, the preview node with un-published changes will be returned instead of the published node. If no preview node exists or the requester doesn't have proper capabilities to preview, no node will be returned. If the ID provided is a URI and has a preview query arg, it will be used as a fallback if the \"asPreview\" argument is not explicitly provided as an argument."
    asPreview: Boolean,
    "The globally unique identifier of the object."
    id: ID!,
    "Type of unique identifier to fetch by. Default is Global ID"
    idType: CourseIdType
  ): Course
  "A course object"
  courseBy(
    "Get the course by its database ID"
    courseId: Int,
    "Get the course object by its global ID"
    id: ID,
    "Get the course by its uri"
    uri: String
  ): Course @deprecated(reason: "Deprecated in favor of using the single entry point for this type with ID and IDType fields. For example, instead of postBy( id: &quot;&quot; ), use post(id: &quot;&quot; idType: &quot;&quot;)")
  "Connection between the RootQuery type and the course type"
  courses(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String,
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String,
    "The number of items to return after the referenced \"after\" cursor"
    first: Int,
    "The number of items to return before the referenced \"before\" cursor"
    last: Int,
    "Arguments for filtering the connection"
    where: RootQueryToCourseConnectionWhereArgs
  ): RootQueryToCourseConnection
  "Fields of the &#039;DiscussionSettings&#039; settings group"
  discussionSettings: DiscussionSettings
  "An object of the generalFragment Type. "
  generalFragment(
    "Whether to return the Preview Node instead of the Published Node. When the ID of a Node is provided along with asPreview being set to true, the preview node with un-published changes will be returned instead of the published node. If no preview node exists or the requester doesn't have proper capabilities to preview, no node will be returned. If the ID provided is a URI and has a preview query arg, it will be used as a fallback if the \"asPreview\" argument is not explicitly provided as an argument."
    asPreview: Boolean,
    "The globally unique identifier of the object."
    id: ID!,
    "Type of unique identifier to fetch by. Default is Global ID"
    idType: GeneralFragmentIdType
  ): GeneralFragment
  "A generalFragment object"
  generalFragmentBy(
    "Get the generalFragment by its database ID"
    generalFragmentId: Int,
    "Get the generalFragment object by its global ID"
    id: ID,
    "Get the generalFragment by its slug (only available for non-hierarchical types)"
    slug: String,
    "Get the generalFragment by its uri"
    uri: String
  ): GeneralFragment @deprecated(reason: "Deprecated in favor of using the single entry point for this type with ID and IDType fields. For example, instead of postBy( id: &quot;&quot; ), use post(id: &quot;&quot; idType: &quot;&quot;)")
  "Connection between the RootQuery type and the generalFragment type"
  generalFragments(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String,
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String,
    "The number of items to return after the referenced \"after\" cursor"
    first: Int,
    "The number of items to return before the referenced \"before\" cursor"
    last: Int,
    "Arguments for filtering the connection"
    where: RootQueryToGeneralFragmentConnectionWhereArgs
  ): RootQueryToGeneralFragmentConnection
  "Fields of the &#039;GeneralSettings&#039; settings group"
  generalSettings: GeneralSettings
  "An object of the individualCourse Type. "
  individualCourse(
    "Whether to return the Preview Node instead of the Published Node. When the ID of a Node is provided along with asPreview being set to true, the preview node with un-published changes will be returned instead of the published node. If no preview node exists or the requester doesn't have proper capabilities to preview, no node will be returned. If the ID provided is a URI and has a preview query arg, it will be used as a fallback if the \"asPreview\" argument is not explicitly provided as an argument."
    asPreview: Boolean,
    "The globally unique identifier of the object."
    id: ID!,
    "Type of unique identifier to fetch by. Default is Global ID"
    idType: IndividualCourseIdType
  ): IndividualCourse
  "A individualCourse object"
  individualCourseBy(
    "Get the individualCourse object by its global ID"
    id: ID,
    "Get the individualCourse by its database ID"
    individualCourseId: Int,
    "Get the individualCourse by its slug (only available for non-hierarchical types)"
    slug: String,
    "Get the individualCourse by its uri"
    uri: String
  ): IndividualCourse @deprecated(reason: "Deprecated in favor of using the single entry point for this type with ID and IDType fields. For example, instead of postBy( id: &quot;&quot; ), use post(id: &quot;&quot; idType: &quot;&quot;)")
  "Connection between the RootQuery type and the individualCourse type"
  individualCourses(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String,
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String,
    "The number of items to return after the referenced \"after\" cursor"
    first: Int,
    "The number of items to return before the referenced \"before\" cursor"
    last: Int,
    "Arguments for filtering the connection"
    where: RootQueryToIndividualCourseConnectionWhereArgs
  ): RootQueryToIndividualCourseConnection
  "An object of the mediaItem Type. "
  mediaItem(
    "Whether to return the Preview Node instead of the Published Node. When the ID of a Node is provided along with asPreview being set to true, the preview node with un-published changes will be returned instead of the published node. If no preview node exists or the requester doesn't have proper capabilities to preview, no node will be returned. If the ID provided is a URI and has a preview query arg, it will be used as a fallback if the \"asPreview\" argument is not explicitly provided as an argument."
    asPreview: Boolean,
    "The globally unique identifier of the object."
    id: ID!,
    "Type of unique identifier to fetch by. Default is Global ID"
    idType: MediaItemIdType
  ): MediaItem
  "A mediaItem object"
  mediaItemBy(
    "Get the mediaItem object by its global ID"
    id: ID,
    "Get the mediaItem by its database ID"
    mediaItemId: Int,
    "Get the mediaItem by its slug (only available for non-hierarchical types)"
    slug: String,
    "Get the mediaItem by its uri"
    uri: String
  ): MediaItem @deprecated(reason: "Deprecated in favor of using the single entry point for this type with ID and IDType fields. For example, instead of postBy( id: &quot;&quot; ), use post(id: &quot;&quot; idType: &quot;&quot;)")
  "Connection between the RootQuery type and the mediaItem type"
  mediaItems(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String,
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String,
    "The number of items to return after the referenced \"after\" cursor"
    first: Int,
    "The number of items to return before the referenced \"before\" cursor"
    last: Int,
    "Arguments for filtering the connection"
    where: RootQueryToMediaItemConnectionWhereArgs
  ): RootQueryToMediaItemConnection
  "A WordPress navigation menu"
  menu(
    "The globally unique identifier of the menu."
    id: ID!,
    "Type of unique identifier to fetch a menu by. Default is Global ID"
    idType: MenuNodeIdTypeEnum
  ): Menu
  "A WordPress navigation menu item"
  menuItem(
    "The globally unique identifier of the menu item."
    id: ID!,
    "Type of unique identifier to fetch a menu item by. Default is Global ID"
    idType: MenuItemNodeIdTypeEnum
  ): MenuItem
  "Connection between the RootQuery type and the MenuItem type"
  menuItems(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String,
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String,
    "The number of items to return after the referenced \"after\" cursor"
    first: Int,
    "The number of items to return before the referenced \"before\" cursor"
    last: Int,
    "Arguments for filtering the connection"
    where: RootQueryToMenuItemConnectionWhereArgs
  ): RootQueryToMenuItemConnection
  "Connection between the RootQuery type and the Menu type"
  menus(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String,
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String,
    "The number of items to return after the referenced \"after\" cursor"
    first: Int,
    "The number of items to return before the referenced \"before\" cursor"
    last: Int,
    "Arguments for filtering the connection"
    where: RootQueryToMenuConnectionWhereArgs
  ): RootQueryToMenuConnection
  "Fetches an object given its ID"
  node(
    "The unique identifier of the node"
    id: ID
  ): Node
  "Fetches an object given its Unique Resource Identifier"
  nodeByUri(
    "Unique Resource Identifier in the form of a path or permalink for a node. Ex: \"/hello-world\""
    uri: String!
  ): UniformResourceIdentifiable
  "An object of the page Type. "
  page(
    "Whether to return the Preview Node instead of the Published Node. When the ID of a Node is provided along with asPreview being set to true, the preview node with un-published changes will be returned instead of the published node. If no preview node exists or the requester doesn't have proper capabilities to preview, no node will be returned. If the ID provided is a URI and has a preview query arg, it will be used as a fallback if the \"asPreview\" argument is not explicitly provided as an argument."
    asPreview: Boolean,
    "The globally unique identifier of the object."
    id: ID!,
    "Type of unique identifier to fetch by. Default is Global ID"
    idType: PageIdType
  ): Page
  "A page object"
  pageBy(
    "Get the page object by its global ID"
    id: ID,
    "Get the page by its database ID"
    pageId: Int,
    "Get the page by its uri"
    uri: String
  ): Page @deprecated(reason: "Deprecated in favor of using the single entry point for this type with ID and IDType fields. For example, instead of postBy( id: &quot;&quot; ), use post(id: &quot;&quot; idType: &quot;&quot;)")
  "Connection between the RootQuery type and the page type"
  pages(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String,
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String,
    "The number of items to return after the referenced \"after\" cursor"
    first: Int,
    "The number of items to return before the referenced \"before\" cursor"
    last: Int,
    "Arguments for filtering the connection"
    where: RootQueryToPageConnectionWhereArgs
  ): RootQueryToPageConnection
  "A WordPress plugin"
  plugin(
    "The globally unique identifier of the plugin."
    id: ID!
  ): Plugin
  "Connection between the RootQuery type and the Plugin type"
  plugins(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String,
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String,
    "The number of items to return after the referenced \"after\" cursor"
    first: Int,
    "The number of items to return before the referenced \"before\" cursor"
    last: Int,
    "Arguments for filtering the connection"
    where: RootQueryToPluginConnectionWhereArgs
  ): RootQueryToPluginConnection
  "An object of the post Type. "
  post(
    "Whether to return the Preview Node instead of the Published Node. When the ID of a Node is provided along with asPreview being set to true, the preview node with un-published changes will be returned instead of the published node. If no preview node exists or the requester doesn't have proper capabilities to preview, no node will be returned. If the ID provided is a URI and has a preview query arg, it will be used as a fallback if the \"asPreview\" argument is not explicitly provided as an argument."
    asPreview: Boolean,
    "The globally unique identifier of the object."
    id: ID!,
    "Type of unique identifier to fetch by. Default is Global ID"
    idType: PostIdType
  ): Post
  "A post object"
  postBy(
    "Get the post object by its global ID"
    id: ID,
    "Get the post by its database ID"
    postId: Int,
    "Get the post by its slug (only available for non-hierarchical types)"
    slug: String,
    "Get the post by its uri"
    uri: String
  ): Post @deprecated(reason: "Deprecated in favor of using the single entry point for this type with ID and IDType fields. For example, instead of postBy( id: &quot;&quot; ), use post(id: &quot;&quot; idType: &quot;&quot;)")
  "A 0bject"
  postFormat(
    "The globally unique identifier of the object."
    id: ID!,
    "Type of unique identifier to fetch by. Default is Global ID"
    idType: PostFormatIdType
  ): PostFormat
  "Connection between the RootQuery type and the postFormat type"
  postFormats(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String,
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String,
    "The number of items to return after the referenced \"after\" cursor"
    first: Int,
    "The number of items to return before the referenced \"before\" cursor"
    last: Int,
    "Arguments for filtering the connection"
    where: RootQueryToPostFormatConnectionWhereArgs
  ): RootQueryToPostFormatConnection
  "Connection between the RootQuery type and the post type"
  posts(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String,
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String,
    "The number of items to return after the referenced \"after\" cursor"
    first: Int,
    "The number of items to return before the referenced \"before\" cursor"
    last: Int,
    "Arguments for filtering the connection"
    where: RootQueryToPostConnectionWhereArgs
  ): RootQueryToPostConnection
  "Fields of the &#039;ReadingSettings&#039; settings group"
  readingSettings: ReadingSettings
  "Connection between the RootQuery type and the EnqueuedScript type"
  registeredScripts(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String,
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String,
    "The number of items to return after the referenced \"after\" cursor"
    first: Int,
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
  ): RootQueryToEnqueuedScriptConnection
  "Connection between the RootQuery type and the EnqueuedStylesheet type"
  registeredStylesheets(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String,
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String,
    "The number of items to return after the referenced \"after\" cursor"
    first: Int,
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
  ): RootQueryToEnqueuedStylesheetConnection
  "Connection between the RootQuery type and the ContentNode type"
  revisions(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String,
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String,
    "The number of items to return after the referenced \"after\" cursor"
    first: Int,
    "The number of items to return before the referenced \"before\" cursor"
    last: Int,
    "Arguments for filtering the connection"
    where: RootQueryToRevisionsConnectionWhereArgs
  ): RootQueryToRevisionsConnection
  "Returns seo site data"
  seo: SEOConfig
  "A 0bject"
  tag(
    "The globally unique identifier of the object."
    id: ID!,
    "Type of unique identifier to fetch by. Default is Global ID"
    idType: TagIdType
  ): Tag
  "Connection between the RootQuery type and the tag type"
  tags(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String,
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String,
    "The number of items to return after the referenced \"after\" cursor"
    first: Int,
    "The number of items to return before the referenced \"before\" cursor"
    last: Int,
    "Arguments for filtering the connection"
    where: RootQueryToTagConnectionWhereArgs
  ): RootQueryToTagConnection
  "Connection between the RootQuery type and the Taxonomy type"
  taxonomies(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String,
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String,
    "The number of items to return after the referenced \"after\" cursor"
    first: Int,
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
  ): RootQueryToTaxonomyConnection
  "Fetch a Taxonomy node by unique Identifier"
  taxonomy(
    "Unique Identifier for the Taxonomy node."
    id: ID!,
    "Type of unique identifier to fetch a taxonomy by. Default is Global ID"
    idType: TaxonomyIdTypeEnum
  ): Taxonomy
  "A node in a taxonomy used to group and relate content nodes"
  termNode(
    "Unique identifier for the term node."
    id: ID!,
    "Type of unique identifier to fetch a term node by. Default is Global ID"
    idType: TermNodeIdTypeEnum,
    "The taxonomy of the tern node. Required when idType is set to \"name\" or \"slug\""
    taxonomy: TaxonomyEnum
  ): TermNode
  "Connection between the RootQuery type and the TermNode type"
  terms(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String,
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String,
    "The number of items to return after the referenced \"after\" cursor"
    first: Int,
    "The number of items to return before the referenced \"before\" cursor"
    last: Int,
    "Arguments for filtering the connection"
    where: RootQueryToTermNodeConnectionWhereArgs
  ): RootQueryToTermNodeConnection
  "A Theme object"
  theme(
    "The globally unique identifier of the theme."
    id: ID!
  ): Theme
  "Connection between the RootQuery type and the Theme type"
  themes(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String,
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String,
    "The number of items to return after the referenced \"after\" cursor"
    first: Int,
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
  ): RootQueryToThemeConnection
  "Returns a user"
  user(
    "The globally unique identifier of the user."
    id: ID!,
    "Type of unique identifier to fetch a user by. Default is Global ID"
    idType: UserNodeIdTypeEnum
  ): User
  "Returns a user role"
  userRole(
    "The globally unique identifier of the user object."
    id: ID!
  ): UserRole
  "Connection between the RootQuery type and the UserRole type"
  userRoles(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String,
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String,
    "The number of items to return after the referenced \"after\" cursor"
    first: Int,
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
  ): RootQueryToUserRoleConnection
  "Connection between the RootQuery type and the User type"
  users(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String,
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String,
    "The number of items to return after the referenced \"after\" cursor"
    first: Int,
    "The number of items to return before the referenced \"before\" cursor"
    last: Int,
    "Arguments for filtering the connection"
    where: RootQueryToUserConnectionWhereArgs
  ): RootQueryToUserConnection
  "Returns the current user"
  viewer: User
  "Fields of the &#039;WritingSettings&#039; settings group"
  writingSettings: WritingSettings
}

"Connection between the RootQuery type and the category type"
type RootQueryToCategoryConnection implements CategoryConnection & Connection {
  "Edges for the RootQueryToCategoryConnection connection"
  edges: [RootQueryToCategoryConnectionEdge!]!
  "The nodes of the connection, without the edges"
  nodes: [Category!]!
  "Information about pagination in a connection."
  pageInfo: RootQueryToCategoryConnectionPageInfo!
}

"An edge in a connection"
type RootQueryToCategoryConnectionEdge implements CategoryConnectionEdge & Edge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: Category!
}

"Page Info on the &quot;RootQueryToCategoryConnection&quot;"
type RootQueryToCategoryConnectionPageInfo implements CategoryConnectionPageInfo & PageInfo & WPPageInfo {
  "When paginating forwards, the cursor to continue."
  endCursor: String
  "When paginating forwards, are there more items?"
  hasNextPage: Boolean!
  "When paginating backwards, are there more items?"
  hasPreviousPage: Boolean!
  "Raw schema for page"
  seo: SEOPostTypePageInfo
  "When paginating backwards, the cursor to continue."
  startCursor: String
}

"Connection between the RootQuery type and the Comment type"
type RootQueryToCommentConnection implements CommentConnection & Connection {
  "Edges for the RootQueryToCommentConnection connection"
  edges: [RootQueryToCommentConnectionEdge!]!
  "The nodes of the connection, without the edges"
  nodes: [Comment!]!
  "Information about pagination in a connection."
  pageInfo: RootQueryToCommentConnectionPageInfo!
}

"An edge in a connection"
type RootQueryToCommentConnectionEdge implements CommentConnectionEdge & Edge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: Comment!
}

"Page Info on the &quot;RootQueryToCommentConnection&quot;"
type RootQueryToCommentConnectionPageInfo implements CommentConnectionPageInfo & PageInfo & WPPageInfo {
  "When paginating forwards, the cursor to continue."
  endCursor: String
  "When paginating forwards, are there more items?"
  hasNextPage: Boolean!
  "When paginating backwards, are there more items?"
  hasPreviousPage: Boolean!
  "Raw schema for page"
  seo: SEOPostTypePageInfo
  "When paginating backwards, the cursor to continue."
  startCursor: String
}

"Connection between the RootQuery type and the ContentNode type"
type RootQueryToContentNodeConnection implements Connection & ContentNodeConnection {
  "Edges for the RootQueryToContentNodeConnection connection"
  edges: [RootQueryToContentNodeConnectionEdge!]!
  "The nodes of the connection, without the edges"
  nodes: [ContentNode!]!
  "Information about pagination in a connection."
  pageInfo: RootQueryToContentNodeConnectionPageInfo!
}

"An edge in a connection"
type RootQueryToContentNodeConnectionEdge implements ContentNodeConnectionEdge & Edge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: ContentNode!
}

"Page Info on the &quot;RootQueryToContentNodeConnection&quot;"
type RootQueryToContentNodeConnectionPageInfo implements ContentNodeConnectionPageInfo & PageInfo & WPPageInfo {
  "When paginating forwards, the cursor to continue."
  endCursor: String
  "When paginating forwards, are there more items?"
  hasNextPage: Boolean!
  "When paginating backwards, are there more items?"
  hasPreviousPage: Boolean!
  "Raw schema for page"
  seo: SEOPostTypePageInfo
  "When paginating backwards, the cursor to continue."
  startCursor: String
}

"Connection between the RootQuery type and the ContentType type"
type RootQueryToContentTypeConnection implements Connection & ContentTypeConnection {
  "Edges for the RootQueryToContentTypeConnection connection"
  edges: [RootQueryToContentTypeConnectionEdge!]!
  "The nodes of the connection, without the edges"
  nodes: [ContentType!]!
  "Information about pagination in a connection."
  pageInfo: RootQueryToContentTypeConnectionPageInfo!
}

"An edge in a connection"
type RootQueryToContentTypeConnectionEdge implements ContentTypeConnectionEdge & Edge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: ContentType!
}

"Page Info on the &quot;RootQueryToContentTypeConnection&quot;"
type RootQueryToContentTypeConnectionPageInfo implements ContentTypeConnectionPageInfo & PageInfo & WPPageInfo {
  "When paginating forwards, the cursor to continue."
  endCursor: String
  "When paginating forwards, are there more items?"
  hasNextPage: Boolean!
  "When paginating backwards, are there more items?"
  hasPreviousPage: Boolean!
  "Raw schema for page"
  seo: SEOPostTypePageInfo
  "When paginating backwards, the cursor to continue."
  startCursor: String
}

"Connection between the RootQuery type and the course type"
type RootQueryToCourseConnection implements Connection & CourseConnection {
  "Edges for the RootQueryToCourseConnection connection"
  edges: [RootQueryToCourseConnectionEdge!]!
  "The nodes of the connection, without the edges"
  nodes: [Course!]!
  "Information about pagination in a connection."
  pageInfo: RootQueryToCourseConnectionPageInfo!
}

"An edge in a connection"
type RootQueryToCourseConnectionEdge implements CourseConnectionEdge & Edge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: Course!
}

"Page Info on the &quot;RootQueryToCourseConnection&quot;"
type RootQueryToCourseConnectionPageInfo implements CourseConnectionPageInfo & PageInfo & WPPageInfo {
  "When paginating forwards, the cursor to continue."
  endCursor: String
  "When paginating forwards, are there more items?"
  hasNextPage: Boolean!
  "When paginating backwards, are there more items?"
  hasPreviousPage: Boolean!
  "Raw schema for page"
  seo: SEOPostTypePageInfo
  "When paginating backwards, the cursor to continue."
  startCursor: String
}

"Connection between the RootQuery type and the EnqueuedScript type"
type RootQueryToEnqueuedScriptConnection implements Connection & EnqueuedScriptConnection {
  "Edges for the RootQueryToEnqueuedScriptConnection connection"
  edges: [RootQueryToEnqueuedScriptConnectionEdge!]!
  "The nodes of the connection, without the edges"
  nodes: [EnqueuedScript!]!
  "Information about pagination in a connection."
  pageInfo: RootQueryToEnqueuedScriptConnectionPageInfo!
}

"An edge in a connection"
type RootQueryToEnqueuedScriptConnectionEdge implements Edge & EnqueuedScriptConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: EnqueuedScript!
}

"Page Info on the &quot;RootQueryToEnqueuedScriptConnection&quot;"
type RootQueryToEnqueuedScriptConnectionPageInfo implements EnqueuedScriptConnectionPageInfo & PageInfo & WPPageInfo {
  "When paginating forwards, the cursor to continue."
  endCursor: String
  "When paginating forwards, are there more items?"
  hasNextPage: Boolean!
  "When paginating backwards, are there more items?"
  hasPreviousPage: Boolean!
  "Raw schema for page"
  seo: SEOPostTypePageInfo
  "When paginating backwards, the cursor to continue."
  startCursor: String
}

"Connection between the RootQuery type and the EnqueuedStylesheet type"
type RootQueryToEnqueuedStylesheetConnection implements Connection & EnqueuedStylesheetConnection {
  "Edges for the RootQueryToEnqueuedStylesheetConnection connection"
  edges: [RootQueryToEnqueuedStylesheetConnectionEdge!]!
  "The nodes of the connection, without the edges"
  nodes: [EnqueuedStylesheet!]!
  "Information about pagination in a connection."
  pageInfo: RootQueryToEnqueuedStylesheetConnectionPageInfo!
}

"An edge in a connection"
type RootQueryToEnqueuedStylesheetConnectionEdge implements Edge & EnqueuedStylesheetConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: EnqueuedStylesheet!
}

"Page Info on the &quot;RootQueryToEnqueuedStylesheetConnection&quot;"
type RootQueryToEnqueuedStylesheetConnectionPageInfo implements EnqueuedStylesheetConnectionPageInfo & PageInfo & WPPageInfo {
  "When paginating forwards, the cursor to continue."
  endCursor: String
  "When paginating forwards, are there more items?"
  hasNextPage: Boolean!
  "When paginating backwards, are there more items?"
  hasPreviousPage: Boolean!
  "Raw schema for page"
  seo: SEOPostTypePageInfo
  "When paginating backwards, the cursor to continue."
  startCursor: String
}

"Connection between the RootQuery type and the generalFragment type"
type RootQueryToGeneralFragmentConnection implements Connection & GeneralFragmentConnection {
  "Edges for the RootQueryToGeneralFragmentConnection connection"
  edges: [RootQueryToGeneralFragmentConnectionEdge!]!
  "The nodes of the connection, without the edges"
  nodes: [GeneralFragment!]!
  "Information about pagination in a connection."
  pageInfo: RootQueryToGeneralFragmentConnectionPageInfo!
}

"An edge in a connection"
type RootQueryToGeneralFragmentConnectionEdge implements Edge & GeneralFragmentConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: GeneralFragment!
}

"Page Info on the &quot;RootQueryToGeneralFragmentConnection&quot;"
type RootQueryToGeneralFragmentConnectionPageInfo implements GeneralFragmentConnectionPageInfo & PageInfo & WPPageInfo {
  "When paginating forwards, the cursor to continue."
  endCursor: String
  "When paginating forwards, are there more items?"
  hasNextPage: Boolean!
  "When paginating backwards, are there more items?"
  hasPreviousPage: Boolean!
  "Raw schema for page"
  seo: SEOPostTypePageInfo
  "When paginating backwards, the cursor to continue."
  startCursor: String
}

"Connection between the RootQuery type and the individualCourse type"
type RootQueryToIndividualCourseConnection implements Connection & IndividualCourseConnection {
  "Edges for the RootQueryToIndividualCourseConnection connection"
  edges: [RootQueryToIndividualCourseConnectionEdge!]!
  "The nodes of the connection, without the edges"
  nodes: [IndividualCourse!]!
  "Information about pagination in a connection."
  pageInfo: RootQueryToIndividualCourseConnectionPageInfo!
}

"An edge in a connection"
type RootQueryToIndividualCourseConnectionEdge implements Edge & IndividualCourseConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: IndividualCourse!
}

"Page Info on the &quot;RootQueryToIndividualCourseConnection&quot;"
type RootQueryToIndividualCourseConnectionPageInfo implements IndividualCourseConnectionPageInfo & PageInfo & WPPageInfo {
  "When paginating forwards, the cursor to continue."
  endCursor: String
  "When paginating forwards, are there more items?"
  hasNextPage: Boolean!
  "When paginating backwards, are there more items?"
  hasPreviousPage: Boolean!
  "Raw schema for page"
  seo: SEOPostTypePageInfo
  "When paginating backwards, the cursor to continue."
  startCursor: String
}

"Connection between the RootQuery type and the mediaItem type"
type RootQueryToMediaItemConnection implements Connection & MediaItemConnection {
  "Edges for the RootQueryToMediaItemConnection connection"
  edges: [RootQueryToMediaItemConnectionEdge!]!
  "The nodes of the connection, without the edges"
  nodes: [MediaItem!]!
  "Information about pagination in a connection."
  pageInfo: RootQueryToMediaItemConnectionPageInfo!
}

"An edge in a connection"
type RootQueryToMediaItemConnectionEdge implements Edge & MediaItemConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: MediaItem!
}

"Page Info on the &quot;RootQueryToMediaItemConnection&quot;"
type RootQueryToMediaItemConnectionPageInfo implements MediaItemConnectionPageInfo & PageInfo & WPPageInfo {
  "When paginating forwards, the cursor to continue."
  endCursor: String
  "When paginating forwards, are there more items?"
  hasNextPage: Boolean!
  "When paginating backwards, are there more items?"
  hasPreviousPage: Boolean!
  "Raw schema for page"
  seo: SEOPostTypePageInfo
  "When paginating backwards, the cursor to continue."
  startCursor: String
}

"Connection between the RootQuery type and the Menu type"
type RootQueryToMenuConnection implements Connection & MenuConnection {
  "Edges for the RootQueryToMenuConnection connection"
  edges: [RootQueryToMenuConnectionEdge!]!
  "The nodes of the connection, without the edges"
  nodes: [Menu!]!
  "Information about pagination in a connection."
  pageInfo: RootQueryToMenuConnectionPageInfo!
}

"An edge in a connection"
type RootQueryToMenuConnectionEdge implements Edge & MenuConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: Menu!
}

"Page Info on the &quot;RootQueryToMenuConnection&quot;"
type RootQueryToMenuConnectionPageInfo implements MenuConnectionPageInfo & PageInfo & WPPageInfo {
  "When paginating forwards, the cursor to continue."
  endCursor: String
  "When paginating forwards, are there more items?"
  hasNextPage: Boolean!
  "When paginating backwards, are there more items?"
  hasPreviousPage: Boolean!
  "Raw schema for page"
  seo: SEOPostTypePageInfo
  "When paginating backwards, the cursor to continue."
  startCursor: String
}

"Connection between the RootQuery type and the MenuItem type"
type RootQueryToMenuItemConnection implements Connection & MenuItemConnection {
  "Edges for the RootQueryToMenuItemConnection connection"
  edges: [RootQueryToMenuItemConnectionEdge!]!
  "The nodes of the connection, without the edges"
  nodes: [MenuItem!]!
  "Information about pagination in a connection."
  pageInfo: RootQueryToMenuItemConnectionPageInfo!
}

"An edge in a connection"
type RootQueryToMenuItemConnectionEdge implements Edge & MenuItemConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: MenuItem!
}

"Page Info on the &quot;RootQueryToMenuItemConnection&quot;"
type RootQueryToMenuItemConnectionPageInfo implements MenuItemConnectionPageInfo & PageInfo & WPPageInfo {
  "When paginating forwards, the cursor to continue."
  endCursor: String
  "When paginating forwards, are there more items?"
  hasNextPage: Boolean!
  "When paginating backwards, are there more items?"
  hasPreviousPage: Boolean!
  "Raw schema for page"
  seo: SEOPostTypePageInfo
  "When paginating backwards, the cursor to continue."
  startCursor: String
}

"Connection between the RootQuery type and the page type"
type RootQueryToPageConnection implements Connection & PageConnection {
  "Edges for the RootQueryToPageConnection connection"
  edges: [RootQueryToPageConnectionEdge!]!
  "The nodes of the connection, without the edges"
  nodes: [Page!]!
  "Information about pagination in a connection."
  pageInfo: RootQueryToPageConnectionPageInfo!
}

"An edge in a connection"
type RootQueryToPageConnectionEdge implements Edge & PageConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: Page!
}

"Page Info on the &quot;RootQueryToPageConnection&quot;"
type RootQueryToPageConnectionPageInfo implements PageConnectionPageInfo & PageInfo & WPPageInfo {
  "When paginating forwards, the cursor to continue."
  endCursor: String
  "When paginating forwards, are there more items?"
  hasNextPage: Boolean!
  "When paginating backwards, are there more items?"
  hasPreviousPage: Boolean!
  "Raw schema for page"
  seo: SEOPostTypePageInfo
  "When paginating backwards, the cursor to continue."
  startCursor: String
}

"Connection between the RootQuery type and the Plugin type"
type RootQueryToPluginConnection implements Connection & PluginConnection {
  "Edges for the RootQueryToPluginConnection connection"
  edges: [RootQueryToPluginConnectionEdge!]!
  "The nodes of the connection, without the edges"
  nodes: [Plugin!]!
  "Information about pagination in a connection."
  pageInfo: RootQueryToPluginConnectionPageInfo!
}

"An edge in a connection"
type RootQueryToPluginConnectionEdge implements Edge & PluginConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: Plugin!
}

"Page Info on the &quot;RootQueryToPluginConnection&quot;"
type RootQueryToPluginConnectionPageInfo implements PageInfo & PluginConnectionPageInfo & WPPageInfo {
  "When paginating forwards, the cursor to continue."
  endCursor: String
  "When paginating forwards, are there more items?"
  hasNextPage: Boolean!
  "When paginating backwards, are there more items?"
  hasPreviousPage: Boolean!
  "Raw schema for page"
  seo: SEOPostTypePageInfo
  "When paginating backwards, the cursor to continue."
  startCursor: String
}

"Connection between the RootQuery type and the post type"
type RootQueryToPostConnection implements Connection & PostConnection {
  "Edges for the RootQueryToPostConnection connection"
  edges: [RootQueryToPostConnectionEdge!]!
  "The nodes of the connection, without the edges"
  nodes: [Post!]!
  "Information about pagination in a connection."
  pageInfo: RootQueryToPostConnectionPageInfo!
}

"An edge in a connection"
type RootQueryToPostConnectionEdge implements Edge & PostConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: Post!
}

"Page Info on the &quot;RootQueryToPostConnection&quot;"
type RootQueryToPostConnectionPageInfo implements PageInfo & PostConnectionPageInfo & WPPageInfo {
  "When paginating forwards, the cursor to continue."
  endCursor: String
  "When paginating forwards, are there more items?"
  hasNextPage: Boolean!
  "When paginating backwards, are there more items?"
  hasPreviousPage: Boolean!
  "Raw schema for page"
  seo: SEOPostTypePageInfo
  "When paginating backwards, the cursor to continue."
  startCursor: String
}

"Connection between the RootQuery type and the postFormat type"
type RootQueryToPostFormatConnection implements Connection & PostFormatConnection {
  "Edges for the RootQueryToPostFormatConnection connection"
  edges: [RootQueryToPostFormatConnectionEdge!]!
  "The nodes of the connection, without the edges"
  nodes: [PostFormat!]!
  "Information about pagination in a connection."
  pageInfo: RootQueryToPostFormatConnectionPageInfo!
}

"An edge in a connection"
type RootQueryToPostFormatConnectionEdge implements Edge & PostFormatConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: PostFormat!
}

"Page Info on the &quot;RootQueryToPostFormatConnection&quot;"
type RootQueryToPostFormatConnectionPageInfo implements PageInfo & PostFormatConnectionPageInfo & WPPageInfo {
  "When paginating forwards, the cursor to continue."
  endCursor: String
  "When paginating forwards, are there more items?"
  hasNextPage: Boolean!
  "When paginating backwards, are there more items?"
  hasPreviousPage: Boolean!
  "Raw schema for page"
  seo: SEOPostTypePageInfo
  "When paginating backwards, the cursor to continue."
  startCursor: String
}

"Connection between the RootQuery type and the ContentNode type"
type RootQueryToRevisionsConnection implements Connection & ContentNodeConnection {
  "Edges for the RootQueryToRevisionsConnection connection"
  edges: [RootQueryToRevisionsConnectionEdge!]!
  "The nodes of the connection, without the edges"
  nodes: [ContentNode!]!
  "Information about pagination in a connection."
  pageInfo: RootQueryToRevisionsConnectionPageInfo!
}

"An edge in a connection"
type RootQueryToRevisionsConnectionEdge implements ContentNodeConnectionEdge & Edge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: ContentNode!
}

"Page Info on the &quot;RootQueryToRevisionsConnection&quot;"
type RootQueryToRevisionsConnectionPageInfo implements ContentNodeConnectionPageInfo & PageInfo & WPPageInfo {
  "When paginating forwards, the cursor to continue."
  endCursor: String
  "When paginating forwards, are there more items?"
  hasNextPage: Boolean!
  "When paginating backwards, are there more items?"
  hasPreviousPage: Boolean!
  "Raw schema for page"
  seo: SEOPostTypePageInfo
  "When paginating backwards, the cursor to continue."
  startCursor: String
}

"Connection between the RootQuery type and the tag type"
type RootQueryToTagConnection implements Connection & TagConnection {
  "Edges for the RootQueryToTagConnection connection"
  edges: [RootQueryToTagConnectionEdge!]!
  "The nodes of the connection, without the edges"
  nodes: [Tag!]!
  "Information about pagination in a connection."
  pageInfo: RootQueryToTagConnectionPageInfo!
}

"An edge in a connection"
type RootQueryToTagConnectionEdge implements Edge & TagConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: Tag!
}

"Page Info on the &quot;RootQueryToTagConnection&quot;"
type RootQueryToTagConnectionPageInfo implements PageInfo & TagConnectionPageInfo & WPPageInfo {
  "When paginating forwards, the cursor to continue."
  endCursor: String
  "When paginating forwards, are there more items?"
  hasNextPage: Boolean!
  "When paginating backwards, are there more items?"
  hasPreviousPage: Boolean!
  "Raw schema for page"
  seo: SEOPostTypePageInfo
  "When paginating backwards, the cursor to continue."
  startCursor: String
}

"Connection between the RootQuery type and the Taxonomy type"
type RootQueryToTaxonomyConnection implements Connection & TaxonomyConnection {
  "Edges for the RootQueryToTaxonomyConnection connection"
  edges: [RootQueryToTaxonomyConnectionEdge!]!
  "The nodes of the connection, without the edges"
  nodes: [Taxonomy!]!
  "Information about pagination in a connection."
  pageInfo: RootQueryToTaxonomyConnectionPageInfo!
}

"An edge in a connection"
type RootQueryToTaxonomyConnectionEdge implements Edge & TaxonomyConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: Taxonomy!
}

"Page Info on the &quot;RootQueryToTaxonomyConnection&quot;"
type RootQueryToTaxonomyConnectionPageInfo implements PageInfo & TaxonomyConnectionPageInfo & WPPageInfo {
  "When paginating forwards, the cursor to continue."
  endCursor: String
  "When paginating forwards, are there more items?"
  hasNextPage: Boolean!
  "When paginating backwards, are there more items?"
  hasPreviousPage: Boolean!
  "Raw schema for page"
  seo: SEOPostTypePageInfo
  "When paginating backwards, the cursor to continue."
  startCursor: String
}

"Connection between the RootQuery type and the TermNode type"
type RootQueryToTermNodeConnection implements Connection & TermNodeConnection {
  "Edges for the RootQueryToTermNodeConnection connection"
  edges: [RootQueryToTermNodeConnectionEdge!]!
  "The nodes of the connection, without the edges"
  nodes: [TermNode!]!
  "Information about pagination in a connection."
  pageInfo: RootQueryToTermNodeConnectionPageInfo!
}

"An edge in a connection"
type RootQueryToTermNodeConnectionEdge implements Edge & TermNodeConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: TermNode!
}

"Page Info on the &quot;RootQueryToTermNodeConnection&quot;"
type RootQueryToTermNodeConnectionPageInfo implements PageInfo & TermNodeConnectionPageInfo & WPPageInfo {
  "When paginating forwards, the cursor to continue."
  endCursor: String
  "When paginating forwards, are there more items?"
  hasNextPage: Boolean!
  "When paginating backwards, are there more items?"
  hasPreviousPage: Boolean!
  "Raw schema for page"
  seo: SEOPostTypePageInfo
  "When paginating backwards, the cursor to continue."
  startCursor: String
}

"Connection between the RootQuery type and the Theme type"
type RootQueryToThemeConnection implements Connection & ThemeConnection {
  "Edges for the RootQueryToThemeConnection connection"
  edges: [RootQueryToThemeConnectionEdge!]!
  "The nodes of the connection, without the edges"
  nodes: [Theme!]!
  "Information about pagination in a connection."
  pageInfo: RootQueryToThemeConnectionPageInfo!
}

"An edge in a connection"
type RootQueryToThemeConnectionEdge implements Edge & ThemeConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: Theme!
}

"Page Info on the &quot;RootQueryToThemeConnection&quot;"
type RootQueryToThemeConnectionPageInfo implements PageInfo & ThemeConnectionPageInfo & WPPageInfo {
  "When paginating forwards, the cursor to continue."
  endCursor: String
  "When paginating forwards, are there more items?"
  hasNextPage: Boolean!
  "When paginating backwards, are there more items?"
  hasPreviousPage: Boolean!
  "Raw schema for page"
  seo: SEOPostTypePageInfo
  "When paginating backwards, the cursor to continue."
  startCursor: String
}

"Connection between the RootQuery type and the User type"
type RootQueryToUserConnection implements Connection & UserConnection {
  "Edges for the RootQueryToUserConnection connection"
  edges: [RootQueryToUserConnectionEdge!]!
  "The nodes of the connection, without the edges"
  nodes: [User!]!
  "Information about pagination in a connection."
  pageInfo: RootQueryToUserConnectionPageInfo!
}

"An edge in a connection"
type RootQueryToUserConnectionEdge implements Edge & UserConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: User!
}

"Page Info on the &quot;RootQueryToUserConnection&quot;"
type RootQueryToUserConnectionPageInfo implements PageInfo & UserConnectionPageInfo & WPPageInfo {
  "When paginating forwards, the cursor to continue."
  endCursor: String
  "When paginating forwards, are there more items?"
  hasNextPage: Boolean!
  "When paginating backwards, are there more items?"
  hasPreviousPage: Boolean!
  "Raw schema for page"
  seo: SEOPostTypePageInfo
  "When paginating backwards, the cursor to continue."
  startCursor: String
}

"Connection between the RootQuery type and the UserRole type"
type RootQueryToUserRoleConnection implements Connection & UserRoleConnection {
  "Edges for the RootQueryToUserRoleConnection connection"
  edges: [RootQueryToUserRoleConnectionEdge!]!
  "The nodes of the connection, without the edges"
  nodes: [UserRole!]!
  "Information about pagination in a connection."
  pageInfo: RootQueryToUserRoleConnectionPageInfo!
}

"An edge in a connection"
type RootQueryToUserRoleConnectionEdge implements Edge & UserRoleConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: UserRole!
}

"Page Info on the &quot;RootQueryToUserRoleConnection&quot;"
type RootQueryToUserRoleConnectionPageInfo implements PageInfo & UserRoleConnectionPageInfo & WPPageInfo {
  "When paginating forwards, the cursor to continue."
  endCursor: String
  "When paginating forwards, are there more items?"
  hasNextPage: Boolean!
  "When paginating backwards, are there more items?"
  hasPreviousPage: Boolean!
  "Raw schema for page"
  seo: SEOPostTypePageInfo
  "When paginating backwards, the cursor to continue."
  startCursor: String
}

"The Yoast SEO breadcrumb config"
type SEOBreadcrumbs {
  archivePrefix: String
  boldLast: Boolean
  enabled: Boolean
  homeText: String
  notFoundText: String
  prefix: String
  searchPrefix: String
  separator: String
  showBlogPage: Boolean
}

"The Yoast SEO site level configuration data"
type SEOConfig {
  breadcrumbs: SEOBreadcrumbs
  contentTypes: SEOContentTypes
  meta: SEOGlobalMeta
  openGraph: SEOOpenGraph
  redirects: [SEORedirect]
  schema: SEOSchema
  social: SEOSocial
  webmaster: SEOWebmaster
}

"The Yoast SEO search appearance content types fields"
type SEOContentType {
  archive: SEOContentTypeArchive
  metaDesc: String
  metaRobotsNoindex: Boolean
  schema: SEOPageInfoSchema
  schemaType: String
  title: String
}

"The Yoast SEO search appearance content types fields"
type SEOContentTypeArchive {
  archiveLink: String
  breadcrumbTitle: String
  fullHead: String
  hasArchive: Boolean
  metaDesc: String
  metaRobotsFollow: String
  metaRobotsIndex: String
  metaRobotsNofollow: Boolean
  metaRobotsNoindex: Boolean
  title: String
}

"The Yoast SEO search appearance content types"
type SEOContentTypes {
  course: SEOContentType
  generalFragment: SEOContentType
  individualCourse: SEOContentType
  mediaItem: SEOContentType
  page: SEOContentType
  post: SEOContentType
}

"The Yoast SEO meta data"
type SEOGlobalMeta {
  author: SEOGlobalMetaAuthor
  config: SEOGlobalMetaConfig
  date: SEOGlobalMetaDate
  homepage: SEOGlobalMetaHome
  notFound: SEOGlobalMeta404
}

"The Yoast SEO meta 404 data"
type SEOGlobalMeta404 {
  breadcrumb: String
  title: String
}

"The Yoast SEO Author data"
type SEOGlobalMetaAuthor {
  description: String
  title: String
}

"The Yoast SEO meta config data"
type SEOGlobalMetaConfig {
  separator: String
}

"The Yoast SEO Date data"
type SEOGlobalMetaDate {
  description: String
  title: String
}

"The Yoast SEO homepage data"
type SEOGlobalMetaHome {
  description: String
  title: String
}

"The Open Graph data"
type SEOOpenGraph {
  defaultImage: MediaItem
  frontPage: SEOOpenGraphFrontPage
}

"The Open Graph Front page data"
type SEOOpenGraphFrontPage {
  description: String
  image: MediaItem
  title: String
}

"The Schema for post type"
type SEOPageInfoSchema {
  raw: String
}

type SEOPostTypeBreadcrumbs {
  text: String
  url: String
}

"The page info SEO details"
type SEOPostTypePageInfo {
  schema: SEOPageInfoSchema
}

"The Schema types"
type SEOPostTypeSchema {
  articleType: [String]
  pageType: [String]
  raw: String
}

"The Yoast redirect data  (Yoast Premium only)"
type SEORedirect {
  format: String
  origin: String
  target: String
  type: Int
}

"The Yoast SEO schema data"
type SEOSchema {
  companyLogo: MediaItem
  companyName: String
  companyOrPerson: String
  homeUrl: String
  inLanguage: String
  logo: MediaItem
  personLogo: MediaItem
  personName: String
  siteName: String
  siteUrl: String
  wordpressSiteName: String
}

"The Yoast SEO Social media links"
type SEOSocial {
  facebook: SEOSocialFacebook
  instagram: SEOSocialInstagram
  linkedIn: SEOSocialLinkedIn
  mySpace: SEOSocialMySpace
  otherSocials: [String]
  pinterest: SEOSocialPinterest
  twitter: SEOSocialTwitter
  wikipedia: SEOSocialWikipedia
  youTube: SEOSocialYoutube
}

type SEOSocialFacebook {
  defaultImage: MediaItem
  url: String
}

type SEOSocialInstagram {
  url: String
}

type SEOSocialLinkedIn {
  url: String
}

type SEOSocialMySpace {
  url: String
}

type SEOSocialPinterest {
  metaTag: String
  url: String
}

type SEOSocialTwitter {
  cardType: SEOCardType
  username: String
}

type SEOSocialWikipedia {
  url: String
}

type SEOSocialYoutube {
  url: String
}

"The Schema types for Taxonomy"
type SEOTaxonomySchema {
  raw: String
}

type SEOUser {
  breadcrumbTitle: String
  canonical: String
  fullHead: String
  language: String
  metaDesc: String
  metaRobotsNofollow: String
  metaRobotsNoindex: String
  opengraphDescription: String
  opengraphImage: MediaItem
  opengraphTitle: String
  region: String
  schema: SEOUserSchema
  social: SEOUserSocial
  title: String
  twitterDescription: String
  twitterImage: MediaItem
  twitterTitle: String
}

"The Schema types for User"
type SEOUserSchema {
  articleType: [String]
  pageType: [String]
  raw: String
}

type SEOUserSocial {
  facebook: String
  instagram: String
  linkedIn: String
  mySpace: String
  pinterest: String
  soundCloud: String
  twitter: String
  wikipedia: String
  youTube: String
}

"The Yoast SEO  webmaster fields"
type SEOWebmaster {
  baiduVerify: String
  googleVerify: String
  msVerify: String
  yandexVerify: String
}

"The payload for the sendPasswordResetEmail mutation."
type SendPasswordResetEmailPayload {
  "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "Whether the mutation completed successfully. This does NOT necessarily mean that an email was sent."
  success: Boolean
  "The user that the password reset email was sent to"
  user: User @deprecated(reason: "This field will be removed in a future version of WPGraphQL")
}

"All of the registered settings"
type Settings {
  "Settings of the the string Settings Group"
  discussionSettingsDefaultCommentStatus: String
  "Settings of the the string Settings Group"
  discussionSettingsDefaultPingStatus: String
  "Settings of the the string Settings Group"
  generalSettingsDateFormat: String
  "Settings of the the string Settings Group"
  generalSettingsDescription: String
  "Settings of the the string Settings Group"
  generalSettingsEmail: String
  "Settings of the the string Settings Group"
  generalSettingsLanguage: String
  "Settings of the the integer Settings Group"
  generalSettingsStartOfWeek: Int
  "Settings of the the string Settings Group"
  generalSettingsTimeFormat: String
  "Settings of the the string Settings Group"
  generalSettingsTimezone: String
  "Settings of the the string Settings Group"
  generalSettingsTitle: String
  "Settings of the the string Settings Group"
  generalSettingsUrl: String
  "Settings of the the integer Settings Group"
  readingSettingsPageForPosts: Int
  "Settings of the the integer Settings Group"
  readingSettingsPageOnFront: Int
  "Settings of the the integer Settings Group"
  readingSettingsPostsPerPage: Int
  "Settings of the the string Settings Group"
  readingSettingsShowOnFront: String
  "Settings of the the integer Settings Group"
  writingSettingsDefaultCategory: Int
  "Settings of the the string Settings Group"
  writingSettingsDefaultPostFormat: String
  "Settings of the the boolean Settings Group"
  writingSettingsUseSmilies: Boolean
}

"The tag type"
type Tag implements DatabaseIdentifier & MenuItemLinkable & Node & TermNode & UniformResourceIdentifiable {
  "Connection between the Tag type and the ContentNode type"
  contentNodes(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String,
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String,
    "The number of items to return after the referenced \"after\" cursor"
    first: Int,
    "The number of items to return before the referenced \"before\" cursor"
    last: Int,
    "Arguments for filtering the connection"
    where: TagToContentNodeConnectionWhereArgs
  ): TagToContentNodeConnection
  "The number of objects connected to the object"
  count: Int
  "The unique identifier stored in the database"
  databaseId: Int!
  "The description of the object"
  description: String
  "Connection between the TermNode type and the EnqueuedScript type"
  enqueuedScripts(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String,
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String,
    "The number of items to return after the referenced \"after\" cursor"
    first: Int,
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
  ): TermNodeToEnqueuedScriptConnection
  "Connection between the TermNode type and the EnqueuedStylesheet type"
  enqueuedStylesheets(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String,
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String,
    "The number of items to return after the referenced \"after\" cursor"
    first: Int,
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
  ): TermNodeToEnqueuedStylesheetConnection
  "The globally unique ID for the object"
  id: ID!
  "Whether the node is a Content Node"
  isContentNode: Boolean!
  "Whether the object is restricted from the current viewer"
  isRestricted: Boolean
  "Whether the node is a Term"
  isTermNode: Boolean!
  "The link to the term"
  link: String
  "The human friendly name of the object."
  name: String
  "Connection between the Tag type and the post type"
  posts(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String,
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String,
    "The number of items to return after the referenced \"after\" cursor"
    first: Int,
    "The number of items to return before the referenced \"before\" cursor"
    last: Int,
    "Arguments for filtering the connection"
    where: TagToPostConnectionWhereArgs
  ): TagToPostConnection
  "The Yoast SEO data of the Метки taxonomy."
  seo: TaxonomySEO
  "An alphanumeric identifier for the object unique to its type."
  slug: String
  "The id field matches the WP_Post-&gt;ID field."
  tagId: Int @deprecated(reason: "Deprecated in favor of databaseId")
  "Connection between the Tag type and the Taxonomy type"
  taxonomy: TagToTaxonomyConnectionEdge
  "The name of the taxonomy that the object is associated with"
  taxonomyName: String
  "The ID of the term group that this term object belongs to"
  termGroupId: Int
  "The taxonomy ID that the object is associated with"
  termTaxonomyId: Int
  "The unique resource identifier path"
  uri: String
}

"Connection between the Tag type and the ContentNode type"
type TagToContentNodeConnection implements Connection & ContentNodeConnection {
  "Edges for the TagToContentNodeConnection connection"
  edges: [TagToContentNodeConnectionEdge!]!
  "The nodes of the connection, without the edges"
  nodes: [ContentNode!]!
  "Information about pagination in a connection."
  pageInfo: TagToContentNodeConnectionPageInfo!
}

"An edge in a connection"
type TagToContentNodeConnectionEdge implements ContentNodeConnectionEdge & Edge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: ContentNode!
}

"Page Info on the &quot;TagToContentNodeConnection&quot;"
type TagToContentNodeConnectionPageInfo implements ContentNodeConnectionPageInfo & PageInfo & WPPageInfo {
  "When paginating forwards, the cursor to continue."
  endCursor: String
  "When paginating forwards, are there more items?"
  hasNextPage: Boolean!
  "When paginating backwards, are there more items?"
  hasPreviousPage: Boolean!
  "Raw schema for page"
  seo: SEOPostTypePageInfo
  "When paginating backwards, the cursor to continue."
  startCursor: String
}

"Connection between the Tag type and the post type"
type TagToPostConnection implements Connection & PostConnection {
  "Edges for the TagToPostConnection connection"
  edges: [TagToPostConnectionEdge!]!
  "The nodes of the connection, without the edges"
  nodes: [Post!]!
  "Information about pagination in a connection."
  pageInfo: TagToPostConnectionPageInfo!
}

"An edge in a connection"
type TagToPostConnectionEdge implements Edge & PostConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: Post!
}

"Page Info on the &quot;TagToPostConnection&quot;"
type TagToPostConnectionPageInfo implements PageInfo & PostConnectionPageInfo & WPPageInfo {
  "When paginating forwards, the cursor to continue."
  endCursor: String
  "When paginating forwards, are there more items?"
  hasNextPage: Boolean!
  "When paginating backwards, are there more items?"
  hasPreviousPage: Boolean!
  "Raw schema for page"
  seo: SEOPostTypePageInfo
  "When paginating backwards, the cursor to continue."
  startCursor: String
}

"Connection between the Tag type and the Taxonomy type"
type TagToTaxonomyConnectionEdge implements Edge & OneToOneConnection & TaxonomyConnectionEdge {
  "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
  cursor: String
  "The node of the connection, without the edges"
  node: Taxonomy!
}

"A taxonomy object"
type Taxonomy implements Node {
  "List of Content Types associated with the Taxonomy"
  connectedContentTypes(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String,
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String,
    "The number of items to return after the referenced \"after\" cursor"
    first: Int,
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
  ): TaxonomyToContentTypeConnection
  "List of Term Nodes associated with the Taxonomy"
  connectedTerms(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String,
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String,
    "The number of items to return after the referenced \"after\" cursor"
    first: Int,
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
  ): TaxonomyToTermNodeConnection
  "Description of the taxonomy. This field is equivalent to WP_Taxonomy-&gt;description"
  description: String
  "The plural name of the post type within the GraphQL Schema."
  graphqlPluralName: String
  "The singular name of the post type within the GraphQL Schema."
  graphqlSingleName: String
  "Whether the taxonomy is hierarchical"
  hierarchical: Boolean
  "The globally unique identifier of the taxonomy object."
  id: ID!
  "Whether the object is restricted from the current viewer"
  isRestricted: Boolean
  "Name of the taxonomy shown in the menu. Usually plural."
  label: String
  "The display name of the taxonomy. This field is equivalent to WP_Taxonomy-&gt;label"
  name: String
  "Whether the taxonomy is publicly queryable"
  public: Boolean
  "Name of content type to display in REST API &quot;wp/v2&quot; namespace."
  restBase: String
  "The REST Controller class assigned to handling this content type."
  restControllerClass: String
  "Whether to show the taxonomy as part of a tag cloud widget. This field is equivalent to WP_Taxonomy-&gt;show_tagcloud"
  showCloud: Boolean
  "Whether to display a column for the taxonomy on its post type listing screens."
  showInAdminColumn: Boolean
  "Whether to add the post type to the GraphQL Schema."
  showInGraphql: Boolean
  "Whether to show the taxonomy in the admin menu"
  showInMenu: Boolean
  "Whether the taxonomy is available for selection in navigation menus."
  showInNavMenus: Boolean
  "Whether to show the taxonomy in the quick/bulk edit panel."
  showInQuickEdit: Boolean
  "Whether to add the post type route in the REST API &quot;wp/v2&quot; namespace."
  showInRest: Boolean
  "Whether to generate and allow a UI for managing terms in this taxonomy in the admin"
  showUi: Boolean
}

type TaxonomySEO {
  breadcrumbs: [SEOPostTypeBreadcrumbs]
  canonical: String
  cornerstone: Boolean
  focuskw: String
  fullHead: String
  metaDesc: String
  metaKeywords: String
  metaRobotsNofollow: String
  metaRobotsNoindex: String
  opengraphAuthor: String
  opengraphDescription: String
  opengraphImage: MediaItem
  opengraphModifiedTime: String
  opengraphPublishedTime: String
  opengraphPublisher: String
  opengraphSiteName: String
  opengraphTitle: String
  opengraphType: String
  opengraphUrl: String
  schema: SEOTaxonomySchema
  title: String
  twitterDescription: String
  twitterImage: MediaItem
  twitterTitle: String
}

"Connection between the Taxonomy type and the ContentType type"
type TaxonomyToContentTypeConnection implements Connection & ContentTypeConnection {
  "Edges for the TaxonomyToContentTypeConnection connection"
  edges: [TaxonomyToContentTypeConnectionEdge!]!
  "The nodes of the connection, without the edges"
  nodes: [ContentType!]!
  "Information about pagination in a connection."
  pageInfo: TaxonomyToContentTypeConnectionPageInfo!
}

"An edge in a connection"
type TaxonomyToContentTypeConnectionEdge implements ContentTypeConnectionEdge & Edge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: ContentType!
}

"Page Info on the &quot;TaxonomyToContentTypeConnection&quot;"
type TaxonomyToContentTypeConnectionPageInfo implements ContentTypeConnectionPageInfo & PageInfo & WPPageInfo {
  "When paginating forwards, the cursor to continue."
  endCursor: String
  "When paginating forwards, are there more items?"
  hasNextPage: Boolean!
  "When paginating backwards, are there more items?"
  hasPreviousPage: Boolean!
  "Raw schema for page"
  seo: SEOPostTypePageInfo
  "When paginating backwards, the cursor to continue."
  startCursor: String
}

"Connection between the Taxonomy type and the TermNode type"
type TaxonomyToTermNodeConnection implements Connection & TermNodeConnection {
  "Edges for the TaxonomyToTermNodeConnection connection"
  edges: [TaxonomyToTermNodeConnectionEdge!]!
  "The nodes of the connection, without the edges"
  nodes: [TermNode!]!
  "Information about pagination in a connection."
  pageInfo: TaxonomyToTermNodeConnectionPageInfo!
}

"An edge in a connection"
type TaxonomyToTermNodeConnectionEdge implements Edge & TermNodeConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: TermNode!
}

"Page Info on the &quot;TaxonomyToTermNodeConnection&quot;"
type TaxonomyToTermNodeConnectionPageInfo implements PageInfo & TermNodeConnectionPageInfo & WPPageInfo {
  "When paginating forwards, the cursor to continue."
  endCursor: String
  "When paginating forwards, are there more items?"
  hasNextPage: Boolean!
  "When paginating backwards, are there more items?"
  hasPreviousPage: Boolean!
  "Raw schema for page"
  seo: SEOPostTypePageInfo
  "When paginating backwards, the cursor to continue."
  startCursor: String
}

"Connection between the TermNode type and the EnqueuedScript type"
type TermNodeToEnqueuedScriptConnection implements Connection & EnqueuedScriptConnection {
  "Edges for the TermNodeToEnqueuedScriptConnection connection"
  edges: [TermNodeToEnqueuedScriptConnectionEdge!]!
  "The nodes of the connection, without the edges"
  nodes: [EnqueuedScript!]!
  "Information about pagination in a connection."
  pageInfo: TermNodeToEnqueuedScriptConnectionPageInfo!
}

"An edge in a connection"
type TermNodeToEnqueuedScriptConnectionEdge implements Edge & EnqueuedScriptConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: EnqueuedScript!
}

"Page Info on the &quot;TermNodeToEnqueuedScriptConnection&quot;"
type TermNodeToEnqueuedScriptConnectionPageInfo implements EnqueuedScriptConnectionPageInfo & PageInfo & WPPageInfo {
  "When paginating forwards, the cursor to continue."
  endCursor: String
  "When paginating forwards, are there more items?"
  hasNextPage: Boolean!
  "When paginating backwards, are there more items?"
  hasPreviousPage: Boolean!
  "Raw schema for page"
  seo: SEOPostTypePageInfo
  "When paginating backwards, the cursor to continue."
  startCursor: String
}

"Connection between the TermNode type and the EnqueuedStylesheet type"
type TermNodeToEnqueuedStylesheetConnection implements Connection & EnqueuedStylesheetConnection {
  "Edges for the TermNodeToEnqueuedStylesheetConnection connection"
  edges: [TermNodeToEnqueuedStylesheetConnectionEdge!]!
  "The nodes of the connection, without the edges"
  nodes: [EnqueuedStylesheet!]!
  "Information about pagination in a connection."
  pageInfo: TermNodeToEnqueuedStylesheetConnectionPageInfo!
}

"An edge in a connection"
type TermNodeToEnqueuedStylesheetConnectionEdge implements Edge & EnqueuedStylesheetConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: EnqueuedStylesheet!
}

"Page Info on the &quot;TermNodeToEnqueuedStylesheetConnection&quot;"
type TermNodeToEnqueuedStylesheetConnectionPageInfo implements EnqueuedStylesheetConnectionPageInfo & PageInfo & WPPageInfo {
  "When paginating forwards, the cursor to continue."
  endCursor: String
  "When paginating forwards, are there more items?"
  hasNextPage: Boolean!
  "When paginating backwards, are there more items?"
  hasPreviousPage: Boolean!
  "Raw schema for page"
  seo: SEOPostTypePageInfo
  "When paginating backwards, the cursor to continue."
  startCursor: String
}

"A theme object"
type Theme implements Node {
  "Name of the theme author(s), could also be a company name. This field is equivalent to WP_Theme-&gt;get( &quot;Author&quot; )."
  author: String
  "URI for the author/company website. This field is equivalent to WP_Theme-&gt;get( &quot;AuthorURI&quot; )."
  authorUri: String
  "The description of the theme. This field is equivalent to WP_Theme-&gt;get( &quot;Description&quot; )."
  description: String
  "The globally unique identifier of the theme object."
  id: ID!
  "Whether the object is restricted from the current viewer"
  isRestricted: Boolean
  "Display name of the theme. This field is equivalent to WP_Theme-&gt;get( &quot;Name&quot; )."
  name: String
  "The URL of the screenshot for the theme. The screenshot is intended to give an overview of what the theme looks like. This field is equivalent to WP_Theme-&gt;get_screenshot()."
  screenshot: String
  "The theme slug is used to internally match themes. Theme slugs can have subdirectories like: my-theme/sub-theme. This field is equivalent to WP_Theme-&gt;get_stylesheet()."
  slug: String
  "URI for the author/company website. This field is equivalent to WP_Theme-&gt;get( &quot;Tags&quot; )."
  tags: [String]
  "A URI if the theme has a website associated with it. The Theme URI is handy for directing users to a theme site for support etc. This field is equivalent to WP_Theme-&gt;get( &quot;ThemeURI&quot; )."
  themeUri: String
  "The current version of the theme. This field is equivalent to WP_Theme-&gt;get( &quot;Version&quot; )."
  version: String
}

"The payload for the updateCategory mutation."
type UpdateCategoryPayload {
  "The created category"
  category: Category
  "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
}

"The payload for the updateComment mutation."
type UpdateCommentPayload {
  "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The comment that was created"
  comment: Comment
  "Whether the mutation succeeded. If the comment is not approved, the server will not return the comment to a non authenticated user, but a success message can be returned if the create succeeded, and the client can optimistically add the comment to the client cache"
  success: Boolean
}

"The payload for the updateCourse mutation."
type UpdateCoursePayload {
  "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The Post object mutation type."
  course: Course
}

"The payload for the updateGeneralFragment mutation."
type UpdateGeneralFragmentPayload {
  "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The Post object mutation type."
  generalFragment: GeneralFragment
}

"The payload for the updateIndividualCourse mutation."
type UpdateIndividualCoursePayload {
  "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The Post object mutation type."
  individualCourse: IndividualCourse
}

"The payload for the updateMediaItem mutation."
type UpdateMediaItemPayload {
  "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The MediaItem object mutation type."
  mediaItem: MediaItem
}

"The payload for the updatePage mutation."
type UpdatePagePayload {
  "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The Post object mutation type."
  page: Page
}

"The payload for the updatePostFormat mutation."
type UpdatePostFormatPayload {
  "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The created post_format"
  postFormat: PostFormat
}

"The payload for the updatePost mutation."
type UpdatePostPayload {
  "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The Post object mutation type."
  post: Post
}

"The payload for the updateSettings mutation."
type UpdateSettingsPayload {
  "Update all settings."
  allSettings: Settings
  "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "Update the DiscussionSettings setting."
  discussionSettings: DiscussionSettings
  "Update the GeneralSettings setting."
  generalSettings: GeneralSettings
  "Update the ReadingSettings setting."
  readingSettings: ReadingSettings
  "Update the WritingSettings setting."
  writingSettings: WritingSettings
}

"The payload for the updateTag mutation."
type UpdateTagPayload {
  "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The created post_tag"
  tag: Tag
}

"The payload for the updateUser mutation."
type UpdateUserPayload {
  "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The User object mutation type."
  user: User
}

"A User object"
type User implements Commenter & DatabaseIdentifier & Node & UniformResourceIdentifiable {
  "Avatar object for user. The avatar object can be retrieved in different sizes by specifying the size argument."
  avatar(
    "Whether to always show the default image, never the Gravatar. Default false"
    forceDefault: Boolean,
    "The rating level of the avatar."
    rating: AvatarRatingEnum,
    "The size attribute of the avatar field can be used to fetch avatars of different sizes. The value corresponds to the dimension in pixels to fetch. The default is 96 pixels."
    size: Int = 96
  ): Avatar
  "User metadata option name. Usually it will be &quot;wp_capabilities&quot;."
  capKey: String
  "A list of capabilities (permissions) granted to the user"
  capabilities: [String]
  "Connection between the User type and the Comment type"
  comments(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String,
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String,
    "The number of items to return after the referenced \"after\" cursor"
    first: Int,
    "The number of items to return before the referenced \"before\" cursor"
    last: Int,
    "Arguments for filtering the connection"
    where: UserToCommentConnectionWhereArgs
  ): UserToCommentConnection
  "Identifies the primary key from the database."
  databaseId: Int!
  "Description of the user."
  description: String
  "Email address of the user. This is equivalent to the WP_User-&gt;user_email property."
  email: String
  "Connection between the User type and the EnqueuedScript type"
  enqueuedScripts(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String,
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String,
    "The number of items to return after the referenced \"after\" cursor"
    first: Int,
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
  ): UserToEnqueuedScriptConnection
  "Connection between the User type and the EnqueuedStylesheet type"
  enqueuedStylesheets(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String,
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String,
    "The number of items to return after the referenced \"after\" cursor"
    first: Int,
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
  ): UserToEnqueuedStylesheetConnection
  "A complete list of capabilities including capabilities inherited from a role. This is equivalent to the array keys of WP_User-&gt;allcaps."
  extraCapabilities: [String]
  "First name of the user. This is equivalent to the WP_User-&gt;user_first_name property."
  firstName: String
  "The globally unique identifier for the user object."
  id: ID!
  "Whether the node is a Content Node"
  isContentNode: Boolean!
  "Whether the object is restricted from the current viewer"
  isRestricted: Boolean
  "Whether the node is a Term"
  isTermNode: Boolean!
  "Last name of the user. This is equivalent to the WP_User-&gt;user_last_name property."
  lastName: String
  "The preferred language locale set for the user. Value derived from get_user_locale()."
  locale: String
  "Connection between the User type and the mediaItem type"
  mediaItems(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String,
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String,
    "The number of items to return after the referenced \"after\" cursor"
    first: Int,
    "The number of items to return before the referenced \"before\" cursor"
    last: Int,
    "Arguments for filtering the connection"
    where: UserToMediaItemConnectionWhereArgs
  ): UserToMediaItemConnection
  "Display name of the user. This is equivalent to the WP_User-&gt;display_name property."
  name: String
  "The nicename for the user. This field is equivalent to WP_User-&gt;user_nicename"
  nicename: String
  "Nickname of the user."
  nickname: String
  "Connection between the User type and the page type"
  pages(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String,
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String,
    "The number of items to return after the referenced \"after\" cursor"
    first: Int,
    "The number of items to return before the referenced \"before\" cursor"
    last: Int,
    "Arguments for filtering the connection"
    where: UserToPageConnectionWhereArgs
  ): UserToPageConnection
  "Connection between the User type and the post type"
  posts(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String,
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String,
    "The number of items to return after the referenced \"after\" cursor"
    first: Int,
    "The number of items to return before the referenced \"before\" cursor"
    last: Int,
    "Arguments for filtering the connection"
    where: UserToPostConnectionWhereArgs
  ): UserToPostConnection
  "The date the user registered or was created. The field follows a full ISO8601 date string format."
  registeredDate: String
  "Connection between the User and Revisions authored by the user"
  revisions(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String,
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String,
    "The number of items to return after the referenced \"after\" cursor"
    first: Int,
    "The number of items to return before the referenced \"before\" cursor"
    last: Int,
    "Arguments for filtering the connection"
    where: UserToRevisionsConnectionWhereArgs
  ): UserToRevisionsConnection
  "Connection between the User type and the UserRole type"
  roles(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String,
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String,
    "The number of items to return after the referenced \"after\" cursor"
    first: Int,
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
  ): UserToUserRoleConnection
  "The Yoast SEO data of a user"
  seo: SEOUser
  "Whether the Toolbar should be displayed when the user is viewing the site."
  shouldShowAdminToolbar: Boolean
  "The slug for the user. This field is equivalent to WP_User-&gt;user_nicename"
  slug: String
  "The unique resource identifier path"
  uri: String
  "A website url that is associated with the user."
  url: String
  "The Id of the user. Equivalent to WP_User-&gt;ID"
  userId: Int @deprecated(reason: "Deprecated in favor of the databaseId field")
  "Username for the user. This field is equivalent to WP_User-&gt;user_login."
  username: String
}

"A user role object"
type UserRole implements Node {
  "The capabilities that belong to this role"
  capabilities: [String]
  "The display name of the role"
  displayName: String
  "The globally unique identifier for the user role object."
  id: ID!
  "Whether the object is restricted from the current viewer"
  isRestricted: Boolean
  "The registered name of the role"
  name: String
}

"Connection between the User type and the Comment type"
type UserToCommentConnection implements CommentConnection & Connection {
  "Edges for the UserToCommentConnection connection"
  edges: [UserToCommentConnectionEdge!]!
  "The nodes of the connection, without the edges"
  nodes: [Comment!]!
  "Information about pagination in a connection."
  pageInfo: UserToCommentConnectionPageInfo!
}

"An edge in a connection"
type UserToCommentConnectionEdge implements CommentConnectionEdge & Edge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: Comment!
}

"Page Info on the &quot;UserToCommentConnection&quot;"
type UserToCommentConnectionPageInfo implements CommentConnectionPageInfo & PageInfo & WPPageInfo {
  "When paginating forwards, the cursor to continue."
  endCursor: String
  "When paginating forwards, are there more items?"
  hasNextPage: Boolean!
  "When paginating backwards, are there more items?"
  hasPreviousPage: Boolean!
  "Raw schema for page"
  seo: SEOPostTypePageInfo
  "When paginating backwards, the cursor to continue."
  startCursor: String
}

"Connection between the User type and the EnqueuedScript type"
type UserToEnqueuedScriptConnection implements Connection & EnqueuedScriptConnection {
  "Edges for the UserToEnqueuedScriptConnection connection"
  edges: [UserToEnqueuedScriptConnectionEdge!]!
  "The nodes of the connection, without the edges"
  nodes: [EnqueuedScript!]!
  "Information about pagination in a connection."
  pageInfo: UserToEnqueuedScriptConnectionPageInfo!
}

"An edge in a connection"
type UserToEnqueuedScriptConnectionEdge implements Edge & EnqueuedScriptConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: EnqueuedScript!
}

"Page Info on the &quot;UserToEnqueuedScriptConnection&quot;"
type UserToEnqueuedScriptConnectionPageInfo implements EnqueuedScriptConnectionPageInfo & PageInfo & WPPageInfo {
  "When paginating forwards, the cursor to continue."
  endCursor: String
  "When paginating forwards, are there more items?"
  hasNextPage: Boolean!
  "When paginating backwards, are there more items?"
  hasPreviousPage: Boolean!
  "Raw schema for page"
  seo: SEOPostTypePageInfo
  "When paginating backwards, the cursor to continue."
  startCursor: String
}

"Connection between the User type and the EnqueuedStylesheet type"
type UserToEnqueuedStylesheetConnection implements Connection & EnqueuedStylesheetConnection {
  "Edges for the UserToEnqueuedStylesheetConnection connection"
  edges: [UserToEnqueuedStylesheetConnectionEdge!]!
  "The nodes of the connection, without the edges"
  nodes: [EnqueuedStylesheet!]!
  "Information about pagination in a connection."
  pageInfo: UserToEnqueuedStylesheetConnectionPageInfo!
}

"An edge in a connection"
type UserToEnqueuedStylesheetConnectionEdge implements Edge & EnqueuedStylesheetConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: EnqueuedStylesheet!
}

"Page Info on the &quot;UserToEnqueuedStylesheetConnection&quot;"
type UserToEnqueuedStylesheetConnectionPageInfo implements EnqueuedStylesheetConnectionPageInfo & PageInfo & WPPageInfo {
  "When paginating forwards, the cursor to continue."
  endCursor: String
  "When paginating forwards, are there more items?"
  hasNextPage: Boolean!
  "When paginating backwards, are there more items?"
  hasPreviousPage: Boolean!
  "Raw schema for page"
  seo: SEOPostTypePageInfo
  "When paginating backwards, the cursor to continue."
  startCursor: String
}

"Connection between the User type and the mediaItem type"
type UserToMediaItemConnection implements Connection & MediaItemConnection {
  "Edges for the UserToMediaItemConnection connection"
  edges: [UserToMediaItemConnectionEdge!]!
  "The nodes of the connection, without the edges"
  nodes: [MediaItem!]!
  "Information about pagination in a connection."
  pageInfo: UserToMediaItemConnectionPageInfo!
}

"An edge in a connection"
type UserToMediaItemConnectionEdge implements Edge & MediaItemConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: MediaItem!
}

"Page Info on the &quot;UserToMediaItemConnection&quot;"
type UserToMediaItemConnectionPageInfo implements MediaItemConnectionPageInfo & PageInfo & WPPageInfo {
  "When paginating forwards, the cursor to continue."
  endCursor: String
  "When paginating forwards, are there more items?"
  hasNextPage: Boolean!
  "When paginating backwards, are there more items?"
  hasPreviousPage: Boolean!
  "Raw schema for page"
  seo: SEOPostTypePageInfo
  "When paginating backwards, the cursor to continue."
  startCursor: String
}

"Connection between the User type and the page type"
type UserToPageConnection implements Connection & PageConnection {
  "Edges for the UserToPageConnection connection"
  edges: [UserToPageConnectionEdge!]!
  "The nodes of the connection, without the edges"
  nodes: [Page!]!
  "Information about pagination in a connection."
  pageInfo: UserToPageConnectionPageInfo!
}

"An edge in a connection"
type UserToPageConnectionEdge implements Edge & PageConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: Page!
}

"Page Info on the &quot;UserToPageConnection&quot;"
type UserToPageConnectionPageInfo implements PageConnectionPageInfo & PageInfo & WPPageInfo {
  "When paginating forwards, the cursor to continue."
  endCursor: String
  "When paginating forwards, are there more items?"
  hasNextPage: Boolean!
  "When paginating backwards, are there more items?"
  hasPreviousPage: Boolean!
  "Raw schema for page"
  seo: SEOPostTypePageInfo
  "When paginating backwards, the cursor to continue."
  startCursor: String
}

"Connection between the User type and the post type"
type UserToPostConnection implements Connection & PostConnection {
  "Edges for the UserToPostConnection connection"
  edges: [UserToPostConnectionEdge!]!
  "The nodes of the connection, without the edges"
  nodes: [Post!]!
  "Information about pagination in a connection."
  pageInfo: UserToPostConnectionPageInfo!
}

"An edge in a connection"
type UserToPostConnectionEdge implements Edge & PostConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: Post!
}

"Page Info on the &quot;UserToPostConnection&quot;"
type UserToPostConnectionPageInfo implements PageInfo & PostConnectionPageInfo & WPPageInfo {
  "When paginating forwards, the cursor to continue."
  endCursor: String
  "When paginating forwards, are there more items?"
  hasNextPage: Boolean!
  "When paginating backwards, are there more items?"
  hasPreviousPage: Boolean!
  "Raw schema for page"
  seo: SEOPostTypePageInfo
  "When paginating backwards, the cursor to continue."
  startCursor: String
}

"Connection between the User type and the ContentNode type"
type UserToRevisionsConnection implements Connection & ContentNodeConnection {
  "Edges for the UserToRevisionsConnection connection"
  edges: [UserToRevisionsConnectionEdge!]!
  "The nodes of the connection, without the edges"
  nodes: [ContentNode!]!
  "Information about pagination in a connection."
  pageInfo: UserToRevisionsConnectionPageInfo!
}

"An edge in a connection"
type UserToRevisionsConnectionEdge implements ContentNodeConnectionEdge & Edge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: ContentNode!
}

"Page Info on the &quot;UserToRevisionsConnection&quot;"
type UserToRevisionsConnectionPageInfo implements ContentNodeConnectionPageInfo & PageInfo & WPPageInfo {
  "When paginating forwards, the cursor to continue."
  endCursor: String
  "When paginating forwards, are there more items?"
  hasNextPage: Boolean!
  "When paginating backwards, are there more items?"
  hasPreviousPage: Boolean!
  "Raw schema for page"
  seo: SEOPostTypePageInfo
  "When paginating backwards, the cursor to continue."
  startCursor: String
}

"Connection between the User type and the UserRole type"
type UserToUserRoleConnection implements Connection & UserRoleConnection {
  "Edges for the UserToUserRoleConnection connection"
  edges: [UserToUserRoleConnectionEdge!]!
  "The nodes of the connection, without the edges"
  nodes: [UserRole!]!
  "Information about pagination in a connection."
  pageInfo: UserToUserRoleConnectionPageInfo!
}

"An edge in a connection"
type UserToUserRoleConnectionEdge implements Edge & UserRoleConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: UserRole!
}

"Page Info on the &quot;UserToUserRoleConnection&quot;"
type UserToUserRoleConnectionPageInfo implements PageInfo & UserRoleConnectionPageInfo & WPPageInfo {
  "When paginating forwards, the cursor to continue."
  endCursor: String
  "When paginating forwards, are there more items?"
  hasNextPage: Boolean!
  "When paginating backwards, are there more items?"
  hasPreviousPage: Boolean!
  "Raw schema for page"
  seo: SEOPostTypePageInfo
  "When paginating backwards, the cursor to continue."
  startCursor: String
}

"The writing setting type"
type WritingSettings {
  "Рубрика для записей по умолчанию."
  defaultCategory: Int
  "Формат записей по умолчанию."
  defaultPostFormat: String
  "Преобразовывать смайлики наподобие :-) и :-P в картинки при показе."
  useSmilies: Boolean
}

"What rating to display avatars up to. Accepts 'G', 'PG', 'R', 'X', and are judged in that order. Default is the value of the 'avatar_rating' option"
enum AvatarRatingEnum {
  "Indicates a G level avatar rating level."
  G
  "Indicates a PG level avatar rating level."
  PG
  "Indicates an R level avatar rating level."
  R
  "Indicates an X level avatar rating level."
  X
}

"The Type of Identifier used to fetch a single resource. Default is ID."
enum CategoryIdType {
  "The Database ID for the node"
  DATABASE_ID
  "The hashed Global ID"
  ID
  "The name of the node"
  NAME
  "Url friendly name of the node"
  SLUG
  "The URI for the node"
  URI
}

"The Type of Identifier used to fetch a single comment node. Default is \"ID\". To be used along with the \"id\" field."
enum CommentNodeIdTypeEnum {
  "Identify a resource by the Database ID."
  DATABASE_ID
  "Identify a resource by the (hashed) Global ID."
  ID
}

"The status of the comment object."
enum CommentStatusEnum {
  "Comments with the Одобрен status"
  APPROVE
  "Comments with the Не одобрен status"
  HOLD
  "Comments with the Спам status"
  SPAM
  "Comments with the Удалён status"
  TRASH
}

"Options for ordering the connection"
enum CommentsConnectionOrderbyEnum {
  "Order by browser user agent of the commenter."
  COMMENT_AGENT
  "Order by approval status of the comment."
  COMMENT_APPROVED
  "Order by name of the comment author."
  COMMENT_AUTHOR
  "Order by e-mail of the comment author."
  COMMENT_AUTHOR_EMAIL
  "Order by IP address of the comment author."
  COMMENT_AUTHOR_IP
  "Order by URL address of the comment author."
  COMMENT_AUTHOR_URL
  "Order by the comment contents."
  COMMENT_CONTENT
  "Order by date/time timestamp of the comment."
  COMMENT_DATE
  "Order by GMT timezone date/time timestamp of the comment."
  COMMENT_DATE_GMT
  "Order by the globally unique identifier for the comment object"
  COMMENT_ID
  "Order by the array list of comment IDs listed in the where clause."
  COMMENT_IN
  "Order by the comment karma score."
  COMMENT_KARMA
  "Order by the comment parent ID."
  COMMENT_PARENT
  "Order by the post object ID."
  COMMENT_POST_ID
  "Order by the the type of comment, such as 'comment', 'pingback', or 'trackback'."
  COMMENT_TYPE
  "Order by the user ID."
  USER_ID
}

"The Type of Identifier used to fetch a single resource. Default is ID."
enum ContentNodeIdTypeEnum {
  "Identify a resource by the Database ID."
  DATABASE_ID
  "Identify a resource by the (hashed) Global ID."
  ID
  "Identify a resource by the URI."
  URI
}

"Allowed Content Types"
enum ContentTypeEnum {
  "The Type of Content object"
  ATTACHMENT
  "The Type of Content object"
  COURSE
  "The Type of Content object"
  GENERAL_FRAGMENT
  "The Type of Content object"
  INDIVIDUAL_COURSE
  "The Type of Content object"
  PAGE
  "The Type of Content object"
  POST
}

"The Type of Identifier used to fetch a single Content Type node. To be used along with the \"id\" field. Default is \"ID\"."
enum ContentTypeIdTypeEnum {
  "The globally unique ID"
  ID
  "The name of the content type."
  NAME
}

"Allowed Content Types of the Category taxonomy."
enum ContentTypesOfCategoryEnum {
  "The Type of Content object"
  POST
}

"Allowed Content Types of the PostFormat taxonomy."
enum ContentTypesOfPostFormatEnum {
  "The Type of Content object"
  POST
}

"Allowed Content Types of the Tag taxonomy."
enum ContentTypesOfTagEnum {
  "The Type of Content object"
  POST
}

"The Type of Identifier used to fetch a single resource. Default is ID."
enum CourseIdType {
  "Identify a resource by the Database ID."
  DATABASE_ID
  "Identify a resource by the (hashed) Global ID."
  ID
  "Identify a resource by the URI."
  URI
}

"The Type of Identifier used to fetch a single resource. Default is ID."
enum GeneralFragmentIdType {
  "Identify a resource by the Database ID."
  DATABASE_ID
  "Identify a resource by the (hashed) Global ID."
  ID
  "Identify a resource by the slug. Available to non-hierarchcial Types where the slug is a unique identifier."
  SLUG
  "Identify a resource by the URI."
  URI
}

"The Type of Identifier used to fetch a single resource. Default is ID."
enum IndividualCourseIdType {
  "Identify a resource by the Database ID."
  DATABASE_ID
  "Identify a resource by the (hashed) Global ID."
  ID
  "Identify a resource by the slug. Available to non-hierarchcial Types where the slug is a unique identifier."
  SLUG
  "Identify a resource by the URI."
  URI
}

"The Type of Identifier used to fetch a single resource. Default is ID."
enum MediaItemIdType {
  "Identify a resource by the Database ID."
  DATABASE_ID
  "Identify a resource by the (hashed) Global ID."
  ID
  "Identify a resource by the slug. Available to non-hierarchcial Types where the slug is a unique identifier."
  SLUG
  "Identify a media item by its source url"
  SOURCE_URL
  "Identify a resource by the URI."
  URI
}

"The size of the media item object."
enum MediaItemSizeEnum {
  "MediaItem with the large size"
  LARGE
  "MediaItem with the medium size"
  MEDIUM
  "MediaItem with the medium_large size"
  MEDIUM_LARGE
  "MediaItem with the thumbnail size"
  THUMBNAIL
  "MediaItem with the 1536x1536 size"
  _1536X1536
  "MediaItem with the 2048x2048 size"
  _2048X2048
}

"The status of the media item object."
enum MediaItemStatusEnum {
  "Objects with the auto-draft status"
  AUTO_DRAFT
  "Objects with the inherit status"
  INHERIT
  "Objects with the private status"
  PRIVATE
  "Objects with the trash status"
  TRASH
}

"The Type of Identifier used to fetch a single node. Default is \"ID\". To be used along with the \"id\" field."
enum MenuItemNodeIdTypeEnum {
  "Identify a resource by the Database ID."
  DATABASE_ID
  "Identify a resource by the (hashed) Global ID."
  ID
}

"Registered menu locations"
enum MenuLocationEnum {
  "Empty menu location"
  EMPTY
}

"The Type of Identifier used to fetch a single node. Default is \"ID\". To be used along with the \"id\" field."
enum MenuNodeIdTypeEnum {
  "Identify a menu node by the Database ID."
  DATABASE_ID
  "Identify a menu node by the (hashed) Global ID."
  ID
  "Identify a menu node by the slug of menu location to which it is assigned"
  LOCATION
  "Identify a menu node by its name"
  NAME
  "Identify a menu node by its slug"
  SLUG
}

"The MimeType of the object"
enum MimeTypeEnum {
  "application/java mime type."
  APPLICATION_JAVA
  "application/msword mime type."
  APPLICATION_MSWORD
  "application/octet-stream mime type."
  APPLICATION_OCTET_STREAM
  "application/onenote mime type."
  APPLICATION_ONENOTE
  "application/oxps mime type."
  APPLICATION_OXPS
  "application/pdf mime type."
  APPLICATION_PDF
  "application/rar mime type."
  APPLICATION_RAR
  "application/rtf mime type."
  APPLICATION_RTF
  "application/ttaf+xml mime type."
  APPLICATION_TTAF_XML
  "application/vnd.apple.keynote mime type."
  APPLICATION_VND_APPLE_KEYNOTE
  "application/vnd.apple.numbers mime type."
  APPLICATION_VND_APPLE_NUMBERS
  "application/vnd.apple.pages mime type."
  APPLICATION_VND_APPLE_PAGES
  "application/vnd.ms-access mime type."
  APPLICATION_VND_MS_ACCESS
  "application/vnd.ms-excel mime type."
  APPLICATION_VND_MS_EXCEL
  "application/vnd.ms-excel.addin.macroEnabled.12 mime type."
  APPLICATION_VND_MS_EXCEL_ADDIN_MACROENABLED_12
  "application/vnd.ms-excel.sheet.binary.macroEnabled.12 mime type."
  APPLICATION_VND_MS_EXCEL_SHEET_BINARY_MACROENABLED_12
  "application/vnd.ms-excel.sheet.macroEnabled.12 mime type."
  APPLICATION_VND_MS_EXCEL_SHEET_MACROENABLED_12
  "application/vnd.ms-excel.template.macroEnabled.12 mime type."
  APPLICATION_VND_MS_EXCEL_TEMPLATE_MACROENABLED_12
  "application/vnd.ms-powerpoint mime type."
  APPLICATION_VND_MS_POWERPOINT
  "application/vnd.ms-powerpoint.addin.macroEnabled.12 mime type."
  APPLICATION_VND_MS_POWERPOINT_ADDIN_MACROENABLED_12
  "application/vnd.ms-powerpoint.presentation.macroEnabled.12 mime type."
  APPLICATION_VND_MS_POWERPOINT_PRESENTATION_MACROENABLED_12
  "application/vnd.ms-powerpoint.slideshow.macroEnabled.12 mime type."
  APPLICATION_VND_MS_POWERPOINT_SLIDESHOW_MACROENABLED_12
  "application/vnd.ms-powerpoint.slide.macroEnabled.12 mime type."
  APPLICATION_VND_MS_POWERPOINT_SLIDE_MACROENABLED_12
  "application/vnd.ms-powerpoint.template.macroEnabled.12 mime type."
  APPLICATION_VND_MS_POWERPOINT_TEMPLATE_MACROENABLED_12
  "application/vnd.ms-project mime type."
  APPLICATION_VND_MS_PROJECT
  "application/vnd.ms-word.document.macroEnabled.12 mime type."
  APPLICATION_VND_MS_WORD_DOCUMENT_MACROENABLED_12
  "application/vnd.ms-word.template.macroEnabled.12 mime type."
  APPLICATION_VND_MS_WORD_TEMPLATE_MACROENABLED_12
  "application/vnd.ms-write mime type."
  APPLICATION_VND_MS_WRITE
  "application/vnd.ms-xpsdocument mime type."
  APPLICATION_VND_MS_XPSDOCUMENT
  "application/vnd.oasis.opendocument.chart mime type."
  APPLICATION_VND_OASIS_OPENDOCUMENT_CHART
  "application/vnd.oasis.opendocument.database mime type."
  APPLICATION_VND_OASIS_OPENDOCUMENT_DATABASE
  "application/vnd.oasis.opendocument.formula mime type."
  APPLICATION_VND_OASIS_OPENDOCUMENT_FORMULA
  "application/vnd.oasis.opendocument.graphics mime type."
  APPLICATION_VND_OASIS_OPENDOCUMENT_GRAPHICS
  "application/vnd.oasis.opendocument.presentation mime type."
  APPLICATION_VND_OASIS_OPENDOCUMENT_PRESENTATION
  "application/vnd.oasis.opendocument.spreadsheet mime type."
  APPLICATION_VND_OASIS_OPENDOCUMENT_SPREADSHEET
  "application/vnd.oasis.opendocument.text mime type."
  APPLICATION_VND_OASIS_OPENDOCUMENT_TEXT
  "application/vnd.openxmlformats-officedocument.presentationml.presentation mime type."
  APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_PRESENTATION
  "application/vnd.openxmlformats-officedocument.presentationml.slide mime type."
  APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_SLIDE
  "application/vnd.openxmlformats-officedocument.presentationml.slideshow mime type."
  APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_SLIDESHOW
  "application/vnd.openxmlformats-officedocument.presentationml.template mime type."
  APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_TEMPLATE
  "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet mime type."
  APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_SHEET
  "application/vnd.openxmlformats-officedocument.spreadsheetml.template mime type."
  APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_TEMPLATE
  "application/vnd.openxmlformats-officedocument.wordprocessingml.document mime type."
  APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_WORDPROCESSINGML_DOCUMENT
  "application/vnd.openxmlformats-officedocument.wordprocessingml.template mime type."
  APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_WORDPROCESSINGML_TEMPLATE
  "application/wordperfect mime type."
  APPLICATION_WORDPERFECT
  "application/x-7z-compressed mime type."
  APPLICATION_X_7Z_COMPRESSED
  "application/x-gzip mime type."
  APPLICATION_X_GZIP
  "application/x-tar mime type."
  APPLICATION_X_TAR
  "application/zip mime type."
  APPLICATION_ZIP
  "audio/aac mime type."
  AUDIO_AAC
  "audio/flac mime type."
  AUDIO_FLAC
  "audio/midi mime type."
  AUDIO_MIDI
  "audio/mpeg mime type."
  AUDIO_MPEG
  "audio/ogg mime type."
  AUDIO_OGG
  "audio/wav mime type."
  AUDIO_WAV
  "audio/x-matroska mime type."
  AUDIO_X_MATROSKA
  "audio/x-ms-wax mime type."
  AUDIO_X_MS_WAX
  "audio/x-ms-wma mime type."
  AUDIO_X_MS_WMA
  "audio/x-realaudio mime type."
  AUDIO_X_REALAUDIO
  "image/bmp mime type."
  IMAGE_BMP
  "image/gif mime type."
  IMAGE_GIF
  "image/heic mime type."
  IMAGE_HEIC
  "image/jpeg mime type."
  IMAGE_JPEG
  "image/png mime type."
  IMAGE_PNG
  "image/svg+xml mime type."
  IMAGE_SVG_XML
  "image/tiff mime type."
  IMAGE_TIFF
  "image/webp mime type."
  IMAGE_WEBP
  "image/x-icon mime type."
  IMAGE_X_ICON
  "text/calendar mime type."
  TEXT_CALENDAR
  "text/css mime type."
  TEXT_CSS
  "text/csv mime type."
  TEXT_CSV
  "text/plain mime type."
  TEXT_PLAIN
  "text/richtext mime type."
  TEXT_RICHTEXT
  "text/tab-separated-values mime type."
  TEXT_TAB_SEPARATED_VALUES
  "text/vtt mime type."
  TEXT_VTT
  "video/3gpp mime type."
  VIDEO_3GPP
  "video/3gpp2 mime type."
  VIDEO_3GPP2
  "video/avi mime type."
  VIDEO_AVI
  "video/divx mime type."
  VIDEO_DIVX
  "video/mp4 mime type."
  VIDEO_MP4
  "video/mpeg mime type."
  VIDEO_MPEG
  "video/ogg mime type."
  VIDEO_OGG
  "video/quicktime mime type."
  VIDEO_QUICKTIME
  "video/webm mime type."
  VIDEO_WEBM
  "video/x-flv mime type."
  VIDEO_X_FLV
  "video/x-matroska mime type."
  VIDEO_X_MATROSKA
  "video/x-ms-asf mime type."
  VIDEO_X_MS_ASF
  "video/x-ms-wm mime type."
  VIDEO_X_MS_WM
  "video/x-ms-wmv mime type."
  VIDEO_X_MS_WMV
  "video/x-ms-wmx mime type."
  VIDEO_X_MS_WMX
}

"The cardinality of the connection order"
enum OrderEnum {
  "Sort the query result set in an ascending order"
  ASC
  "Sort the query result set in a descending order"
  DESC
}

"The Type of Identifier used to fetch a single resource. Default is ID."
enum PageIdType {
  "Identify a resource by the Database ID."
  DATABASE_ID
  "Identify a resource by the (hashed) Global ID."
  ID
  "Identify a resource by the URI."
  URI
}

"The status of the WordPress plugin."
enum PluginStatusEnum {
  "The plugin is currently active."
  ACTIVE
  "The plugin is a drop-in plugin."
  DROP_IN
  "The plugin is currently inactive."
  INACTIVE
  "The plugin is a must-use plugin."
  MUST_USE
  "The plugin is technically active but was paused while loading."
  PAUSED
  "The plugin was active recently."
  RECENTLY_ACTIVE
  "The plugin has an upgrade available."
  UPGRADE
}

"The Type of Identifier used to fetch a single resource. Default is ID."
enum PostFormatIdType {
  "The Database ID for the node"
  DATABASE_ID
  "The hashed Global ID"
  ID
  "The name of the node"
  NAME
  "Url friendly name of the node"
  SLUG
  "The URI for the node"
  URI
}

"The Type of Identifier used to fetch a single resource. Default is ID."
enum PostIdType {
  "Identify a resource by the Database ID."
  DATABASE_ID
  "Identify a resource by the (hashed) Global ID."
  ID
  "Identify a resource by the slug. Available to non-hierarchcial Types where the slug is a unique identifier."
  SLUG
  "Identify a resource by the URI."
  URI
}

"The format of post field data."
enum PostObjectFieldFormatEnum {
  "Provide the field value directly from database. Null on unauthenticated requests."
  RAW
  "Provide the field value as rendered by WordPress. Default."
  RENDERED
}

"The column to use when filtering by date"
enum PostObjectsConnectionDateColumnEnum {
  "The date the comment was created in local time."
  DATE
  "The most recent modification date of the comment."
  MODIFIED
}

"Field to order the connection by"
enum PostObjectsConnectionOrderbyEnum {
  "Order by author"
  AUTHOR
  "Order by the number of comments it has acquired"
  COMMENT_COUNT
  "Order by publish date"
  DATE
  "Preserve the ID order given in the IN array"
  IN
  "Order by the menu order value"
  MENU_ORDER
  "Order by last modified date"
  MODIFIED
  "Preserve slug order given in the NAME_IN array"
  NAME_IN
  "Order by parent ID"
  PARENT
  "Order by slug"
  SLUG
  "Order by title"
  TITLE
}

"The status of the object."
enum PostStatusEnum {
  "Objects with the acf-disabled status"
  ACF_DISABLED
  "Objects with the auto-draft status"
  AUTO_DRAFT
  "Objects with the draft status"
  DRAFT
  "Objects with the future status"
  FUTURE
  "Objects with the inherit status"
  INHERIT
  "Objects with the pending status"
  PENDING
  "Objects with the private status"
  PRIVATE
  "Objects with the publish status"
  PUBLISH
  "Objects with the request-completed status"
  REQUEST_COMPLETED
  "Objects with the request-confirmed status"
  REQUEST_CONFIRMED
  "Objects with the request-failed status"
  REQUEST_FAILED
  "Objects with the request-pending status"
  REQUEST_PENDING
  "Objects with the trash status"
  TRASH
}

"The logical relation between each item in the array when there are more than one."
enum RelationEnum {
  "The logical AND condition returns true if both operands are true, otherwise, it returns false."
  AND
  "The logical OR condition returns false if both operands are false, otherwise, it returns true."
  OR
}

"Types of cards"
enum SEOCardType {
  summary
  summary_large_image
}

"The strategy to use when loading the script"
enum ScriptLoadingStrategyEnum {
  "Use the script `async` attribute"
  ASYNC
  "Use the script `defer` attribute"
  DEFER
}

"The Type of Identifier used to fetch a single resource. Default is ID."
enum TagIdType {
  "The Database ID for the node"
  DATABASE_ID
  "The hashed Global ID"
  ID
  "The name of the node"
  NAME
  "Url friendly name of the node"
  SLUG
  "The URI for the node"
  URI
}

"Allowed taxonomies"
enum TaxonomyEnum {
  "Taxonomy enum category"
  CATEGORY
  "Taxonomy enum post_format"
  POSTFORMAT
  "Taxonomy enum post_tag"
  TAG
}

"The Type of Identifier used to fetch a single Taxonomy node. To be used along with the \"id\" field. Default is \"ID\"."
enum TaxonomyIdTypeEnum {
  "The globally unique ID"
  ID
  "The name of the taxonomy"
  NAME
}

"The Type of Identifier used to fetch a single resource. Default is \"ID\". To be used along with the \"id\" field."
enum TermNodeIdTypeEnum {
  "The Database ID for the node"
  DATABASE_ID
  "The hashed Global ID"
  ID
  "The name of the node"
  NAME
  "Url friendly name of the node"
  SLUG
  "The URI for the node"
  URI
}

"Options for ordering the connection by"
enum TermObjectsConnectionOrderbyEnum {
  "Order the connection by item count."
  COUNT
  "Order the connection by description."
  DESCRIPTION
  "Order the connection by name."
  NAME
  "Order the connection by slug."
  SLUG
  "Order the connection by term group."
  TERM_GROUP
  "Order the connection by term id."
  TERM_ID
  "Order the connection by term order."
  TERM_ORDER
}

"The Type of Identifier used to fetch a single User node. To be used along with the \"id\" field. Default is \"ID\"."
enum UserNodeIdTypeEnum {
  "The Database ID for the node"
  DATABASE_ID
  "The Email of the User"
  EMAIL
  "The hashed Global ID"
  ID
  "The slug of the User"
  SLUG
  "The URI for the node"
  URI
  "The username the User uses to login with"
  USERNAME
}

"Names of available user roles"
enum UserRoleEnum {
  "User role with specific capabilities"
  ADMINISTRATOR
  "User role with specific capabilities"
  AUTHOR
  "User role with specific capabilities"
  CONTRIBUTOR
  "User role with specific capabilities"
  EDITOR
  "User role with specific capabilities"
  SEO_EDITOR
  "User role with specific capabilities"
  SEO_MANAGER
  "User role with specific capabilities"
  SUBSCRIBER
}

"Field to order the connection by"
enum UsersConnectionOrderbyEnum {
  "Order by display name"
  DISPLAY_NAME
  "Order by email address"
  EMAIL
  "Order by login"
  LOGIN
  "Preserve the login order given in the LOGIN_IN array"
  LOGIN_IN
  "Order by nice name"
  NICE_NAME
  "Preserve the nice name order given in the NICE_NAME_IN array"
  NICE_NAME_IN
  "Order by registration date"
  REGISTERED
  "Order by URL"
  URL
}

"Column used for searching for users."
enum UsersConnectionSearchColumnEnum {
  "The user's email address."
  EMAIL
  "The globally unique ID."
  ID
  "The username the User uses to login with."
  LOGIN
  "A URL-friendly name for the user. The default is the user's username."
  NICENAME
  "The URL of the user's website."
  URL
}

"Arguments for filtering the CategoryToCategoryConnection connection"
input CategoryToCategoryConnectionWhereArgs {
  "Unique cache key to be produced when this query is stored in an object cache. Default is 'core'."
  cacheDomain: String
  "Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0."
  childOf: Int
  "True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false."
  childless: Boolean
  "Retrieve terms where the description is LIKE the input value. Default empty."
  descriptionLike: String
  "Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array."
  exclude: [ID]
  "Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array."
  excludeTree: [ID]
  "Whether to hide terms not assigned to any posts. Accepts true or false. Default false"
  hideEmpty: Boolean
  "Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true."
  hierarchical: Boolean
  "Array of term ids to include. Default empty array."
  include: [ID]
  "Array of names to return term(s) for. Default empty."
  name: [String]
  "Retrieve terms where the name is LIKE the input value. Default empty."
  nameLike: String
  "Array of object IDs. Results will be limited to terms associated with these objects."
  objectIds: [ID]
  "Direction the connection should be ordered in"
  order: OrderEnum
  "Field(s) to order terms by. Defaults to 'name'."
  orderby: TermObjectsConnectionOrderbyEnum
  "Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false."
  padCounts: Boolean
  "Parent term ID to retrieve direct-child terms of. Default empty."
  parent: Int
  "Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty."
  search: String
  "Array of slugs to return term(s) for. Default empty."
  slug: [String]
  "Array of term taxonomy IDs, to match when querying terms."
  termTaxonomId: [ID]
  "Array of term taxonomy IDs, to match when querying terms."
  termTaxonomyId: [ID]
  "Whether to prime meta caches for matched terms. Default true."
  updateTermMetaCache: Boolean
}

"Arguments for filtering the CategoryToContentNodeConnection connection"
input CategoryToContentNodeConnectionWhereArgs {
  "The Types of content to filter"
  contentTypes: [ContentTypesOfCategoryEnum]
  "Filter the connection based on dates"
  dateQuery: DateQueryInput
  "True for objects with passwords; False for objects without passwords; null for all objects with or without passwords"
  hasPassword: Boolean
  "Specific database ID of the object"
  id: Int
  "Array of IDs for the objects to retrieve"
  in: [ID]
  "Get objects with a specific mimeType property"
  mimeType: MimeTypeEnum
  "Slug / post_name of the object"
  name: String
  "Specify objects to retrieve. Use slugs"
  nameIn: [String]
  "Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored"
  notIn: [ID]
  "What parameter to use to order the objects by."
  orderby: [PostObjectsConnectionOrderbyInput]
  "Use ID to return only children. Use 0 to return only top-level items"
  parent: ID
  "Specify objects whose parent is in an array"
  parentIn: [ID]
  "Specify posts whose parent is not in an array"
  parentNotIn: [ID]
  "Show posts with a specific password."
  password: String
  "Show Posts based on a keyword search"
  search: String
  "Retrieve posts where post status is in an array."
  stati: [PostStatusEnum]
  "Show posts with a specific status."
  status: PostStatusEnum
  "Title of the object"
  title: String
}

"Arguments for filtering the CategoryToPostConnection connection"
input CategoryToPostConnectionWhereArgs {
  "The user that's connected as the author of the object. Use the userId for the author object."
  author: Int
  "Find objects connected to author(s) in the array of author's userIds"
  authorIn: [ID]
  "Find objects connected to the author by the author's nicename"
  authorName: String
  "Find objects NOT connected to author(s) in the array of author's userIds"
  authorNotIn: [ID]
  "Category ID"
  categoryId: Int
  "Array of category IDs, used to display objects from one category OR another"
  categoryIn: [ID]
  "Use Category Slug"
  categoryName: String
  "Array of category IDs, used to display objects from one category OR another"
  categoryNotIn: [ID]
  "Filter the connection based on dates"
  dateQuery: DateQueryInput
  "True for objects with passwords; False for objects without passwords; null for all objects with or without passwords"
  hasPassword: Boolean
  "Specific database ID of the object"
  id: Int
  "Array of IDs for the objects to retrieve"
  in: [ID]
  "Get objects with a specific mimeType property"
  mimeType: MimeTypeEnum
  "Slug / post_name of the object"
  name: String
  "Specify objects to retrieve. Use slugs"
  nameIn: [String]
  "Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored"
  notIn: [ID]
  "What parameter to use to order the objects by."
  orderby: [PostObjectsConnectionOrderbyInput]
  "Use ID to return only children. Use 0 to return only top-level items"
  parent: ID
  "Specify objects whose parent is in an array"
  parentIn: [ID]
  "Specify posts whose parent is not in an array"
  parentNotIn: [ID]
  "Show posts with a specific password."
  password: String
  "Show Posts based on a keyword search"
  search: String
  "Retrieve posts where post status is in an array."
  stati: [PostStatusEnum]
  "Show posts with a specific status."
  status: PostStatusEnum
  "Tag Slug"
  tag: String
  "Use Tag ID"
  tagId: String
  "Array of tag IDs, used to display objects from one tag OR another"
  tagIn: [ID]
  "Array of tag IDs, used to display objects from one tag OR another"
  tagNotIn: [ID]
  "Array of tag slugs, used to display objects from one tag AND another"
  tagSlugAnd: [String]
  "Array of tag slugs, used to include objects in ANY specified tags"
  tagSlugIn: [String]
  "Title of the object"
  title: String
}

"Arguments for filtering the CommentToCommentConnection connection"
input CommentToCommentConnectionWhereArgs {
  "Comment author email address."
  authorEmail: String
  "Array of author IDs to include comments for."
  authorIn: [ID]
  "Array of author IDs to exclude comments for."
  authorNotIn: [ID]
  "Comment author URL."
  authorUrl: String
  "Array of comment IDs to include."
  commentIn: [ID]
  "Array of IDs of users whose unapproved comments will be returned by the query regardless of status."
  commentNotIn: [ID]
  "Include comments of a given type."
  commentType: String
  "Include comments from a given array of comment types."
  commentTypeIn: [String]
  "Exclude comments from a given array of comment types."
  commentTypeNotIn: String
  "Content object author ID to limit results by."
  contentAuthor: [ID]
  "Array of author IDs to retrieve comments for."
  contentAuthorIn: [ID]
  "Array of author IDs *not* to retrieve comments for."
  contentAuthorNotIn: [ID]
  "Limit results to those affiliated with a given content object ID."
  contentId: ID
  "Array of content object IDs to include affiliated comments for."
  contentIdIn: [ID]
  "Array of content object IDs to exclude affiliated comments for."
  contentIdNotIn: [ID]
  "Content object name (i.e. slug ) to retrieve affiliated comments for."
  contentName: String
  "Content Object parent ID to retrieve affiliated comments for."
  contentParent: Int
  "Array of content object statuses to retrieve affiliated comments for. Pass 'any' to match any value."
  contentStatus: [PostStatusEnum]
  "Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value."
  contentType: [ContentTypeEnum]
  "Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty"
  includeUnapproved: [ID]
  "Karma score to retrieve matching comments for."
  karma: Int
  "The cardinality of the order of the connection"
  order: OrderEnum
  "Field to order the comments by."
  orderby: CommentsConnectionOrderbyEnum
  "Parent ID of comment to retrieve children of."
  parent: Int
  "Array of parent IDs of comments to retrieve children for."
  parentIn: [ID]
  "Array of parent IDs of comments *not* to retrieve children for."
  parentNotIn: [ID]
  "Search term(s) to retrieve matching comments for."
  search: String
  "Comment status to limit results by."
  status: String
  "Include comments for a specific user ID."
  userId: ID
}

"Arguments for filtering the CommentToParentCommentConnection connection"
input CommentToParentCommentConnectionWhereArgs {
  "Comment author email address."
  authorEmail: String
  "Array of author IDs to include comments for."
  authorIn: [ID]
  "Array of author IDs to exclude comments for."
  authorNotIn: [ID]
  "Comment author URL."
  authorUrl: String
  "Array of comment IDs to include."
  commentIn: [ID]
  "Array of IDs of users whose unapproved comments will be returned by the query regardless of status."
  commentNotIn: [ID]
  "Include comments of a given type."
  commentType: String
  "Include comments from a given array of comment types."
  commentTypeIn: [String]
  "Exclude comments from a given array of comment types."
  commentTypeNotIn: String
  "Content object author ID to limit results by."
  contentAuthor: [ID]
  "Array of author IDs to retrieve comments for."
  contentAuthorIn: [ID]
  "Array of author IDs *not* to retrieve comments for."
  contentAuthorNotIn: [ID]
  "Limit results to those affiliated with a given content object ID."
  contentId: ID
  "Array of content object IDs to include affiliated comments for."
  contentIdIn: [ID]
  "Array of content object IDs to exclude affiliated comments for."
  contentIdNotIn: [ID]
  "Content object name (i.e. slug ) to retrieve affiliated comments for."
  contentName: String
  "Content Object parent ID to retrieve affiliated comments for."
  contentParent: Int
  "Array of content object statuses to retrieve affiliated comments for. Pass 'any' to match any value."
  contentStatus: [PostStatusEnum]
  "Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value."
  contentType: [ContentTypeEnum]
  "Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty"
  includeUnapproved: [ID]
  "Karma score to retrieve matching comments for."
  karma: Int
  "The cardinality of the order of the connection"
  order: OrderEnum
  "Field to order the comments by."
  orderby: CommentsConnectionOrderbyEnum
  "Parent ID of comment to retrieve children of."
  parent: Int
  "Array of parent IDs of comments to retrieve children for."
  parentIn: [ID]
  "Array of parent IDs of comments *not* to retrieve children for."
  parentNotIn: [ID]
  "Search term(s) to retrieve matching comments for."
  search: String
  "Comment status to limit results by."
  status: String
  "Include comments for a specific user ID."
  userId: ID
}

"Arguments for filtering the ContentTypeToContentNodeConnection connection"
input ContentTypeToContentNodeConnectionWhereArgs {
  "The Types of content to filter"
  contentTypes: [ContentTypeEnum]
  "Filter the connection based on dates"
  dateQuery: DateQueryInput
  "True for objects with passwords; False for objects without passwords; null for all objects with or without passwords"
  hasPassword: Boolean
  "Specific database ID of the object"
  id: Int
  "Array of IDs for the objects to retrieve"
  in: [ID]
  "Get objects with a specific mimeType property"
  mimeType: MimeTypeEnum
  "Slug / post_name of the object"
  name: String
  "Specify objects to retrieve. Use slugs"
  nameIn: [String]
  "Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored"
  notIn: [ID]
  "What parameter to use to order the objects by."
  orderby: [PostObjectsConnectionOrderbyInput]
  "Use ID to return only children. Use 0 to return only top-level items"
  parent: ID
  "Specify objects whose parent is in an array"
  parentIn: [ID]
  "Specify posts whose parent is not in an array"
  parentNotIn: [ID]
  "Show posts with a specific password."
  password: String
  "Show Posts based on a keyword search"
  search: String
  "Retrieve posts where post status is in an array."
  stati: [PostStatusEnum]
  "Show posts with a specific status."
  status: PostStatusEnum
  "Title of the object"
  title: String
}

"Input for the createCategory mutation."
input CreateCategoryInput {
  "The slug that the category will be an alias of"
  aliasOf: String
  "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The description of the category object"
  description: String
  "The name of the category object to mutate"
  name: String!
  "The ID of the category that should be set as the parent"
  parentId: ID
  "If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name."
  slug: String
}

"Input for the createComment mutation."
input CreateCommentInput {
  "The approval status of the comment."
  approved: String
  "The name of the comment's author."
  author: String
  "The email of the comment's author."
  authorEmail: String
  "The url of the comment's author."
  authorUrl: String
  "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The database ID of the post object the comment belongs to."
  commentOn: Int
  "Content of the comment."
  content: String
  "The date of the object. Preferable to enter as year/month/day ( e.g. 01/31/2017 ) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, \"2017\" as the input will use current date with timestamp 20:17 "
  date: String
  "Parent comment ID of current comment."
  parent: ID
  "The approval status of the comment"
  status: CommentStatusEnum
  "Type of comment."
  type: String
}

"Input for the createCourse mutation."
input CreateCourseInput {
  "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The content of the object"
  content: String
  "The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, \"2017\" as the input will use current date with timestamp 20:17 "
  date: String
  "A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types."
  menuOrder: Int
  "The ID of the parent object"
  parentId: ID
  "The password used to protect the content of the object"
  password: String
  "The slug of the object"
  slug: String
  "The status of the object"
  status: PostStatusEnum
  "The title of the object"
  title: String
}

"Input for the createGeneralFragment mutation."
input CreateGeneralFragmentInput {
  "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The content of the object"
  content: String
  "The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, \"2017\" as the input will use current date with timestamp 20:17 "
  date: String
  "A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types."
  menuOrder: Int
  "The password used to protect the content of the object"
  password: String
  "The slug of the object"
  slug: String
  "The status of the object"
  status: PostStatusEnum
  "The title of the object"
  title: String
}

"Input for the createIndividualCourse mutation."
input CreateIndividualCourseInput {
  "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The content of the object"
  content: String
  "The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, \"2017\" as the input will use current date with timestamp 20:17 "
  date: String
  "A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types."
  menuOrder: Int
  "The password used to protect the content of the object"
  password: String
  "The slug of the object"
  slug: String
  "The status of the object"
  status: PostStatusEnum
  "The title of the object"
  title: String
}

"Input for the createMediaItem mutation."
input CreateMediaItemInput {
  "Alternative text to display when mediaItem is not displayed"
  altText: String
  "The userId to assign as the author of the mediaItem"
  authorId: ID
  "The caption for the mediaItem"
  caption: String
  "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The comment status for the mediaItem"
  commentStatus: String
  "The date of the mediaItem"
  date: String
  "The date (in GMT zone) of the mediaItem"
  dateGmt: String
  "Description of the mediaItem"
  description: String
  "The file name of the mediaItem"
  filePath: String
  "The file type of the mediaItem"
  fileType: MimeTypeEnum
  "The ID of the parent object"
  parentId: ID
  "The ping status for the mediaItem"
  pingStatus: String
  "The slug of the mediaItem"
  slug: String
  "The status of the mediaItem"
  status: MediaItemStatusEnum
  "The title of the mediaItem"
  title: String
}

"Input for the createPage mutation."
input CreatePageInput {
  "The userId to assign as the author of the object"
  authorId: ID
  "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The comment status for the object"
  commentStatus: String
  "The content of the object"
  content: String
  "The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, \"2017\" as the input will use current date with timestamp 20:17 "
  date: String
  "A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types."
  menuOrder: Int
  "The ID of the parent object"
  parentId: ID
  "The password used to protect the content of the object"
  password: String
  "The slug of the object"
  slug: String
  "The status of the object"
  status: PostStatusEnum
  "The title of the object"
  title: String
}

"Input for the createPostFormat mutation."
input CreatePostFormatInput {
  "The slug that the post_format will be an alias of"
  aliasOf: String
  "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The description of the post_format object"
  description: String
  "The name of the post_format object to mutate"
  name: String!
  "If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name."
  slug: String
}

"Input for the createPost mutation."
input CreatePostInput {
  "The userId to assign as the author of the object"
  authorId: ID
  "Set connections between the post and categories"
  categories: PostCategoriesInput
  "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The comment status for the object"
  commentStatus: String
  "The content of the object"
  content: String
  "The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, \"2017\" as the input will use current date with timestamp 20:17 "
  date: String
  "The excerpt of the object"
  excerpt: String
  "A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types."
  menuOrder: Int
  "The password used to protect the content of the object"
  password: String
  "The ping status for the object"
  pingStatus: String
  "URLs that have been pinged."
  pinged: [String]
  "Set connections between the post and postFormats"
  postFormats: PostPostFormatsInput
  "The slug of the object"
  slug: String
  "The status of the object"
  status: PostStatusEnum
  "Set connections between the post and tags"
  tags: PostTagsInput
  "The title of the object"
  title: String
  "URLs queued to be pinged."
  toPing: [String]
}

"Input for the createTag mutation."
input CreateTagInput {
  "The slug that the post_tag will be an alias of"
  aliasOf: String
  "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The description of the post_tag object"
  description: String
  "The name of the post_tag object to mutate"
  name: String!
  "If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name."
  slug: String
}

"Input for the createUser mutation."
input CreateUserInput {
  "User's AOL IM account."
  aim: String
  "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "A string containing content about the user."
  description: String
  "A string that will be shown on the site. Defaults to user's username. It is likely that you will want to change this, for both appearance and security through obscurity (that is if you dont use and delete the default admin user)."
  displayName: String
  "A string containing the user's email address."
  email: String
  "\tThe user's first name."
  firstName: String
  "User's Jabber account."
  jabber: String
  "The user's last name."
  lastName: String
  "User's locale."
  locale: String
  "A string that contains a URL-friendly name for the user. The default is the user's username."
  nicename: String
  "The user's nickname, defaults to the user's username."
  nickname: String
  "A string that contains the plain text password for the user."
  password: String
  "The date the user registered. Format is Y-m-d H:i:s."
  registered: String
  "A string for whether to enable the rich editor or not. False if not empty."
  richEditing: String
  "An array of roles to be assigned to the user."
  roles: [String]
  "A string that contains the user's username for logging in."
  username: String!
  "A string containing the user's URL for the user's web site."
  websiteUrl: String
  "User's Yahoo IM account."
  yim: String
}

"Date values"
input DateInput {
  "Day of the month (from 1 to 31)"
  day: Int
  "Month number (from 1 to 12)"
  month: Int
  "4 digit year (e.g. 2017)"
  year: Int
}

"Filter the connection based on input"
input DateQueryInput {
  "Nodes should be returned after this date"
  after: DateInput
  "Nodes should be returned before this date"
  before: DateInput
  "Column to query against"
  column: PostObjectsConnectionDateColumnEnum
  "For after/before, whether exact value should be matched or not"
  compare: String
  "Day of the month (from 1 to 31)"
  day: Int
  "Hour (from 0 to 23)"
  hour: Int
  "For after/before, whether exact value should be matched or not"
  inclusive: Boolean
  "Minute (from 0 to 59)"
  minute: Int
  "Month number (from 1 to 12)"
  month: Int
  "OR or AND, how the sub-arrays should be compared"
  relation: RelationEnum
  "Second (0 to 59)"
  second: Int
  "Week of the year (from 0 to 53)"
  week: Int
  "4 digit year (e.g. 2017)"
  year: Int
}

"Input for the deleteCategory mutation."
input DeleteCategoryInput {
  "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The ID of the category to delete"
  id: ID!
}

"Input for the deleteComment mutation."
input DeleteCommentInput {
  "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "Whether the comment should be force deleted instead of being moved to the trash"
  forceDelete: Boolean
  "The deleted comment ID"
  id: ID!
}

"Input for the deleteCourse mutation."
input DeleteCourseInput {
  "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "Whether the object should be force deleted instead of being moved to the trash"
  forceDelete: Boolean
  "The ID of the course to delete"
  id: ID!
  "Override the edit lock when another user is editing the post"
  ignoreEditLock: Boolean
}

"Input for the deleteGeneralFragment mutation."
input DeleteGeneralFragmentInput {
  "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "Whether the object should be force deleted instead of being moved to the trash"
  forceDelete: Boolean
  "The ID of the generalFragment to delete"
  id: ID!
  "Override the edit lock when another user is editing the post"
  ignoreEditLock: Boolean
}

"Input for the deleteIndividualCourse mutation."
input DeleteIndividualCourseInput {
  "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "Whether the object should be force deleted instead of being moved to the trash"
  forceDelete: Boolean
  "The ID of the individualCourse to delete"
  id: ID!
  "Override the edit lock when another user is editing the post"
  ignoreEditLock: Boolean
}

"Input for the deleteMediaItem mutation."
input DeleteMediaItemInput {
  "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "Whether the mediaItem should be force deleted instead of being moved to the trash"
  forceDelete: Boolean
  "The ID of the mediaItem to delete"
  id: ID!
}

"Input for the deletePage mutation."
input DeletePageInput {
  "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "Whether the object should be force deleted instead of being moved to the trash"
  forceDelete: Boolean
  "The ID of the page to delete"
  id: ID!
  "Override the edit lock when another user is editing the post"
  ignoreEditLock: Boolean
}

"Input for the deletePostFormat mutation."
input DeletePostFormatInput {
  "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The ID of the postFormat to delete"
  id: ID!
}

"Input for the deletePost mutation."
input DeletePostInput {
  "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "Whether the object should be force deleted instead of being moved to the trash"
  forceDelete: Boolean
  "The ID of the post to delete"
  id: ID!
  "Override the edit lock when another user is editing the post"
  ignoreEditLock: Boolean
}

"Input for the deleteTag mutation."
input DeleteTagInput {
  "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The ID of the tag to delete"
  id: ID!
}

"Input for the deleteUser mutation."
input DeleteUserInput {
  "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The ID of the user you want to delete"
  id: ID!
  "Reassign posts and links to new User ID."
  reassignId: ID
}

"Arguments for filtering the HierarchicalContentNodeToContentNodeAncestorsConnection connection"
input HierarchicalContentNodeToContentNodeAncestorsConnectionWhereArgs {
  "The Types of content to filter"
  contentTypes: [ContentTypeEnum]
  "Filter the connection based on dates"
  dateQuery: DateQueryInput
  "True for objects with passwords; False for objects without passwords; null for all objects with or without passwords"
  hasPassword: Boolean
  "Specific database ID of the object"
  id: Int
  "Array of IDs for the objects to retrieve"
  in: [ID]
  "Get objects with a specific mimeType property"
  mimeType: MimeTypeEnum
  "Slug / post_name of the object"
  name: String
  "Specify objects to retrieve. Use slugs"
  nameIn: [String]
  "Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored"
  notIn: [ID]
  "What parameter to use to order the objects by."
  orderby: [PostObjectsConnectionOrderbyInput]
  "Use ID to return only children. Use 0 to return only top-level items"
  parent: ID
  "Specify objects whose parent is in an array"
  parentIn: [ID]
  "Specify posts whose parent is not in an array"
  parentNotIn: [ID]
  "Show posts with a specific password."
  password: String
  "Show Posts based on a keyword search"
  search: String
  "Retrieve posts where post status is in an array."
  stati: [PostStatusEnum]
  "Show posts with a specific status."
  status: PostStatusEnum
  "Title of the object"
  title: String
}

"Arguments for filtering the HierarchicalContentNodeToContentNodeChildrenConnection connection"
input HierarchicalContentNodeToContentNodeChildrenConnectionWhereArgs {
  "The Types of content to filter"
  contentTypes: [ContentTypeEnum]
  "Filter the connection based on dates"
  dateQuery: DateQueryInput
  "True for objects with passwords; False for objects without passwords; null for all objects with or without passwords"
  hasPassword: Boolean
  "Specific database ID of the object"
  id: Int
  "Array of IDs for the objects to retrieve"
  in: [ID]
  "Get objects with a specific mimeType property"
  mimeType: MimeTypeEnum
  "Slug / post_name of the object"
  name: String
  "Specify objects to retrieve. Use slugs"
  nameIn: [String]
  "Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored"
  notIn: [ID]
  "What parameter to use to order the objects by."
  orderby: [PostObjectsConnectionOrderbyInput]
  "Use ID to return only children. Use 0 to return only top-level items"
  parent: ID
  "Specify objects whose parent is in an array"
  parentIn: [ID]
  "Specify posts whose parent is not in an array"
  parentNotIn: [ID]
  "Show posts with a specific password."
  password: String
  "Show Posts based on a keyword search"
  search: String
  "Retrieve posts where post status is in an array."
  stati: [PostStatusEnum]
  "Show posts with a specific status."
  status: PostStatusEnum
  "Title of the object"
  title: String
}

"Arguments for filtering the MediaItemToCommentConnection connection"
input MediaItemToCommentConnectionWhereArgs {
  "Comment author email address."
  authorEmail: String
  "Array of author IDs to include comments for."
  authorIn: [ID]
  "Array of author IDs to exclude comments for."
  authorNotIn: [ID]
  "Comment author URL."
  authorUrl: String
  "Array of comment IDs to include."
  commentIn: [ID]
  "Array of IDs of users whose unapproved comments will be returned by the query regardless of status."
  commentNotIn: [ID]
  "Include comments of a given type."
  commentType: String
  "Include comments from a given array of comment types."
  commentTypeIn: [String]
  "Exclude comments from a given array of comment types."
  commentTypeNotIn: String
  "Content object author ID to limit results by."
  contentAuthor: [ID]
  "Array of author IDs to retrieve comments for."
  contentAuthorIn: [ID]
  "Array of author IDs *not* to retrieve comments for."
  contentAuthorNotIn: [ID]
  "Limit results to those affiliated with a given content object ID."
  contentId: ID
  "Array of content object IDs to include affiliated comments for."
  contentIdIn: [ID]
  "Array of content object IDs to exclude affiliated comments for."
  contentIdNotIn: [ID]
  "Content object name (i.e. slug ) to retrieve affiliated comments for."
  contentName: String
  "Content Object parent ID to retrieve affiliated comments for."
  contentParent: Int
  "Array of content object statuses to retrieve affiliated comments for. Pass 'any' to match any value."
  contentStatus: [PostStatusEnum]
  "Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value."
  contentType: [ContentTypeEnum]
  "Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty"
  includeUnapproved: [ID]
  "Karma score to retrieve matching comments for."
  karma: Int
  "The cardinality of the order of the connection"
  order: OrderEnum
  "Field to order the comments by."
  orderby: CommentsConnectionOrderbyEnum
  "Parent ID of comment to retrieve children of."
  parent: Int
  "Array of parent IDs of comments to retrieve children for."
  parentIn: [ID]
  "Array of parent IDs of comments *not* to retrieve children for."
  parentNotIn: [ID]
  "Search term(s) to retrieve matching comments for."
  search: String
  "Comment status to limit results by."
  status: String
  "Include comments for a specific user ID."
  userId: ID
}

"Arguments for filtering the MenuItemToMenuItemConnection connection"
input MenuItemToMenuItemConnectionWhereArgs {
  "The database ID of the object"
  id: Int
  "The menu location for the menu being queried"
  location: MenuLocationEnum
  "The database ID of the parent menu object"
  parentDatabaseId: Int
  "The ID of the parent menu object"
  parentId: ID
}

"Arguments for filtering the MenuToMenuItemConnection connection"
input MenuToMenuItemConnectionWhereArgs {
  "The database ID of the object"
  id: Int
  "The menu location for the menu being queried"
  location: MenuLocationEnum
  "The database ID of the parent menu object"
  parentDatabaseId: Int
  "The ID of the parent menu object"
  parentId: ID
}

"Arguments for filtering the PageToCommentConnection connection"
input PageToCommentConnectionWhereArgs {
  "Comment author email address."
  authorEmail: String
  "Array of author IDs to include comments for."
  authorIn: [ID]
  "Array of author IDs to exclude comments for."
  authorNotIn: [ID]
  "Comment author URL."
  authorUrl: String
  "Array of comment IDs to include."
  commentIn: [ID]
  "Array of IDs of users whose unapproved comments will be returned by the query regardless of status."
  commentNotIn: [ID]
  "Include comments of a given type."
  commentType: String
  "Include comments from a given array of comment types."
  commentTypeIn: [String]
  "Exclude comments from a given array of comment types."
  commentTypeNotIn: String
  "Content object author ID to limit results by."
  contentAuthor: [ID]
  "Array of author IDs to retrieve comments for."
  contentAuthorIn: [ID]
  "Array of author IDs *not* to retrieve comments for."
  contentAuthorNotIn: [ID]
  "Limit results to those affiliated with a given content object ID."
  contentId: ID
  "Array of content object IDs to include affiliated comments for."
  contentIdIn: [ID]
  "Array of content object IDs to exclude affiliated comments for."
  contentIdNotIn: [ID]
  "Content object name (i.e. slug ) to retrieve affiliated comments for."
  contentName: String
  "Content Object parent ID to retrieve affiliated comments for."
  contentParent: Int
  "Array of content object statuses to retrieve affiliated comments for. Pass 'any' to match any value."
  contentStatus: [PostStatusEnum]
  "Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value."
  contentType: [ContentTypeEnum]
  "Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty"
  includeUnapproved: [ID]
  "Karma score to retrieve matching comments for."
  karma: Int
  "The cardinality of the order of the connection"
  order: OrderEnum
  "Field to order the comments by."
  orderby: CommentsConnectionOrderbyEnum
  "Parent ID of comment to retrieve children of."
  parent: Int
  "Array of parent IDs of comments to retrieve children for."
  parentIn: [ID]
  "Array of parent IDs of comments *not* to retrieve children for."
  parentNotIn: [ID]
  "Search term(s) to retrieve matching comments for."
  search: String
  "Comment status to limit results by."
  status: String
  "Include comments for a specific user ID."
  userId: ID
}

"Arguments for filtering the PageToRevisionConnection connection"
input PageToRevisionConnectionWhereArgs {
  "The user that's connected as the author of the object. Use the userId for the author object."
  author: Int
  "Find objects connected to author(s) in the array of author's userIds"
  authorIn: [ID]
  "Find objects connected to the author by the author's nicename"
  authorName: String
  "Find objects NOT connected to author(s) in the array of author's userIds"
  authorNotIn: [ID]
  "Filter the connection based on dates"
  dateQuery: DateQueryInput
  "True for objects with passwords; False for objects without passwords; null for all objects with or without passwords"
  hasPassword: Boolean
  "Specific database ID of the object"
  id: Int
  "Array of IDs for the objects to retrieve"
  in: [ID]
  "Get objects with a specific mimeType property"
  mimeType: MimeTypeEnum
  "Slug / post_name of the object"
  name: String
  "Specify objects to retrieve. Use slugs"
  nameIn: [String]
  "Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored"
  notIn: [ID]
  "What parameter to use to order the objects by."
  orderby: [PostObjectsConnectionOrderbyInput]
  "Use ID to return only children. Use 0 to return only top-level items"
  parent: ID
  "Specify objects whose parent is in an array"
  parentIn: [ID]
  "Specify posts whose parent is not in an array"
  parentNotIn: [ID]
  "Show posts with a specific password."
  password: String
  "Show Posts based on a keyword search"
  search: String
  "Retrieve posts where post status is in an array."
  stati: [PostStatusEnum]
  "Show posts with a specific status."
  status: PostStatusEnum
  "Title of the object"
  title: String
}

"Set relationships between the post to categories"
input PostCategoriesInput {
  "If true, this will append the category to existing related categories. If false, this will replace existing relationships. Default true."
  append: Boolean
  "The input list of items to set."
  nodes: [PostCategoriesNodeInput]
}

"List of categories to connect the post to. If an ID is set, it will be used to create the connection. If not, it will look for a slug. If neither are valid existing terms, and the site is configured to allow terms to be created during post mutations, a term will be created using the Name if it exists in the input, then fallback to the slug if it exists."
input PostCategoriesNodeInput {
  "The description of the category. This field is used to set a description of the category if a new one is created during the mutation."
  description: String
  "The ID of the category. If present, this will be used to connect to the post. If no existing category exists with this ID, no connection will be made."
  id: ID
  "The name of the category. This field is used to create a new term, if term creation is enabled in nested mutations, and if one does not already exist with the provided slug or ID or if a slug or ID is not provided. If no name is included and a term is created, the creation will fallback to the slug field."
  name: String
  "The slug of the category. If no ID is present, this field will be used to make a connection. If no existing term exists with this slug, this field will be used as a fallback to the Name field when creating a new term to connect to, if term creation is enabled as a nested mutation."
  slug: String
}

"Arguments for filtering the PostFormatToContentNodeConnection connection"
input PostFormatToContentNodeConnectionWhereArgs {
  "The Types of content to filter"
  contentTypes: [ContentTypesOfPostFormatEnum]
  "Filter the connection based on dates"
  dateQuery: DateQueryInput
  "True for objects with passwords; False for objects without passwords; null for all objects with or without passwords"
  hasPassword: Boolean
  "Specific database ID of the object"
  id: Int
  "Array of IDs for the objects to retrieve"
  in: [ID]
  "Get objects with a specific mimeType property"
  mimeType: MimeTypeEnum
  "Slug / post_name of the object"
  name: String
  "Specify objects to retrieve. Use slugs"
  nameIn: [String]
  "Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored"
  notIn: [ID]
  "What parameter to use to order the objects by."
  orderby: [PostObjectsConnectionOrderbyInput]
  "Use ID to return only children. Use 0 to return only top-level items"
  parent: ID
  "Specify objects whose parent is in an array"
  parentIn: [ID]
  "Specify posts whose parent is not in an array"
  parentNotIn: [ID]
  "Show posts with a specific password."
  password: String
  "Show Posts based on a keyword search"
  search: String
  "Retrieve posts where post status is in an array."
  stati: [PostStatusEnum]
  "Show posts with a specific status."
  status: PostStatusEnum
  "Title of the object"
  title: String
}

"Arguments for filtering the PostFormatToPostConnection connection"
input PostFormatToPostConnectionWhereArgs {
  "The user that's connected as the author of the object. Use the userId for the author object."
  author: Int
  "Find objects connected to author(s) in the array of author's userIds"
  authorIn: [ID]
  "Find objects connected to the author by the author's nicename"
  authorName: String
  "Find objects NOT connected to author(s) in the array of author's userIds"
  authorNotIn: [ID]
  "Category ID"
  categoryId: Int
  "Array of category IDs, used to display objects from one category OR another"
  categoryIn: [ID]
  "Use Category Slug"
  categoryName: String
  "Array of category IDs, used to display objects from one category OR another"
  categoryNotIn: [ID]
  "Filter the connection based on dates"
  dateQuery: DateQueryInput
  "True for objects with passwords; False for objects without passwords; null for all objects with or without passwords"
  hasPassword: Boolean
  "Specific database ID of the object"
  id: Int
  "Array of IDs for the objects to retrieve"
  in: [ID]
  "Get objects with a specific mimeType property"
  mimeType: MimeTypeEnum
  "Slug / post_name of the object"
  name: String
  "Specify objects to retrieve. Use slugs"
  nameIn: [String]
  "Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored"
  notIn: [ID]
  "What parameter to use to order the objects by."
  orderby: [PostObjectsConnectionOrderbyInput]
  "Use ID to return only children. Use 0 to return only top-level items"
  parent: ID
  "Specify objects whose parent is in an array"
  parentIn: [ID]
  "Specify posts whose parent is not in an array"
  parentNotIn: [ID]
  "Show posts with a specific password."
  password: String
  "Show Posts based on a keyword search"
  search: String
  "Retrieve posts where post status is in an array."
  stati: [PostStatusEnum]
  "Show posts with a specific status."
  status: PostStatusEnum
  "Tag Slug"
  tag: String
  "Use Tag ID"
  tagId: String
  "Array of tag IDs, used to display objects from one tag OR another"
  tagIn: [ID]
  "Array of tag IDs, used to display objects from one tag OR another"
  tagNotIn: [ID]
  "Array of tag slugs, used to display objects from one tag AND another"
  tagSlugAnd: [String]
  "Array of tag slugs, used to include objects in ANY specified tags"
  tagSlugIn: [String]
  "Title of the object"
  title: String
}

"Options for ordering the connection"
input PostObjectsConnectionOrderbyInput {
  "The field to order the connection by"
  field: PostObjectsConnectionOrderbyEnum!
  "Possible directions in which to order a list of items"
  order: OrderEnum!
}

"Set relationships between the post to postFormats"
input PostPostFormatsInput {
  "If true, this will append the postFormat to existing related postFormats. If false, this will replace existing relationships. Default true."
  append: Boolean
  "The input list of items to set."
  nodes: [PostPostFormatsNodeInput]
}

"List of postFormats to connect the post to. If an ID is set, it will be used to create the connection. If not, it will look for a slug. If neither are valid existing terms, and the site is configured to allow terms to be created during post mutations, a term will be created using the Name if it exists in the input, then fallback to the slug if it exists."
input PostPostFormatsNodeInput {
  "The description of the postFormat. This field is used to set a description of the postFormat if a new one is created during the mutation."
  description: String
  "The ID of the postFormat. If present, this will be used to connect to the post. If no existing postFormat exists with this ID, no connection will be made."
  id: ID
  "The name of the postFormat. This field is used to create a new term, if term creation is enabled in nested mutations, and if one does not already exist with the provided slug or ID or if a slug or ID is not provided. If no name is included and a term is created, the creation will fallback to the slug field."
  name: String
  "The slug of the postFormat. If no ID is present, this field will be used to make a connection. If no existing term exists with this slug, this field will be used as a fallback to the Name field when creating a new term to connect to, if term creation is enabled as a nested mutation."
  slug: String
}

"Set relationships between the post to tags"
input PostTagsInput {
  "If true, this will append the tag to existing related tags. If false, this will replace existing relationships. Default true."
  append: Boolean
  "The input list of items to set."
  nodes: [PostTagsNodeInput]
}

"List of tags to connect the post to. If an ID is set, it will be used to create the connection. If not, it will look for a slug. If neither are valid existing terms, and the site is configured to allow terms to be created during post mutations, a term will be created using the Name if it exists in the input, then fallback to the slug if it exists."
input PostTagsNodeInput {
  "The description of the tag. This field is used to set a description of the tag if a new one is created during the mutation."
  description: String
  "The ID of the tag. If present, this will be used to connect to the post. If no existing tag exists with this ID, no connection will be made."
  id: ID
  "The name of the tag. This field is used to create a new term, if term creation is enabled in nested mutations, and if one does not already exist with the provided slug or ID or if a slug or ID is not provided. If no name is included and a term is created, the creation will fallback to the slug field."
  name: String
  "The slug of the tag. If no ID is present, this field will be used to make a connection. If no existing term exists with this slug, this field will be used as a fallback to the Name field when creating a new term to connect to, if term creation is enabled as a nested mutation."
  slug: String
}

"Arguments for filtering the PostToCategoryConnection connection"
input PostToCategoryConnectionWhereArgs {
  "Unique cache key to be produced when this query is stored in an object cache. Default is 'core'."
  cacheDomain: String
  "Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0."
  childOf: Int
  "True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false."
  childless: Boolean
  "Retrieve terms where the description is LIKE the input value. Default empty."
  descriptionLike: String
  "Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array."
  exclude: [ID]
  "Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array."
  excludeTree: [ID]
  "Whether to hide terms not assigned to any posts. Accepts true or false. Default false"
  hideEmpty: Boolean
  "Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true."
  hierarchical: Boolean
  "Array of term ids to include. Default empty array."
  include: [ID]
  "Array of names to return term(s) for. Default empty."
  name: [String]
  "Retrieve terms where the name is LIKE the input value. Default empty."
  nameLike: String
  "Array of object IDs. Results will be limited to terms associated with these objects."
  objectIds: [ID]
  "Direction the connection should be ordered in"
  order: OrderEnum
  "Field(s) to order terms by. Defaults to 'name'."
  orderby: TermObjectsConnectionOrderbyEnum
  "Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false."
  padCounts: Boolean
  "Parent term ID to retrieve direct-child terms of. Default empty."
  parent: Int
  "Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty."
  search: String
  "Array of slugs to return term(s) for. Default empty."
  slug: [String]
  "Array of term taxonomy IDs, to match when querying terms."
  termTaxonomId: [ID]
  "Array of term taxonomy IDs, to match when querying terms."
  termTaxonomyId: [ID]
  "Whether to prime meta caches for matched terms. Default true."
  updateTermMetaCache: Boolean
}

"Arguments for filtering the PostToCommentConnection connection"
input PostToCommentConnectionWhereArgs {
  "Comment author email address."
  authorEmail: String
  "Array of author IDs to include comments for."
  authorIn: [ID]
  "Array of author IDs to exclude comments for."
  authorNotIn: [ID]
  "Comment author URL."
  authorUrl: String
  "Array of comment IDs to include."
  commentIn: [ID]
  "Array of IDs of users whose unapproved comments will be returned by the query regardless of status."
  commentNotIn: [ID]
  "Include comments of a given type."
  commentType: String
  "Include comments from a given array of comment types."
  commentTypeIn: [String]
  "Exclude comments from a given array of comment types."
  commentTypeNotIn: String
  "Content object author ID to limit results by."
  contentAuthor: [ID]
  "Array of author IDs to retrieve comments for."
  contentAuthorIn: [ID]
  "Array of author IDs *not* to retrieve comments for."
  contentAuthorNotIn: [ID]
  "Limit results to those affiliated with a given content object ID."
  contentId: ID
  "Array of content object IDs to include affiliated comments for."
  contentIdIn: [ID]
  "Array of content object IDs to exclude affiliated comments for."
  contentIdNotIn: [ID]
  "Content object name (i.e. slug ) to retrieve affiliated comments for."
  contentName: String
  "Content Object parent ID to retrieve affiliated comments for."
  contentParent: Int
  "Array of content object statuses to retrieve affiliated comments for. Pass 'any' to match any value."
  contentStatus: [PostStatusEnum]
  "Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value."
  contentType: [ContentTypeEnum]
  "Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty"
  includeUnapproved: [ID]
  "Karma score to retrieve matching comments for."
  karma: Int
  "The cardinality of the order of the connection"
  order: OrderEnum
  "Field to order the comments by."
  orderby: CommentsConnectionOrderbyEnum
  "Parent ID of comment to retrieve children of."
  parent: Int
  "Array of parent IDs of comments to retrieve children for."
  parentIn: [ID]
  "Array of parent IDs of comments *not* to retrieve children for."
  parentNotIn: [ID]
  "Search term(s) to retrieve matching comments for."
  search: String
  "Comment status to limit results by."
  status: String
  "Include comments for a specific user ID."
  userId: ID
}

"Arguments for filtering the PostToPostFormatConnection connection"
input PostToPostFormatConnectionWhereArgs {
  "Unique cache key to be produced when this query is stored in an object cache. Default is 'core'."
  cacheDomain: String
  "Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0."
  childOf: Int
  "True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false."
  childless: Boolean
  "Retrieve terms where the description is LIKE the input value. Default empty."
  descriptionLike: String
  "Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array."
  exclude: [ID]
  "Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array."
  excludeTree: [ID]
  "Whether to hide terms not assigned to any posts. Accepts true or false. Default false"
  hideEmpty: Boolean
  "Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true."
  hierarchical: Boolean
  "Array of term ids to include. Default empty array."
  include: [ID]
  "Array of names to return term(s) for. Default empty."
  name: [String]
  "Retrieve terms where the name is LIKE the input value. Default empty."
  nameLike: String
  "Array of object IDs. Results will be limited to terms associated with these objects."
  objectIds: [ID]
  "Direction the connection should be ordered in"
  order: OrderEnum
  "Field(s) to order terms by. Defaults to 'name'."
  orderby: TermObjectsConnectionOrderbyEnum
  "Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false."
  padCounts: Boolean
  "Parent term ID to retrieve direct-child terms of. Default empty."
  parent: Int
  "Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty."
  search: String
  "Array of slugs to return term(s) for. Default empty."
  slug: [String]
  "Array of term taxonomy IDs, to match when querying terms."
  termTaxonomId: [ID]
  "Array of term taxonomy IDs, to match when querying terms."
  termTaxonomyId: [ID]
  "Whether to prime meta caches for matched terms. Default true."
  updateTermMetaCache: Boolean
}

"Arguments for filtering the PostToRevisionConnection connection"
input PostToRevisionConnectionWhereArgs {
  "The user that's connected as the author of the object. Use the userId for the author object."
  author: Int
  "Find objects connected to author(s) in the array of author's userIds"
  authorIn: [ID]
  "Find objects connected to the author by the author's nicename"
  authorName: String
  "Find objects NOT connected to author(s) in the array of author's userIds"
  authorNotIn: [ID]
  "Category ID"
  categoryId: Int
  "Array of category IDs, used to display objects from one category OR another"
  categoryIn: [ID]
  "Use Category Slug"
  categoryName: String
  "Array of category IDs, used to display objects from one category OR another"
  categoryNotIn: [ID]
  "Filter the connection based on dates"
  dateQuery: DateQueryInput
  "True for objects with passwords; False for objects without passwords; null for all objects with or without passwords"
  hasPassword: Boolean
  "Specific database ID of the object"
  id: Int
  "Array of IDs for the objects to retrieve"
  in: [ID]
  "Get objects with a specific mimeType property"
  mimeType: MimeTypeEnum
  "Slug / post_name of the object"
  name: String
  "Specify objects to retrieve. Use slugs"
  nameIn: [String]
  "Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored"
  notIn: [ID]
  "What parameter to use to order the objects by."
  orderby: [PostObjectsConnectionOrderbyInput]
  "Use ID to return only children. Use 0 to return only top-level items"
  parent: ID
  "Specify objects whose parent is in an array"
  parentIn: [ID]
  "Specify posts whose parent is not in an array"
  parentNotIn: [ID]
  "Show posts with a specific password."
  password: String
  "Show Posts based on a keyword search"
  search: String
  "Retrieve posts where post status is in an array."
  stati: [PostStatusEnum]
  "Show posts with a specific status."
  status: PostStatusEnum
  "Tag Slug"
  tag: String
  "Use Tag ID"
  tagId: String
  "Array of tag IDs, used to display objects from one tag OR another"
  tagIn: [ID]
  "Array of tag IDs, used to display objects from one tag OR another"
  tagNotIn: [ID]
  "Array of tag slugs, used to display objects from one tag AND another"
  tagSlugAnd: [String]
  "Array of tag slugs, used to include objects in ANY specified tags"
  tagSlugIn: [String]
  "Title of the object"
  title: String
}

"Arguments for filtering the PostToTagConnection connection"
input PostToTagConnectionWhereArgs {
  "Unique cache key to be produced when this query is stored in an object cache. Default is 'core'."
  cacheDomain: String
  "Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0."
  childOf: Int
  "True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false."
  childless: Boolean
  "Retrieve terms where the description is LIKE the input value. Default empty."
  descriptionLike: String
  "Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array."
  exclude: [ID]
  "Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array."
  excludeTree: [ID]
  "Whether to hide terms not assigned to any posts. Accepts true or false. Default false"
  hideEmpty: Boolean
  "Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true."
  hierarchical: Boolean
  "Array of term ids to include. Default empty array."
  include: [ID]
  "Array of names to return term(s) for. Default empty."
  name: [String]
  "Retrieve terms where the name is LIKE the input value. Default empty."
  nameLike: String
  "Array of object IDs. Results will be limited to terms associated with these objects."
  objectIds: [ID]
  "Direction the connection should be ordered in"
  order: OrderEnum
  "Field(s) to order terms by. Defaults to 'name'."
  orderby: TermObjectsConnectionOrderbyEnum
  "Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false."
  padCounts: Boolean
  "Parent term ID to retrieve direct-child terms of. Default empty."
  parent: Int
  "Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty."
  search: String
  "Array of slugs to return term(s) for. Default empty."
  slug: [String]
  "Array of term taxonomy IDs, to match when querying terms."
  termTaxonomId: [ID]
  "Array of term taxonomy IDs, to match when querying terms."
  termTaxonomyId: [ID]
  "Whether to prime meta caches for matched terms. Default true."
  updateTermMetaCache: Boolean
}

"Arguments for filtering the PostToTermNodeConnection connection"
input PostToTermNodeConnectionWhereArgs {
  "Unique cache key to be produced when this query is stored in an object cache. Default is 'core'."
  cacheDomain: String
  "Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0."
  childOf: Int
  "True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false."
  childless: Boolean
  "Retrieve terms where the description is LIKE the input value. Default empty."
  descriptionLike: String
  "Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array."
  exclude: [ID]
  "Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array."
  excludeTree: [ID]
  "Whether to hide terms not assigned to any posts. Accepts true or false. Default false"
  hideEmpty: Boolean
  "Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true."
  hierarchical: Boolean
  "Array of term ids to include. Default empty array."
  include: [ID]
  "Array of names to return term(s) for. Default empty."
  name: [String]
  "Retrieve terms where the name is LIKE the input value. Default empty."
  nameLike: String
  "Array of object IDs. Results will be limited to terms associated with these objects."
  objectIds: [ID]
  "Direction the connection should be ordered in"
  order: OrderEnum
  "Field(s) to order terms by. Defaults to 'name'."
  orderby: TermObjectsConnectionOrderbyEnum
  "Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false."
  padCounts: Boolean
  "Parent term ID to retrieve direct-child terms of. Default empty."
  parent: Int
  "Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty."
  search: String
  "Array of slugs to return term(s) for. Default empty."
  slug: [String]
  "The Taxonomy to filter terms by"
  taxonomies: [TaxonomyEnum]
  "Array of term taxonomy IDs, to match when querying terms."
  termTaxonomId: [ID]
  "Array of term taxonomy IDs, to match when querying terms."
  termTaxonomyId: [ID]
  "Whether to prime meta caches for matched terms. Default true."
  updateTermMetaCache: Boolean
}

"Input for the registerUser mutation."
input RegisterUserInput {
  "User's AOL IM account."
  aim: String
  "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "A string containing content about the user."
  description: String
  "A string that will be shown on the site. Defaults to user's username. It is likely that you will want to change this, for both appearance and security through obscurity (that is if you dont use and delete the default admin user)."
  displayName: String
  "A string containing the user's email address."
  email: String
  "\tThe user's first name."
  firstName: String
  "User's Jabber account."
  jabber: String
  "The user's last name."
  lastName: String
  "User's locale."
  locale: String
  "A string that contains a URL-friendly name for the user. The default is the user's username."
  nicename: String
  "The user's nickname, defaults to the user's username."
  nickname: String
  "A string that contains the plain text password for the user."
  password: String
  "The date the user registered. Format is Y-m-d H:i:s."
  registered: String
  "A string for whether to enable the rich editor or not. False if not empty."
  richEditing: String
  "A string that contains the user's username."
  username: String!
  "A string containing the user's URL for the user's web site."
  websiteUrl: String
  "User's Yahoo IM account."
  yim: String
}

"Input for the resetUserPassword mutation."
input ResetUserPasswordInput {
  "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "Password reset key"
  key: String
  "The user's login (username)."
  login: String
  "The new password."
  password: String
}

"Input for the restoreComment mutation."
input RestoreCommentInput {
  "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The ID of the comment to be restored"
  id: ID!
}

"Arguments for filtering the RootQueryToCategoryConnection connection"
input RootQueryToCategoryConnectionWhereArgs {
  "Unique cache key to be produced when this query is stored in an object cache. Default is 'core'."
  cacheDomain: String
  "Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0."
  childOf: Int
  "True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false."
  childless: Boolean
  "Retrieve terms where the description is LIKE the input value. Default empty."
  descriptionLike: String
  "Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array."
  exclude: [ID]
  "Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array."
  excludeTree: [ID]
  "Whether to hide terms not assigned to any posts. Accepts true or false. Default false"
  hideEmpty: Boolean
  "Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true."
  hierarchical: Boolean
  "Array of term ids to include. Default empty array."
  include: [ID]
  "Array of names to return term(s) for. Default empty."
  name: [String]
  "Retrieve terms where the name is LIKE the input value. Default empty."
  nameLike: String
  "Array of object IDs. Results will be limited to terms associated with these objects."
  objectIds: [ID]
  "Direction the connection should be ordered in"
  order: OrderEnum
  "Field(s) to order terms by. Defaults to 'name'."
  orderby: TermObjectsConnectionOrderbyEnum
  "Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false."
  padCounts: Boolean
  "Parent term ID to retrieve direct-child terms of. Default empty."
  parent: Int
  "Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty."
  search: String
  "Array of slugs to return term(s) for. Default empty."
  slug: [String]
  "Array of term taxonomy IDs, to match when querying terms."
  termTaxonomId: [ID]
  "Array of term taxonomy IDs, to match when querying terms."
  termTaxonomyId: [ID]
  "Whether to prime meta caches for matched terms. Default true."
  updateTermMetaCache: Boolean
}

"Arguments for filtering the RootQueryToCommentConnection connection"
input RootQueryToCommentConnectionWhereArgs {
  "Comment author email address."
  authorEmail: String
  "Array of author IDs to include comments for."
  authorIn: [ID]
  "Array of author IDs to exclude comments for."
  authorNotIn: [ID]
  "Comment author URL."
  authorUrl: String
  "Array of comment IDs to include."
  commentIn: [ID]
  "Array of IDs of users whose unapproved comments will be returned by the query regardless of status."
  commentNotIn: [ID]
  "Include comments of a given type."
  commentType: String
  "Include comments from a given array of comment types."
  commentTypeIn: [String]
  "Exclude comments from a given array of comment types."
  commentTypeNotIn: String
  "Content object author ID to limit results by."
  contentAuthor: [ID]
  "Array of author IDs to retrieve comments for."
  contentAuthorIn: [ID]
  "Array of author IDs *not* to retrieve comments for."
  contentAuthorNotIn: [ID]
  "Limit results to those affiliated with a given content object ID."
  contentId: ID
  "Array of content object IDs to include affiliated comments for."
  contentIdIn: [ID]
  "Array of content object IDs to exclude affiliated comments for."
  contentIdNotIn: [ID]
  "Content object name (i.e. slug ) to retrieve affiliated comments for."
  contentName: String
  "Content Object parent ID to retrieve affiliated comments for."
  contentParent: Int
  "Array of content object statuses to retrieve affiliated comments for. Pass 'any' to match any value."
  contentStatus: [PostStatusEnum]
  "Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value."
  contentType: [ContentTypeEnum]
  "Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty"
  includeUnapproved: [ID]
  "Karma score to retrieve matching comments for."
  karma: Int
  "The cardinality of the order of the connection"
  order: OrderEnum
  "Field to order the comments by."
  orderby: CommentsConnectionOrderbyEnum
  "Parent ID of comment to retrieve children of."
  parent: Int
  "Array of parent IDs of comments to retrieve children for."
  parentIn: [ID]
  "Array of parent IDs of comments *not* to retrieve children for."
  parentNotIn: [ID]
  "Search term(s) to retrieve matching comments for."
  search: String
  "Comment status to limit results by."
  status: String
  "Include comments for a specific user ID."
  userId: ID
}

"Arguments for filtering the RootQueryToContentNodeConnection connection"
input RootQueryToContentNodeConnectionWhereArgs {
  "The Types of content to filter"
  contentTypes: [ContentTypeEnum]
  "Filter the connection based on dates"
  dateQuery: DateQueryInput
  "True for objects with passwords; False for objects without passwords; null for all objects with or without passwords"
  hasPassword: Boolean
  "Specific database ID of the object"
  id: Int
  "Array of IDs for the objects to retrieve"
  in: [ID]
  "Get objects with a specific mimeType property"
  mimeType: MimeTypeEnum
  "Slug / post_name of the object"
  name: String
  "Specify objects to retrieve. Use slugs"
  nameIn: [String]
  "Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored"
  notIn: [ID]
  "What parameter to use to order the objects by."
  orderby: [PostObjectsConnectionOrderbyInput]
  "Use ID to return only children. Use 0 to return only top-level items"
  parent: ID
  "Specify objects whose parent is in an array"
  parentIn: [ID]
  "Specify posts whose parent is not in an array"
  parentNotIn: [ID]
  "Show posts with a specific password."
  password: String
  "Show Posts based on a keyword search"
  search: String
  "Retrieve posts where post status is in an array."
  stati: [PostStatusEnum]
  "Show posts with a specific status."
  status: PostStatusEnum
  "Title of the object"
  title: String
}

"Arguments for filtering the RootQueryToCourseConnection connection"
input RootQueryToCourseConnectionWhereArgs {
  "Filter the connection based on dates"
  dateQuery: DateQueryInput
  "True for objects with passwords; False for objects without passwords; null for all objects with or without passwords"
  hasPassword: Boolean
  "Specific database ID of the object"
  id: Int
  "Array of IDs for the objects to retrieve"
  in: [ID]
  "Get objects with a specific mimeType property"
  mimeType: MimeTypeEnum
  "Slug / post_name of the object"
  name: String
  "Specify objects to retrieve. Use slugs"
  nameIn: [String]
  "Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored"
  notIn: [ID]
  "What parameter to use to order the objects by."
  orderby: [PostObjectsConnectionOrderbyInput]
  "Use ID to return only children. Use 0 to return only top-level items"
  parent: ID
  "Specify objects whose parent is in an array"
  parentIn: [ID]
  "Specify posts whose parent is not in an array"
  parentNotIn: [ID]
  "Show posts with a specific password."
  password: String
  "Show Posts based on a keyword search"
  search: String
  "Retrieve posts where post status is in an array."
  stati: [PostStatusEnum]
  "Show posts with a specific status."
  status: PostStatusEnum
  "Title of the object"
  title: String
}

"Arguments for filtering the RootQueryToGeneralFragmentConnection connection"
input RootQueryToGeneralFragmentConnectionWhereArgs {
  "Filter the connection based on dates"
  dateQuery: DateQueryInput
  "True for objects with passwords; False for objects without passwords; null for all objects with or without passwords"
  hasPassword: Boolean
  "Specific database ID of the object"
  id: Int
  "Array of IDs for the objects to retrieve"
  in: [ID]
  "Get objects with a specific mimeType property"
  mimeType: MimeTypeEnum
  "Slug / post_name of the object"
  name: String
  "Specify objects to retrieve. Use slugs"
  nameIn: [String]
  "Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored"
  notIn: [ID]
  "What parameter to use to order the objects by."
  orderby: [PostObjectsConnectionOrderbyInput]
  "Use ID to return only children. Use 0 to return only top-level items"
  parent: ID
  "Specify objects whose parent is in an array"
  parentIn: [ID]
  "Specify posts whose parent is not in an array"
  parentNotIn: [ID]
  "Show posts with a specific password."
  password: String
  "Show Posts based on a keyword search"
  search: String
  "Retrieve posts where post status is in an array."
  stati: [PostStatusEnum]
  "Show posts with a specific status."
  status: PostStatusEnum
  "Title of the object"
  title: String
}

"Arguments for filtering the RootQueryToIndividualCourseConnection connection"
input RootQueryToIndividualCourseConnectionWhereArgs {
  "Filter the connection based on dates"
  dateQuery: DateQueryInput
  "True for objects with passwords; False for objects without passwords; null for all objects with or without passwords"
  hasPassword: Boolean
  "Specific database ID of the object"
  id: Int
  "Array of IDs for the objects to retrieve"
  in: [ID]
  "Get objects with a specific mimeType property"
  mimeType: MimeTypeEnum
  "Slug / post_name of the object"
  name: String
  "Specify objects to retrieve. Use slugs"
  nameIn: [String]
  "Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored"
  notIn: [ID]
  "What parameter to use to order the objects by."
  orderby: [PostObjectsConnectionOrderbyInput]
  "Use ID to return only children. Use 0 to return only top-level items"
  parent: ID
  "Specify objects whose parent is in an array"
  parentIn: [ID]
  "Specify posts whose parent is not in an array"
  parentNotIn: [ID]
  "Show posts with a specific password."
  password: String
  "Show Posts based on a keyword search"
  search: String
  "Retrieve posts where post status is in an array."
  stati: [PostStatusEnum]
  "Show posts with a specific status."
  status: PostStatusEnum
  "Title of the object"
  title: String
}

"Arguments for filtering the RootQueryToMediaItemConnection connection"
input RootQueryToMediaItemConnectionWhereArgs {
  "The user that's connected as the author of the object. Use the userId for the author object."
  author: Int
  "Find objects connected to author(s) in the array of author's userIds"
  authorIn: [ID]
  "Find objects connected to the author by the author's nicename"
  authorName: String
  "Find objects NOT connected to author(s) in the array of author's userIds"
  authorNotIn: [ID]
  "Filter the connection based on dates"
  dateQuery: DateQueryInput
  "True for objects with passwords; False for objects without passwords; null for all objects with or without passwords"
  hasPassword: Boolean
  "Specific database ID of the object"
  id: Int
  "Array of IDs for the objects to retrieve"
  in: [ID]
  "Get objects with a specific mimeType property"
  mimeType: MimeTypeEnum
  "Slug / post_name of the object"
  name: String
  "Specify objects to retrieve. Use slugs"
  nameIn: [String]
  "Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored"
  notIn: [ID]
  "What parameter to use to order the objects by."
  orderby: [PostObjectsConnectionOrderbyInput]
  "Use ID to return only children. Use 0 to return only top-level items"
  parent: ID
  "Specify objects whose parent is in an array"
  parentIn: [ID]
  "Specify posts whose parent is not in an array"
  parentNotIn: [ID]
  "Show posts with a specific password."
  password: String
  "Show Posts based on a keyword search"
  search: String
  "Retrieve posts where post status is in an array."
  stati: [PostStatusEnum]
  "Show posts with a specific status."
  status: PostStatusEnum
  "Title of the object"
  title: String
}

"Arguments for filtering the RootQueryToMenuConnection connection"
input RootQueryToMenuConnectionWhereArgs {
  "The database ID of the object"
  id: Int
  "The menu location for the menu being queried"
  location: MenuLocationEnum
  "The slug of the menu to query items for"
  slug: String
}

"Arguments for filtering the RootQueryToMenuItemConnection connection"
input RootQueryToMenuItemConnectionWhereArgs {
  "The database ID of the object"
  id: Int
  "The menu location for the menu being queried"
  location: MenuLocationEnum
  "The database ID of the parent menu object"
  parentDatabaseId: Int
  "The ID of the parent menu object"
  parentId: ID
}

"Arguments for filtering the RootQueryToPageConnection connection"
input RootQueryToPageConnectionWhereArgs {
  "The user that's connected as the author of the object. Use the userId for the author object."
  author: Int
  "Find objects connected to author(s) in the array of author's userIds"
  authorIn: [ID]
  "Find objects connected to the author by the author's nicename"
  authorName: String
  "Find objects NOT connected to author(s) in the array of author's userIds"
  authorNotIn: [ID]
  "Filter the connection based on dates"
  dateQuery: DateQueryInput
  "True for objects with passwords; False for objects without passwords; null for all objects with or without passwords"
  hasPassword: Boolean
  "Specific database ID of the object"
  id: Int
  "Array of IDs for the objects to retrieve"
  in: [ID]
  "Get objects with a specific mimeType property"
  mimeType: MimeTypeEnum
  "Slug / post_name of the object"
  name: String
  "Specify objects to retrieve. Use slugs"
  nameIn: [String]
  "Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored"
  notIn: [ID]
  "What parameter to use to order the objects by."
  orderby: [PostObjectsConnectionOrderbyInput]
  "Use ID to return only children. Use 0 to return only top-level items"
  parent: ID
  "Specify objects whose parent is in an array"
  parentIn: [ID]
  "Specify posts whose parent is not in an array"
  parentNotIn: [ID]
  "Show posts with a specific password."
  password: String
  "Show Posts based on a keyword search"
  search: String
  "Retrieve posts where post status is in an array."
  stati: [PostStatusEnum]
  "Show posts with a specific status."
  status: PostStatusEnum
  "Title of the object"
  title: String
}

"Arguments for filtering the RootQueryToPluginConnection connection"
input RootQueryToPluginConnectionWhereArgs {
  "Show plugin based on a keyword search."
  search: String
  "Retrieve plugins where plugin status is in an array."
  stati: [PluginStatusEnum]
  "Show plugins with a specific status."
  status: PluginStatusEnum
}

"Arguments for filtering the RootQueryToPostConnection connection"
input RootQueryToPostConnectionWhereArgs {
  "The user that's connected as the author of the object. Use the userId for the author object."
  author: Int
  "Find objects connected to author(s) in the array of author's userIds"
  authorIn: [ID]
  "Find objects connected to the author by the author's nicename"
  authorName: String
  "Find objects NOT connected to author(s) in the array of author's userIds"
  authorNotIn: [ID]
  "Category ID"
  categoryId: Int
  "Array of category IDs, used to display objects from one category OR another"
  categoryIn: [ID]
  "Use Category Slug"
  categoryName: String
  "Array of category IDs, used to display objects from one category OR another"
  categoryNotIn: [ID]
  "Filter the connection based on dates"
  dateQuery: DateQueryInput
  "True for objects with passwords; False for objects without passwords; null for all objects with or without passwords"
  hasPassword: Boolean
  "Specific database ID of the object"
  id: Int
  "Array of IDs for the objects to retrieve"
  in: [ID]
  "Get objects with a specific mimeType property"
  mimeType: MimeTypeEnum
  "Slug / post_name of the object"
  name: String
  "Specify objects to retrieve. Use slugs"
  nameIn: [String]
  "Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored"
  notIn: [ID]
  "What parameter to use to order the objects by."
  orderby: [PostObjectsConnectionOrderbyInput]
  "Use ID to return only children. Use 0 to return only top-level items"
  parent: ID
  "Specify objects whose parent is in an array"
  parentIn: [ID]
  "Specify posts whose parent is not in an array"
  parentNotIn: [ID]
  "Show posts with a specific password."
  password: String
  "Show Posts based on a keyword search"
  search: String
  "Retrieve posts where post status is in an array."
  stati: [PostStatusEnum]
  "Show posts with a specific status."
  status: PostStatusEnum
  "Tag Slug"
  tag: String
  "Use Tag ID"
  tagId: String
  "Array of tag IDs, used to display objects from one tag OR another"
  tagIn: [ID]
  "Array of tag IDs, used to display objects from one tag OR another"
  tagNotIn: [ID]
  "Array of tag slugs, used to display objects from one tag AND another"
  tagSlugAnd: [String]
  "Array of tag slugs, used to include objects in ANY specified tags"
  tagSlugIn: [String]
  "Title of the object"
  title: String
}

"Arguments for filtering the RootQueryToPostFormatConnection connection"
input RootQueryToPostFormatConnectionWhereArgs {
  "Unique cache key to be produced when this query is stored in an object cache. Default is 'core'."
  cacheDomain: String
  "Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0."
  childOf: Int
  "True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false."
  childless: Boolean
  "Retrieve terms where the description is LIKE the input value. Default empty."
  descriptionLike: String
  "Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array."
  exclude: [ID]
  "Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array."
  excludeTree: [ID]
  "Whether to hide terms not assigned to any posts. Accepts true or false. Default false"
  hideEmpty: Boolean
  "Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true."
  hierarchical: Boolean
  "Array of term ids to include. Default empty array."
  include: [ID]
  "Array of names to return term(s) for. Default empty."
  name: [String]
  "Retrieve terms where the name is LIKE the input value. Default empty."
  nameLike: String
  "Array of object IDs. Results will be limited to terms associated with these objects."
  objectIds: [ID]
  "Direction the connection should be ordered in"
  order: OrderEnum
  "Field(s) to order terms by. Defaults to 'name'."
  orderby: TermObjectsConnectionOrderbyEnum
  "Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false."
  padCounts: Boolean
  "Parent term ID to retrieve direct-child terms of. Default empty."
  parent: Int
  "Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty."
  search: String
  "Array of slugs to return term(s) for. Default empty."
  slug: [String]
  "Array of term taxonomy IDs, to match when querying terms."
  termTaxonomId: [ID]
  "Array of term taxonomy IDs, to match when querying terms."
  termTaxonomyId: [ID]
  "Whether to prime meta caches for matched terms. Default true."
  updateTermMetaCache: Boolean
}

"Arguments for filtering the RootQueryToRevisionsConnection connection"
input RootQueryToRevisionsConnectionWhereArgs {
  "The Types of content to filter"
  contentTypes: [ContentTypeEnum]
  "Filter the connection based on dates"
  dateQuery: DateQueryInput
  "True for objects with passwords; False for objects without passwords; null for all objects with or without passwords"
  hasPassword: Boolean
  "Specific database ID of the object"
  id: Int
  "Array of IDs for the objects to retrieve"
  in: [ID]
  "Get objects with a specific mimeType property"
  mimeType: MimeTypeEnum
  "Slug / post_name of the object"
  name: String
  "Specify objects to retrieve. Use slugs"
  nameIn: [String]
  "Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored"
  notIn: [ID]
  "What parameter to use to order the objects by."
  orderby: [PostObjectsConnectionOrderbyInput]
  "Use ID to return only children. Use 0 to return only top-level items"
  parent: ID
  "Specify objects whose parent is in an array"
  parentIn: [ID]
  "Specify posts whose parent is not in an array"
  parentNotIn: [ID]
  "Show posts with a specific password."
  password: String
  "Show Posts based on a keyword search"
  search: String
  "Retrieve posts where post status is in an array."
  stati: [PostStatusEnum]
  "Show posts with a specific status."
  status: PostStatusEnum
  "Title of the object"
  title: String
}

"Arguments for filtering the RootQueryToTagConnection connection"
input RootQueryToTagConnectionWhereArgs {
  "Unique cache key to be produced when this query is stored in an object cache. Default is 'core'."
  cacheDomain: String
  "Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0."
  childOf: Int
  "True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false."
  childless: Boolean
  "Retrieve terms where the description is LIKE the input value. Default empty."
  descriptionLike: String
  "Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array."
  exclude: [ID]
  "Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array."
  excludeTree: [ID]
  "Whether to hide terms not assigned to any posts. Accepts true or false. Default false"
  hideEmpty: Boolean
  "Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true."
  hierarchical: Boolean
  "Array of term ids to include. Default empty array."
  include: [ID]
  "Array of names to return term(s) for. Default empty."
  name: [String]
  "Retrieve terms where the name is LIKE the input value. Default empty."
  nameLike: String
  "Array of object IDs. Results will be limited to terms associated with these objects."
  objectIds: [ID]
  "Direction the connection should be ordered in"
  order: OrderEnum
  "Field(s) to order terms by. Defaults to 'name'."
  orderby: TermObjectsConnectionOrderbyEnum
  "Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false."
  padCounts: Boolean
  "Parent term ID to retrieve direct-child terms of. Default empty."
  parent: Int
  "Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty."
  search: String
  "Array of slugs to return term(s) for. Default empty."
  slug: [String]
  "Array of term taxonomy IDs, to match when querying terms."
  termTaxonomId: [ID]
  "Array of term taxonomy IDs, to match when querying terms."
  termTaxonomyId: [ID]
  "Whether to prime meta caches for matched terms. Default true."
  updateTermMetaCache: Boolean
}

"Arguments for filtering the RootQueryToTermNodeConnection connection"
input RootQueryToTermNodeConnectionWhereArgs {
  "Unique cache key to be produced when this query is stored in an object cache. Default is 'core'."
  cacheDomain: String
  "Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0."
  childOf: Int
  "True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false."
  childless: Boolean
  "Retrieve terms where the description is LIKE the input value. Default empty."
  descriptionLike: String
  "Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array."
  exclude: [ID]
  "Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array."
  excludeTree: [ID]
  "Whether to hide terms not assigned to any posts. Accepts true or false. Default false"
  hideEmpty: Boolean
  "Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true."
  hierarchical: Boolean
  "Array of term ids to include. Default empty array."
  include: [ID]
  "Array of names to return term(s) for. Default empty."
  name: [String]
  "Retrieve terms where the name is LIKE the input value. Default empty."
  nameLike: String
  "Array of object IDs. Results will be limited to terms associated with these objects."
  objectIds: [ID]
  "Direction the connection should be ordered in"
  order: OrderEnum
  "Field(s) to order terms by. Defaults to 'name'."
  orderby: TermObjectsConnectionOrderbyEnum
  "Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false."
  padCounts: Boolean
  "Parent term ID to retrieve direct-child terms of. Default empty."
  parent: Int
  "Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty."
  search: String
  "Array of slugs to return term(s) for. Default empty."
  slug: [String]
  "The Taxonomy to filter terms by"
  taxonomies: [TaxonomyEnum]
  "Array of term taxonomy IDs, to match when querying terms."
  termTaxonomId: [ID]
  "Array of term taxonomy IDs, to match when querying terms."
  termTaxonomyId: [ID]
  "Whether to prime meta caches for matched terms. Default true."
  updateTermMetaCache: Boolean
}

"Arguments for filtering the RootQueryToUserConnection connection"
input RootQueryToUserConnectionWhereArgs {
  "Array of userIds to exclude."
  exclude: [Int]
  "Pass an array of post types to filter results to users who have published posts in those post types."
  hasPublishedPosts: [ContentTypeEnum]
  "Array of userIds to include."
  include: [Int]
  "The user login."
  login: String
  "An array of logins to include. Users matching one of these logins will be included in results."
  loginIn: [String]
  "An array of logins to exclude. Users matching one of these logins will not be included in results."
  loginNotIn: [String]
  "The user nicename."
  nicename: String
  "An array of nicenames to include. Users matching one of these nicenames will be included in results."
  nicenameIn: [String]
  "An array of nicenames to exclude. Users matching one of these nicenames will not be included in results."
  nicenameNotIn: [String]
  "What parameter to use to order the objects by."
  orderby: [UsersConnectionOrderbyInput]
  "An array of role names that users must match to be included in results. Note that this is an inclusive list: users must match *each* role."
  role: UserRoleEnum
  "An array of role names. Matched users must have at least one of these roles."
  roleIn: [UserRoleEnum]
  "An array of role names to exclude. Users matching one or more of these roles will not be included in results."
  roleNotIn: [UserRoleEnum]
  "Search keyword. Searches for possible string matches on columns. When \"searchColumns\" is left empty, it tries to determine which column to search in based on search string."
  search: String
  "Array of column names to be searched. Accepts 'ID', 'login', 'nicename', 'email', 'url'."
  searchColumns: [UsersConnectionSearchColumnEnum]
}

"Input for the sendPasswordResetEmail mutation."
input SendPasswordResetEmailInput {
  "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "A string that contains the user's username or email address."
  username: String!
}

"Arguments for filtering the TagToContentNodeConnection connection"
input TagToContentNodeConnectionWhereArgs {
  "The Types of content to filter"
  contentTypes: [ContentTypesOfTagEnum]
  "Filter the connection based on dates"
  dateQuery: DateQueryInput
  "True for objects with passwords; False for objects without passwords; null for all objects with or without passwords"
  hasPassword: Boolean
  "Specific database ID of the object"
  id: Int
  "Array of IDs for the objects to retrieve"
  in: [ID]
  "Get objects with a specific mimeType property"
  mimeType: MimeTypeEnum
  "Slug / post_name of the object"
  name: String
  "Specify objects to retrieve. Use slugs"
  nameIn: [String]
  "Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored"
  notIn: [ID]
  "What parameter to use to order the objects by."
  orderby: [PostObjectsConnectionOrderbyInput]
  "Use ID to return only children. Use 0 to return only top-level items"
  parent: ID
  "Specify objects whose parent is in an array"
  parentIn: [ID]
  "Specify posts whose parent is not in an array"
  parentNotIn: [ID]
  "Show posts with a specific password."
  password: String
  "Show Posts based on a keyword search"
  search: String
  "Retrieve posts where post status is in an array."
  stati: [PostStatusEnum]
  "Show posts with a specific status."
  status: PostStatusEnum
  "Title of the object"
  title: String
}

"Arguments for filtering the TagToPostConnection connection"
input TagToPostConnectionWhereArgs {
  "The user that's connected as the author of the object. Use the userId for the author object."
  author: Int
  "Find objects connected to author(s) in the array of author's userIds"
  authorIn: [ID]
  "Find objects connected to the author by the author's nicename"
  authorName: String
  "Find objects NOT connected to author(s) in the array of author's userIds"
  authorNotIn: [ID]
  "Category ID"
  categoryId: Int
  "Array of category IDs, used to display objects from one category OR another"
  categoryIn: [ID]
  "Use Category Slug"
  categoryName: String
  "Array of category IDs, used to display objects from one category OR another"
  categoryNotIn: [ID]
  "Filter the connection based on dates"
  dateQuery: DateQueryInput
  "True for objects with passwords; False for objects without passwords; null for all objects with or without passwords"
  hasPassword: Boolean
  "Specific database ID of the object"
  id: Int
  "Array of IDs for the objects to retrieve"
  in: [ID]
  "Get objects with a specific mimeType property"
  mimeType: MimeTypeEnum
  "Slug / post_name of the object"
  name: String
  "Specify objects to retrieve. Use slugs"
  nameIn: [String]
  "Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored"
  notIn: [ID]
  "What parameter to use to order the objects by."
  orderby: [PostObjectsConnectionOrderbyInput]
  "Use ID to return only children. Use 0 to return only top-level items"
  parent: ID
  "Specify objects whose parent is in an array"
  parentIn: [ID]
  "Specify posts whose parent is not in an array"
  parentNotIn: [ID]
  "Show posts with a specific password."
  password: String
  "Show Posts based on a keyword search"
  search: String
  "Retrieve posts where post status is in an array."
  stati: [PostStatusEnum]
  "Show posts with a specific status."
  status: PostStatusEnum
  "Tag Slug"
  tag: String
  "Use Tag ID"
  tagId: String
  "Array of tag IDs, used to display objects from one tag OR another"
  tagIn: [ID]
  "Array of tag IDs, used to display objects from one tag OR another"
  tagNotIn: [ID]
  "Array of tag slugs, used to display objects from one tag AND another"
  tagSlugAnd: [String]
  "Array of tag slugs, used to include objects in ANY specified tags"
  tagSlugIn: [String]
  "Title of the object"
  title: String
}

"Input for the updateCategory mutation."
input UpdateCategoryInput {
  "The slug that the category will be an alias of"
  aliasOf: String
  "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The description of the category object"
  description: String
  "The ID of the category object to update"
  id: ID!
  "The name of the category object to mutate"
  name: String
  "The ID of the category that should be set as the parent"
  parentId: ID
  "If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name."
  slug: String
}

"Input for the updateComment mutation."
input UpdateCommentInput {
  "The approval status of the comment."
  approved: String
  "The name of the comment's author."
  author: String
  "The email of the comment's author."
  authorEmail: String
  "The url of the comment's author."
  authorUrl: String
  "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The database ID of the post object the comment belongs to."
  commentOn: Int
  "Content of the comment."
  content: String
  "The date of the object. Preferable to enter as year/month/day ( e.g. 01/31/2017 ) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, \"2017\" as the input will use current date with timestamp 20:17 "
  date: String
  "The ID of the comment being updated."
  id: ID!
  "Parent comment ID of current comment."
  parent: ID
  "The approval status of the comment"
  status: CommentStatusEnum
  "Type of comment."
  type: String
}

"Input for the updateCourse mutation."
input UpdateCourseInput {
  "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The content of the object"
  content: String
  "The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, \"2017\" as the input will use current date with timestamp 20:17 "
  date: String
  "The ID of the course object"
  id: ID!
  "Override the edit lock when another user is editing the post"
  ignoreEditLock: Boolean
  "A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types."
  menuOrder: Int
  "The ID of the parent object"
  parentId: ID
  "The password used to protect the content of the object"
  password: String
  "The slug of the object"
  slug: String
  "The status of the object"
  status: PostStatusEnum
  "The title of the object"
  title: String
}

"Input for the updateGeneralFragment mutation."
input UpdateGeneralFragmentInput {
  "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The content of the object"
  content: String
  "The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, \"2017\" as the input will use current date with timestamp 20:17 "
  date: String
  "The ID of the generalFragment object"
  id: ID!
  "Override the edit lock when another user is editing the post"
  ignoreEditLock: Boolean
  "A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types."
  menuOrder: Int
  "The password used to protect the content of the object"
  password: String
  "The slug of the object"
  slug: String
  "The status of the object"
  status: PostStatusEnum
  "The title of the object"
  title: String
}

"Input for the updateIndividualCourse mutation."
input UpdateIndividualCourseInput {
  "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The content of the object"
  content: String
  "The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, \"2017\" as the input will use current date with timestamp 20:17 "
  date: String
  "The ID of the individualCourse object"
  id: ID!
  "Override the edit lock when another user is editing the post"
  ignoreEditLock: Boolean
  "A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types."
  menuOrder: Int
  "The password used to protect the content of the object"
  password: String
  "The slug of the object"
  slug: String
  "The status of the object"
  status: PostStatusEnum
  "The title of the object"
  title: String
}

"Input for the updateMediaItem mutation."
input UpdateMediaItemInput {
  "Alternative text to display when mediaItem is not displayed"
  altText: String
  "The userId to assign as the author of the mediaItem"
  authorId: ID
  "The caption for the mediaItem"
  caption: String
  "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The comment status for the mediaItem"
  commentStatus: String
  "The date of the mediaItem"
  date: String
  "The date (in GMT zone) of the mediaItem"
  dateGmt: String
  "Description of the mediaItem"
  description: String
  "The file name of the mediaItem"
  filePath: String
  "The file type of the mediaItem"
  fileType: MimeTypeEnum
  "The ID of the mediaItem object"
  id: ID!
  "The ID of the parent object"
  parentId: ID
  "The ping status for the mediaItem"
  pingStatus: String
  "The slug of the mediaItem"
  slug: String
  "The status of the mediaItem"
  status: MediaItemStatusEnum
  "The title of the mediaItem"
  title: String
}

"Input for the updatePage mutation."
input UpdatePageInput {
  "The userId to assign as the author of the object"
  authorId: ID
  "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The comment status for the object"
  commentStatus: String
  "The content of the object"
  content: String
  "The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, \"2017\" as the input will use current date with timestamp 20:17 "
  date: String
  "The ID of the page object"
  id: ID!
  "Override the edit lock when another user is editing the post"
  ignoreEditLock: Boolean
  "A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types."
  menuOrder: Int
  "The ID of the parent object"
  parentId: ID
  "The password used to protect the content of the object"
  password: String
  "The slug of the object"
  slug: String
  "The status of the object"
  status: PostStatusEnum
  "The title of the object"
  title: String
}

"Input for the updatePostFormat mutation."
input UpdatePostFormatInput {
  "The slug that the post_format will be an alias of"
  aliasOf: String
  "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The description of the post_format object"
  description: String
  "The ID of the postFormat object to update"
  id: ID!
  "The name of the post_format object to mutate"
  name: String
  "If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name."
  slug: String
}

"Input for the updatePost mutation."
input UpdatePostInput {
  "The userId to assign as the author of the object"
  authorId: ID
  "Set connections between the post and categories"
  categories: PostCategoriesInput
  "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The comment status for the object"
  commentStatus: String
  "The content of the object"
  content: String
  "The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, \"2017\" as the input will use current date with timestamp 20:17 "
  date: String
  "The excerpt of the object"
  excerpt: String
  "The ID of the post object"
  id: ID!
  "Override the edit lock when another user is editing the post"
  ignoreEditLock: Boolean
  "A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types."
  menuOrder: Int
  "The password used to protect the content of the object"
  password: String
  "The ping status for the object"
  pingStatus: String
  "URLs that have been pinged."
  pinged: [String]
  "Set connections between the post and postFormats"
  postFormats: PostPostFormatsInput
  "The slug of the object"
  slug: String
  "The status of the object"
  status: PostStatusEnum
  "Set connections between the post and tags"
  tags: PostTagsInput
  "The title of the object"
  title: String
  "URLs queued to be pinged."
  toPing: [String]
}

"Input for the updateSettings mutation."
input UpdateSettingsInput {
  "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "Разрешить оставлять комментарии к новым записям."
  discussionSettingsDefaultCommentStatus: String
  "Разрешить ссылки оповещения с других блогов (уведомления и обратные ссылки) на новые статьи."
  discussionSettingsDefaultPingStatus: String
  "Общий формат даты."
  generalSettingsDateFormat: String
  "Слоган сайта."
  generalSettingsDescription: String
  "Этот адрес используется в целях администрирования. Например, для уведомления о новых пользователях."
  generalSettingsEmail: String
  "Код локали WordPress."
  generalSettingsLanguage: String
  "Первый день недели."
  generalSettingsStartOfWeek: Int
  "Общий формат времени."
  generalSettingsTimeFormat: String
  "Город в той же временной зоне что и у вас."
  generalSettingsTimezone: String
  "Название сайта."
  generalSettingsTitle: String
  "Адрес сайта (URL)"
  generalSettingsUrl: String
  "ID страницы, на которой должны отображаться последние записи"
  readingSettingsPageForPosts: Int
  "ID страницы, которая должна отображаться на главной странице"
  readingSettingsPageOnFront: Int
  "Максимум страниц блога для показа."
  readingSettingsPostsPerPage: Int
  "Что показать на главной странице"
  readingSettingsShowOnFront: String
  "Рубрика для записей по умолчанию."
  writingSettingsDefaultCategory: Int
  "Формат записей по умолчанию."
  writingSettingsDefaultPostFormat: String
  "Преобразовывать смайлики наподобие :-) и :-P в картинки при показе."
  writingSettingsUseSmilies: Boolean
}

"Input for the updateTag mutation."
input UpdateTagInput {
  "The slug that the post_tag will be an alias of"
  aliasOf: String
  "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The description of the post_tag object"
  description: String
  "The ID of the tag object to update"
  id: ID!
  "The name of the post_tag object to mutate"
  name: String
  "If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name."
  slug: String
}

"Input for the updateUser mutation."
input UpdateUserInput {
  "User's AOL IM account."
  aim: String
  "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "A string containing content about the user."
  description: String
  "A string that will be shown on the site. Defaults to user's username. It is likely that you will want to change this, for both appearance and security through obscurity (that is if you dont use and delete the default admin user)."
  displayName: String
  "A string containing the user's email address."
  email: String
  "\tThe user's first name."
  firstName: String
  "The ID of the user"
  id: ID!
  "User's Jabber account."
  jabber: String
  "The user's last name."
  lastName: String
  "User's locale."
  locale: String
  "A string that contains a URL-friendly name for the user. The default is the user's username."
  nicename: String
  "The user's nickname, defaults to the user's username."
  nickname: String
  "A string that contains the plain text password for the user."
  password: String
  "The date the user registered. Format is Y-m-d H:i:s."
  registered: String
  "A string for whether to enable the rich editor or not. False if not empty."
  richEditing: String
  "An array of roles to be assigned to the user."
  roles: [String]
  "A string containing the user's URL for the user's web site."
  websiteUrl: String
  "User's Yahoo IM account."
  yim: String
}

"Arguments for filtering the UserToCommentConnection connection"
input UserToCommentConnectionWhereArgs {
  "Comment author email address."
  authorEmail: String
  "Array of author IDs to include comments for."
  authorIn: [ID]
  "Array of author IDs to exclude comments for."
  authorNotIn: [ID]
  "Comment author URL."
  authorUrl: String
  "Array of comment IDs to include."
  commentIn: [ID]
  "Array of IDs of users whose unapproved comments will be returned by the query regardless of status."
  commentNotIn: [ID]
  "Include comments of a given type."
  commentType: String
  "Include comments from a given array of comment types."
  commentTypeIn: [String]
  "Exclude comments from a given array of comment types."
  commentTypeNotIn: String
  "Content object author ID to limit results by."
  contentAuthor: [ID]
  "Array of author IDs to retrieve comments for."
  contentAuthorIn: [ID]
  "Array of author IDs *not* to retrieve comments for."
  contentAuthorNotIn: [ID]
  "Limit results to those affiliated with a given content object ID."
  contentId: ID
  "Array of content object IDs to include affiliated comments for."
  contentIdIn: [ID]
  "Array of content object IDs to exclude affiliated comments for."
  contentIdNotIn: [ID]
  "Content object name (i.e. slug ) to retrieve affiliated comments for."
  contentName: String
  "Content Object parent ID to retrieve affiliated comments for."
  contentParent: Int
  "Array of content object statuses to retrieve affiliated comments for. Pass 'any' to match any value."
  contentStatus: [PostStatusEnum]
  "Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value."
  contentType: [ContentTypeEnum]
  "Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty"
  includeUnapproved: [ID]
  "Karma score to retrieve matching comments for."
  karma: Int
  "The cardinality of the order of the connection"
  order: OrderEnum
  "Field to order the comments by."
  orderby: CommentsConnectionOrderbyEnum
  "Parent ID of comment to retrieve children of."
  parent: Int
  "Array of parent IDs of comments to retrieve children for."
  parentIn: [ID]
  "Array of parent IDs of comments *not* to retrieve children for."
  parentNotIn: [ID]
  "Search term(s) to retrieve matching comments for."
  search: String
  "Comment status to limit results by."
  status: String
  "Include comments for a specific user ID."
  userId: ID
}

"Arguments for filtering the UserToMediaItemConnection connection"
input UserToMediaItemConnectionWhereArgs {
  "The user that's connected as the author of the object. Use the userId for the author object."
  author: Int
  "Find objects connected to author(s) in the array of author's userIds"
  authorIn: [ID]
  "Find objects connected to the author by the author's nicename"
  authorName: String
  "Find objects NOT connected to author(s) in the array of author's userIds"
  authorNotIn: [ID]
  "Filter the connection based on dates"
  dateQuery: DateQueryInput
  "True for objects with passwords; False for objects without passwords; null for all objects with or without passwords"
  hasPassword: Boolean
  "Specific database ID of the object"
  id: Int
  "Array of IDs for the objects to retrieve"
  in: [ID]
  "Get objects with a specific mimeType property"
  mimeType: MimeTypeEnum
  "Slug / post_name of the object"
  name: String
  "Specify objects to retrieve. Use slugs"
  nameIn: [String]
  "Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored"
  notIn: [ID]
  "What parameter to use to order the objects by."
  orderby: [PostObjectsConnectionOrderbyInput]
  "Use ID to return only children. Use 0 to return only top-level items"
  parent: ID
  "Specify objects whose parent is in an array"
  parentIn: [ID]
  "Specify posts whose parent is not in an array"
  parentNotIn: [ID]
  "Show posts with a specific password."
  password: String
  "Show Posts based on a keyword search"
  search: String
  "Retrieve posts where post status is in an array."
  stati: [PostStatusEnum]
  "Show posts with a specific status."
  status: PostStatusEnum
  "Title of the object"
  title: String
}

"Arguments for filtering the UserToPageConnection connection"
input UserToPageConnectionWhereArgs {
  "The user that's connected as the author of the object. Use the userId for the author object."
  author: Int
  "Find objects connected to author(s) in the array of author's userIds"
  authorIn: [ID]
  "Find objects connected to the author by the author's nicename"
  authorName: String
  "Find objects NOT connected to author(s) in the array of author's userIds"
  authorNotIn: [ID]
  "Filter the connection based on dates"
  dateQuery: DateQueryInput
  "True for objects with passwords; False for objects without passwords; null for all objects with or without passwords"
  hasPassword: Boolean
  "Specific database ID of the object"
  id: Int
  "Array of IDs for the objects to retrieve"
  in: [ID]
  "Get objects with a specific mimeType property"
  mimeType: MimeTypeEnum
  "Slug / post_name of the object"
  name: String
  "Specify objects to retrieve. Use slugs"
  nameIn: [String]
  "Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored"
  notIn: [ID]
  "What parameter to use to order the objects by."
  orderby: [PostObjectsConnectionOrderbyInput]
  "Use ID to return only children. Use 0 to return only top-level items"
  parent: ID
  "Specify objects whose parent is in an array"
  parentIn: [ID]
  "Specify posts whose parent is not in an array"
  parentNotIn: [ID]
  "Show posts with a specific password."
  password: String
  "Show Posts based on a keyword search"
  search: String
  "Retrieve posts where post status is in an array."
  stati: [PostStatusEnum]
  "Show posts with a specific status."
  status: PostStatusEnum
  "Title of the object"
  title: String
}

"Arguments for filtering the UserToPostConnection connection"
input UserToPostConnectionWhereArgs {
  "The user that's connected as the author of the object. Use the userId for the author object."
  author: Int
  "Find objects connected to author(s) in the array of author's userIds"
  authorIn: [ID]
  "Find objects connected to the author by the author's nicename"
  authorName: String
  "Find objects NOT connected to author(s) in the array of author's userIds"
  authorNotIn: [ID]
  "Category ID"
  categoryId: Int
  "Array of category IDs, used to display objects from one category OR another"
  categoryIn: [ID]
  "Use Category Slug"
  categoryName: String
  "Array of category IDs, used to display objects from one category OR another"
  categoryNotIn: [ID]
  "Filter the connection based on dates"
  dateQuery: DateQueryInput
  "True for objects with passwords; False for objects without passwords; null for all objects with or without passwords"
  hasPassword: Boolean
  "Specific database ID of the object"
  id: Int
  "Array of IDs for the objects to retrieve"
  in: [ID]
  "Get objects with a specific mimeType property"
  mimeType: MimeTypeEnum
  "Slug / post_name of the object"
  name: String
  "Specify objects to retrieve. Use slugs"
  nameIn: [String]
  "Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored"
  notIn: [ID]
  "What parameter to use to order the objects by."
  orderby: [PostObjectsConnectionOrderbyInput]
  "Use ID to return only children. Use 0 to return only top-level items"
  parent: ID
  "Specify objects whose parent is in an array"
  parentIn: [ID]
  "Specify posts whose parent is not in an array"
  parentNotIn: [ID]
  "Show posts with a specific password."
  password: String
  "Show Posts based on a keyword search"
  search: String
  "Retrieve posts where post status is in an array."
  stati: [PostStatusEnum]
  "Show posts with a specific status."
  status: PostStatusEnum
  "Tag Slug"
  tag: String
  "Use Tag ID"
  tagId: String
  "Array of tag IDs, used to display objects from one tag OR another"
  tagIn: [ID]
  "Array of tag IDs, used to display objects from one tag OR another"
  tagNotIn: [ID]
  "Array of tag slugs, used to display objects from one tag AND another"
  tagSlugAnd: [String]
  "Array of tag slugs, used to include objects in ANY specified tags"
  tagSlugIn: [String]
  "Title of the object"
  title: String
}

"Arguments for filtering the UserToRevisionsConnection connection"
input UserToRevisionsConnectionWhereArgs {
  "The Types of content to filter"
  contentTypes: [ContentTypeEnum]
  "Filter the connection based on dates"
  dateQuery: DateQueryInput
  "True for objects with passwords; False for objects without passwords; null for all objects with or without passwords"
  hasPassword: Boolean
  "Specific database ID of the object"
  id: Int
  "Array of IDs for the objects to retrieve"
  in: [ID]
  "Get objects with a specific mimeType property"
  mimeType: MimeTypeEnum
  "Slug / post_name of the object"
  name: String
  "Specify objects to retrieve. Use slugs"
  nameIn: [String]
  "Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored"
  notIn: [ID]
  "What parameter to use to order the objects by."
  orderby: [PostObjectsConnectionOrderbyInput]
  "Use ID to return only children. Use 0 to return only top-level items"
  parent: ID
  "Specify objects whose parent is in an array"
  parentIn: [ID]
  "Specify posts whose parent is not in an array"
  parentNotIn: [ID]
  "Show posts with a specific password."
  password: String
  "Show Posts based on a keyword search"
  search: String
  "Retrieve posts where post status is in an array."
  stati: [PostStatusEnum]
  "Show posts with a specific status."
  status: PostStatusEnum
  "Title of the object"
  title: String
}

"Options for ordering the connection"
input UsersConnectionOrderbyInput {
  "The field name used to sort the results."
  field: UsersConnectionOrderbyEnum!
  "The cardinality of the order of the connection"
  order: OrderEnum
}
